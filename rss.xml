<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"
    xmlns:dc="http://purl.org/dc/elements/1.1/">
    <channel>
        <title>aas.sh</title>
        <link>https://aas.sh</link>
        <description><![CDATA[Hey there! My name is Ashley and I'm a software engineer from the UK. I love working on challenging projects and trying new things — I try to never stop learning.]]></description>
        <atom:link href="https://aas.sh/rss.xml" rel="self"
                   type="application/rss+xml" />
        <lastBuildDate>Fri, 23 Feb 2024 00:00:00 UT</lastBuildDate>
        <item>
    <title>I'm burned out</title>
    <link>https://aas.sh/blog/burnout/index.html</link>
    <description><![CDATA[<h1 id="spark">Spark</h1>
<p>When I was younger, my favourite passtime was to draw mazes and subject others to them, forcing to solve them on the spot. My mazes started off pretty tame, but eventually they got so complicated that I wasn’t even thinking about where to put the goal and instead was focused on the mechanics of solving it. For instance, some of my mazes relied on folds in the paper, so you’d have to unfold and re-fold creases to open up pathways and traverse ‘around’ the page, and some mazes were linked to others via portals on other pages.</p>
<p>When I went to sixth form (or highschool, as US readers would put it), I was asked to think more about what I wanted to do with myself and my career. I was good at maths and computers, but I didn’t really know what I wanted to do. Eventually I landed on the idea of trying to make video games — I had been trying to make them in my spare time in <a href="https://gamemaker.io/en">GameMaker</a>, after all.</p>
<p>I went to university and learned to program. Despite being quite far behind from a programming perspective, the skills I learned from my further maths modules in sixth form really helped me with the problem solving mindset as well as prepare me for some of the harder challenges. Eventually I overtook the other students and became relatively okay in C++. Unfortunately though, university had failed to teach me what I really wanted to know: how to make games in something like <a href="https://unity.com/">Unity</a> or <a href="https://www.unrealengine.com/en-US">Unreal</a>.</p>
<p>Out of spite, I essentially went away and taught myself how to make game engines, many of which are available on this very website for people to see. After making very basic engines with <a href="https://www.sfml-dev.org/">SFML</a> and eventually <a href="https://learnopengl.com/">OpenGL</a>, I came to understand some of the fundamentals of a game engine. This forbidden knowledge was invaluble and gave me a great advantage during the latter half of university, allowing me to succeed in competitions and pass modules with ease. University didn’t really teach; it tested.</p>
<p>After university, I’ve been through two games studios and various roles until we hit today: I’m currently 27 years old, and I am extremely burned out. I’ve lost my passions and my drive to keep learning. I feel really hollow, as my own website says ‘I try to never stop learning’, and yet I hadn’t really done a project in my spare time.</p>
<p>What happened?</p>
<h1 id="burnout">Burnout</h1>
<p>The issue is that work simply takes so much energy, and the other side of the coin is that solo indie dev is extremely difficult and requires many hours of time, lots of energy, and a great amount of determination. That’s why all my projects have learning outcomes as I already know that I wasn’t really interested in releasing a game.</p>
<p>After speaking to colleagues, therapists, friends and myself, I believe I’ve determined the root cause of my burnout: somehow, <strong>my love for game development was conflated with my enjoyment of programming</strong>. Everything I’ve made begs questions like:</p>
<ul>
<li>How does this make me more employable?</li>
<li>How could I make money from this?</li>
<li>How would this look on my website?</li>
<li>What transferable skills will I learn?</li>
</ul>
<p>Eventually, hobby projects became a vessel for career-related issues to bleed into my personal life. I was no longer making things for myself, but I was doing it for potential employers and maybe even <em>for my website</em>.</p>
<p>Even the act of playing games has become less enjoyable. I feel quite hollow and empty. While I do believe we’ve had a few rough years for video games (especially compared to the <a href="https://www.youtube.com/watch?v=w5u8jyPIrIY">golden age of Xbox 360</a> (and also PS2!), I don’t even enjoy the games I used to. There is something wrong with me.</p>
<p>I didn’t know that burnout was a professional term — I always thought it was just a phrase of saying you’re tired. No. It is real, and after some research I’ve discovered how common it is in the tech industry, and I think that it was this shift from making games to software engineering that led this burnout. I’ve always loved talking about games and debating about mechanics and game design, but the further I’ve got into my career the less involved I’ve been with the creative side of the industry. It’s still early days, but I’m trying to rectify this.</p>
<h1 id="stepping-forward">Stepping forward</h1>
<p>This burnout led to a spiral and an identity crisis. I was no longer the person I was; I didn’t enjoy the same games, didn’t enjoy programming. My stance on established vs proprietary engines changed. I was becoming a new person. This was when I learned something: <strong>this doesn’t have to be a bad thing</strong>.</p>
<p>When you are stricken with these kinds of feelings, the worst thing you can do is tether yourself to your old decisions. Just because I used to like doing something, doesn’t mean I have to force myself to try and get back into it. With this in mind, I’ve been trying to get out of this slump by trying new things.</p>
<p>Lately, I’ve been getting into making music. I purchased <a href="https://www.bitwig.com/">Bitwig Studio</a> and have been having a blast making noises. It’s so refreshing having a hobby that I’m really bad at: there’s no expectations for me to do well, and I have no intention on this becoming related to my career, so there’s no pressure. If I feel like it, I’ll do it. I still have low energy levels now and then, but when I can I am trying to focus it into music making and music theory. Wish me luck!</p>
<p>If there’s one lesson I’ve learned, it’s this mantra: heat, strike, rest. When trying to improve at something, try to approach it like a blacksmith forging a sword.</p>
<ul>
<li><strong>Heat</strong> — Watch some videos that get you excited and inspired, or maybe gives you an idea of something you want to try.</li>
<li><strong>Strike</strong> — Do the work! Expend your energy doing the thing you want to do.</li>
<li><strong>Rest</strong> — Enjoy the feeling of having made progress. Force yourself to step back and reflect on your work, as well as taking the time necessary to recover before repeating the process.</li>
</ul>
<p>I realised that a 5 day working week didn’t really allow me to follow this pattern. There was no ‘heat’ anymore as I am no longer as inspired as I used to be in terms of programming, and I feel like I can never catch my breath. I’m doing too much striking and it’s wearing me down, and so I am currently exploring how to fix this.</p>
<p>Other than that though, eveything is still a work in progress. I don’t really know what I’m doing if I’m honest. I have a lot of self help books to read, therapy to attend and career moves to consider. Thankfully I’m doing okay on my current team and they are giving me a lot of support, but ultimately I think I need to reconnect with the creative person within me. I just wanted to write this blog post so that it doesn’t look like I’ve fully abandoned my website.</p>
<p>Thanks for reading. Normally I’d say ‘expect X in the future’ or whatever, but I’m not going to promise anything. From here on out, I’m going to do what I want and nothing more. I’m going to take life one-second-per-second, and only do things that matter to me. I am still mentoring people and I still enjoy teaching, but I’m not going to keep putting myself down for ‘failing’ to do things like post on my website, especially when I doubt many people even read this.</p>]]></description>
    <pubDate>Fri, 23 Feb 2024 00:00:00 UT</pubDate>
    <guid>https://aas.sh/blog/burnout/index.html</guid>
    <dc:creator>Ashley Rose</dc:creator>
</item>
<item>
    <title>I'm burned out</title>
    <link>https://aas.sh/blog/burnout/index.html</link>
    <description><![CDATA[<section id="spark" class="article-section">
<h1><span>Spark</span><a href="#spark" class="anchor las la-link" title="spark"></a></h1>
<p>When I was younger, my favourite passtime was to draw mazes and subject others to them, forcing to solve them on the spot. My mazes started off pretty tame, but eventually they got so complicated that I wasn’t even thinking about where to put the goal and instead was focused on the mechanics of solving it. For instance, some of my mazes relied on folds in the paper, so you’d have to unfold and re-fold creases to open up pathways and traverse ‘around’ the page, and some mazes were linked to others via portals on other pages.</p>
<p>When I went to sixth form (or highschool, as US readers would put it), I was asked to think more about what I wanted to do with myself and my career. I was good at maths and computers, but I didn’t really know what I wanted to do. Eventually I landed on the idea of trying to make video games — I had been trying to make them in my spare time in <a href="https://gamemaker.io/en">GameMaker</a>, after all.</p>
<p>I went to university and learned to program. Despite being quite far behind from a programming perspective, the skills I learned from my further maths modules in sixth form really helped me with the problem solving mindset as well as prepare me for some of the harder challenges. Eventually I overtook the other students and became relatively okay in C++. Unfortunately though, university had failed to teach me what I really wanted to know: how to make games in something like <a href="https://unity.com/">Unity</a> or <a href="https://www.unrealengine.com/en-US">Unreal</a>.</p>
<p>Out of spite, I essentially went away and taught myself how to make game engines, many of which are available on this very website for people to see. After making very basic engines with <a href="https://www.sfml-dev.org/">SFML</a> and eventually <a href="https://learnopengl.com/">OpenGL</a>, I came to understand some of the fundamentals of a game engine. This forbidden knowledge was invaluble and gave me a great advantage during the latter half of university, allowing me to succeed in competitions and pass modules with ease. University didn’t really teach; it tested.</p>
<p>After university, I’ve been through two games studios and various roles until we hit today: I’m currently 27 years old, and I am extremely burned out. I’ve lost my passions and my drive to keep learning. I feel really hollow, as my own website says ‘I try to never stop learning’, and yet I hadn’t really done a project in my spare time.</p>
<p>What happened?</p>
</section>
<section id="burnout" class="article-section">
<h1><span>Burnout</span><a href="#burnout" class="anchor las la-link" title="burnout"></a></h1>
<p>The issue is that work simply takes so much energy, and the other side of the coin is that solo indie dev is extremely difficult and requires many hours of time, lots of energy, and a great amount of determination. That’s why all my projects have learning outcomes as I already know that I wasn’t really interested in releasing a game.</p>
<p>After speaking to colleagues, therapists, friends and myself, I believe I’ve determined the root cause of my burnout: somehow, <strong>my love for game development was conflated with my enjoyment of programming</strong>. Everything I’ve made begs questions like:</p>
<ul>
<li>How does this make me more employable?</li>
<li>How could I make money from this?</li>
<li>How would this look on my website?</li>
<li>What transferable skills will I learn?</li>
</ul>
<p>Eventually, hobby projects became a vessel for career-related issues to bleed into my personal life. I was no longer making things for myself, but I was doing it for potential employers and maybe even <em>for my website</em>.</p>
<p>Even the act of playing games has become less enjoyable. I feel quite hollow and empty. While I do believe we’ve had a few rough years for video games (especially compared to the <a href="https://www.youtube.com/watch?v=w5u8jyPIrIY">golden age of Xbox 360</a> (and also PS2!), I don’t even enjoy the games I used to. There is something wrong with me.</p>
<p>I didn’t know that burnout was a professional term — I always thought it was just a phrase of saying you’re tired. No. It is real, and after some research I’ve discovered how common it is in the tech industry, and I think that it was this shift from making games to software engineering that led this burnout. I’ve always loved talking about games and debating about mechanics and game design, but the further I’ve got into my career the less involved I’ve been with the creative side of the industry. It’s still early days, but I’m trying to rectify this.</p>
</section>
<section id="stepping-forward" class="article-section">
<h1><span>Stepping forward</span><a href="#stepping-forward" class="anchor las la-link" title="stepping-forward"></a></h1>
<p>This burnout led to a spiral and an identity crisis. I was no longer the person I was; I didn’t enjoy the same games, didn’t enjoy programming. My stance on established vs proprietary engines changed. I was becoming a new person. This was when I learned something: <strong>this doesn’t have to be a bad thing</strong>.</p>
<p>When you are stricken with these kinds of feelings, the worst thing you can do is tether yourself to your old decisions. Just because I used to like doing something, doesn’t mean I have to force myself to try and get back into it. With this in mind, I’ve been trying to get out of this slump by trying new things.</p>
<p>Lately, I’ve been getting into making music. I purchased <a href="https://www.bitwig.com/">Bitwig Studio</a> and have been having a blast making noises. It’s so refreshing having a hobby that I’m really bad at: there’s no expectations for me to do well, and I have no intention on this becoming related to my career, so there’s no pressure. If I feel like it, I’ll do it. I still have low energy levels now and then, but when I can I am trying to focus it into music making and music theory. Wish me luck!</p>
<p>If there’s one lesson I’ve learned, it’s this mantra: heat, strike, rest. When trying to improve at something, try to approach it like a blacksmith forging a sword.</p>
<ul>
<li><strong>Heat</strong> — Watch some videos that get you excited and inspired, or maybe gives you an idea of something you want to try.</li>
<li><strong>Strike</strong> — Do the work! Expend your energy doing the thing you want to do.</li>
<li><strong>Rest</strong> — Enjoy the feeling of having made progress. Force yourself to step back and reflect on your work, as well as taking the time necessary to recover before repeating the process.</li>
</ul>
<p>I realised that a 5 day working week didn’t really allow me to follow this pattern. There was no ‘heat’ anymore as I am no longer as inspired as I used to be in terms of programming, and I feel like I can never catch my breath. I’m doing too much striking and it’s wearing me down, and so I am currently exploring how to fix this.</p>
<p>Other than that though, eveything is still a work in progress. I don’t really know what I’m doing if I’m honest. I have a lot of self help books to read, therapy to attend and career moves to consider. Thankfully I’m doing okay on my current team and they are giving me a lot of support, but ultimately I think I need to reconnect with the creative person within me. I just wanted to write this blog post so that it doesn’t look like I’ve fully abandoned my website.</p>
<p>Thanks for reading. Normally I’d say ‘expect X in the future’ or whatever, but I’m not going to promise anything. From here on out, I’m going to do what I want and nothing more. I’m going to take life one-second-per-second, and only do things that matter to me. I am still mentoring people and I still enjoy teaching, but I’m not going to keep putting myself down for ‘failing’ to do things like post on my website, especially when I doubt many people even read this.</p>
</section>]]></description>
    <pubDate>Fri, 23 Feb 2024 00:00:00 UT</pubDate>
    <guid>https://aas.sh/blog/burnout/index.html</guid>
    <dc:creator>Ashley Rose</dc:creator>
</item>
<item>
    <title>Notakto: A Haskell game with Apecs and Raylib</title>
    <link>https://aas.sh/blog/notakto-a-haskell-game-with-apecs-and-raylib/index.html</link>
    <description><![CDATA[<div class="gitrepo" data-header="Notakto">
<p>A link to the repository can be found <a href="https://github.com/Ashe/Notakto/">here</a>.</p>
</div>
<div class="note" data-header="Out of date, but not to worry!">
<p>I wrote this post as I made the project, but to make things easier for newer readers I have been updating the codebase so that it takes advantage of some of the newer features of <a href="https://hackage.haskell.org/package/h-raylib">h-raylib</a> and removes depreciated code. Check out the git repository for the latest updates and be careful when copy-pasting code — unless you’re running my repository or you’re using the exact same versions of libraries, some of this code may not work.</p>
<p>The biggest change was that I’ve manually implemented the first person camera, which has the added bonus of showing how we can handle input and make changes to our ECS world.</p>
</div>
<h1 id="previously-on-apecs">Previously on Apecs</h1>
<p>Roughly 4 years ago, I wrote the post <a href="/blog/making-a-game-with-haskell-and-apecs/">An introduction to game development to game development in Haskell using Apecs</a>. I like to think it was one of my most well-received blog posts <a href="https://github.com/jonascarpay/apecs#links">considering it is featured on the Apecs repository itself</a>, as well as being a common topic across emails and communications I receive.</p>
<p><a href="https://hackage.haskell.org/package/apecs">Apecs</a> is a ‘fast <a href="https://en.wikipedia.org/wiki/Entity_component_system">Entity-Component-System</a> library for game programming’ written in <a href="https://www.haskell.org/">Haskell</a>. It is by far one of the best ECS implementations I’ve used and also happens to be my favourite way of structuring games when using Haskell.</p>
<p>However, enough time has passed (4 years!) that some of the tricks and methods used in that blog post are old enough to confuse beginners. Since that was never my intention, I thought I’d make a new blog post about it!</p>
<h1 id="about-this-post">About this post</h1>
<p>This post is going to be a little bit different. Whereas normally I’d finish a project and write a post about it, in this post I want to write it as I go along! Each time I finish implement something substantial, I’m going to add to this post so that I can really capture more of the development process.</p>
<p>This may have a few side-effects, however. Firstly, code we write near the beginning may change towards the end. If I make a simple mistake (such as a syntax improvement), I’ll simply swap it out for the superior. But I want the big decisions I make to be written about so that if I later decide against it I can articulate properly why in the post.</p>
<p>My blog has support for both projects and blog posts; this post is a blog post since it is capturing a moment in time, like a photograph. The associated project for this page will be the formal write-up for how the game works, but this will act more as a portfolio piece than as a tutorial. This is a bit of an experiment for me, so please let me know how you think it goes!</p>
<h1 id="introduction">Introduction</h1>
<h2 id="what-is-the-ecs-pattern">What is the ECS pattern?</h2>
<p>As the name suggests, the ECS pattern is divided into three parts: entities, components and systems. These parts work together to form the foundations of your game’s architecture.</p>
<ul>
<li><p><strong>Entity —</strong> Alone, an entity is just a unique identifier, such as a simple integer value. They aren’t very useful by themselves!</p></li>
<li><p><strong>Component —</strong> Data, essentially. Anything that has data you need to store between frames, such as position, velocity, health or gold. Each component is attached to an entity in some way — some games have just a big database where an entity is just an integer used as a look-up key, whereas others (who probably would be using <a href="https://en.wikipedia.org/wiki/Object-oriented_programming">object oriented programming</a>) might compose component lists within the entity class itself.</p></li>
<li><p><strong>System —</strong> The magic part that a lot of people miss out on! A system is simple: it iterates through entities and updates their components in some way. A player movement system might cherry-pick the player’s entity and update the velocity component with respect to whatever keys are held on the keyboard; a movement system would then iterate through <em>all</em> entities with positions and velocities and update their positions accordingly. If you can break the logic of your game into systems then things become a lot simpler and safer.</p></li>
</ul>
<p>It was through ECS that I began to understand how modern game engines work (no thanks to you, university!) since having a greater appreciation for how games can be architected gave me an insight that couldn’t be taught through anything other experience. That isn’t to say that game engines all use ECS, in fact most of them don’t since they want to write their own systems (rendering, physics, scripting etc) that <em>you</em> then use and may or may not customise. Also, they probably don’t implement entities and components in the same way; both <a href="https://unity.com/">Unity</a> and <a href="https://www.unrealengine.com/en-US">Unreal</a> engines allow for logic to be placed in their components whereas the ECS pattern encourages components to be purely data.</p>
<h2 id="what-is-raylib">What is Raylib?</h2>
<p>One thing we haven’t mentioned yet is that this project will be using <a href="https://www.raylib.com/">Raylib</a> for the rendering side of things. I’ve always wanted to learn more about Raylib, and my chance came when I found the <a href="https://hackage.haskell.org/package/h-raylib">Haskell bindings</a> released recently.</p>
<p>We won’t spend too much time talking about Raylib, in fact I’m using it purely because it’s a really easy way to get things on-screen. The documentation style surprises me a bit, with a preference for documenting the source code rather than an online version of the API. That said, for our purposes the <a href="https://www.raylib.com/cheatsheet/cheatsheet.html">cheatsheet</a> is an excellent resource for just understanding what functions Raylib provides us with and what arguments they take.</p>
<h2 id="what-is-notakto">What is Notakto?</h2>
<p><a href="https://en.wikipedia.org/wiki/Notakto">Notakto</a> is a variant of tic-tac-toe in which both players play using ‘crosses’ as their markers across multiple tic-tac-toe boards. Three crosses in a row on any board will ‘kill’ it, meaning that the board can no longer be played on. When there is only one board remaining, the player who kills it is considered the loser, meaning that to win you have to get yourself in a position where you force the other person to get three-in-a-row on the final board. It is still a solveable game like regular tic-tac-toe, but the stratagies involve enough effort that you will probably not find many people who can figure them out on their own.</p>
<p>Why did I chose to make Notakto? There’s a beauty in making a game where the rules are already well-defined since there is already a definition of ‘done’ — I know what I’m working towards and the project has scope, a perfect scenario for an experimental tutorial!</p>
<p>And with that, it’s 10:00 am, let’s begin our journey!</p>
<h1 id="getting-started">Getting started</h1>
<h2 id="initial-commit">Initial commit</h2>
<div class="gitrepo" data-header="Notakto">
<p>I will be committing as I go, so even though this blog post may be revised for cleaner reading, the repository will always tell the full story. Each section will have a permalink to the commit I was at so that you can see how the project evolves. I won’t be detailing every single change in this blog post, so if you really are following along you may need to check the repository and fill the blanks in yourself.</p>
<p>A link to the repository’s first commit can be found <a href="https://github.com/Ashe/Notakto/tree/0852350c18071b6332899639055d3c38c1976963">here</a>.</p>
</div>
<div class="figure" data-image="https://res.cloudinary.com/aas-sh/image/upload/v1668334893/blog/2022/11/13-11-2022_10_20_31_ywlsij.png" data-caption="The folder structure of the initial commit." data-source="Notakto" data-sourceUrl="https://github.com/Ashe/Notakto/tree/0852350c18071b6332899639055d3c38c1976963">

</div>
<p>Here we go! I’ve just pushed an initial commit with my standard Haskell bits and bobs. I always like making a library and separating executable-only code from the game itself, meaning that if we wanted multiple executables that handle the game setup in different ways (i.e. terminal or GUI) then we can. I’ve also got a testing folder, maybe we’ll write some tests as we go, who knows?</p>
<p>You may also notice that I am using <a href="https://nixos.org/">Nix</a> to build and run this project, so you should just be able to use <code>nix run</code> to run the project at any point in time. If you want to work in this repository, you can use <code>nix develop</code> to get your development environment set up.</p>
<p>At this point in time, running the project should print <code>Hello, Notakto</code>.</p>
<h2 id="introducing-libraries">Introducing libraries</h2>
<p>After setting up the repository, my next step with any project is adding the libraries I know I’ll be using and getting a modified example running to demonstrate that things are working correctly. Lets begin by updating our cabal file to include the <code>h-raylib</code> and <code>apecs</code>.</p>
<pre class="cabal"><code>library
  exposed-modules:  Lib
  hs-source-dirs:   src/lib
  build-depends:
    base,
    apecs,
    h-raylib
  default-language: Haskell2010</code></pre>
<h2 id="single-file-example">Single file example</h2>
<h3 id="imports-options-and-extensions">Imports, options and extensions</h3>
<p>Now we can try and use our dependencies by modifying an example! Thankfully, <code>h-raylib</code> supplies us with a <a href="https://github.com/Anut-py/h-raylib/tree/606936336922dea13517abf4d136f17b162efcc1/examples/first-person-camera">first-person-camera example</a>, and I already have some Apecs examples from the <a href="https://github.com/Ashe/HSRogue/">project</a> featured in my <a href="https://aas.sh/blog/making-a-game-with-haskell-and-apecs/">previous post</a>!</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode hs"><code class="sourceCode haskell"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true" tabindex="-1"></a><span class="ot">{-# OPTIONS -Wall #-}</span></span>
<span id="cb2-2"><a href="#cb2-2" aria-hidden="true" tabindex="-1"></a><span class="ot">{-# LANGUAGE FlexibleInstances #-}</span></span>
<span id="cb2-3"><a href="#cb2-3" aria-hidden="true" tabindex="-1"></a><span class="ot">{-# LANGUAGE MultiParamTypeClasses #-}</span></span>
<span id="cb2-4"><a href="#cb2-4" aria-hidden="true" tabindex="-1"></a><span class="ot">{-# LANGUAGE TemplateHaskell #-}</span></span>
<span id="cb2-5"><a href="#cb2-5" aria-hidden="true" tabindex="-1"></a><span class="ot">{-# LANGUAGE TypeFamilies #-}</span></span>
<span id="cb2-6"><a href="#cb2-6" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb2-7"><a href="#cb2-7" aria-hidden="true" tabindex="-1"></a><span class="kw">module</span> <span class="dt">Lib</span> (main) <span class="kw">where</span></span>
<span id="cb2-8"><a href="#cb2-8" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb2-9"><a href="#cb2-9" aria-hidden="true" tabindex="-1"></a><span class="kw">import</span> <span class="dt">Control.Monad</span> (unless)</span>
<span id="cb2-10"><a href="#cb2-10" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb2-11"><a href="#cb2-11" aria-hidden="true" tabindex="-1"></a><span class="kw">import</span> <span class="dt">Apecs</span></span>
<span id="cb2-12"><a href="#cb2-12" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb2-13"><a href="#cb2-13" aria-hidden="true" tabindex="-1"></a><span class="kw">import</span> <span class="kw">qualified</span> <span class="dt">Raylib</span> <span class="kw">as</span> <span class="dt">RL</span></span>
<span id="cb2-14"><a href="#cb2-14" aria-hidden="true" tabindex="-1"></a><span class="kw">import</span> <span class="kw">qualified</span> <span class="dt">Raylib.Colors</span> <span class="kw">as</span> <span class="dt">RL</span></span>
<span id="cb2-15"><a href="#cb2-15" aria-hidden="true" tabindex="-1"></a><span class="kw">import</span> <span class="kw">qualified</span> <span class="dt">Raylib.Constants</span> <span class="kw">as</span> <span class="dt">RL</span></span>
<span id="cb2-16"><a href="#cb2-16" aria-hidden="true" tabindex="-1"></a><span class="kw">import</span> <span class="kw">qualified</span> <span class="dt">Raylib.Types</span> <span class="kw">as</span> <span class="dt">RL</span></span>
<span id="cb2-17"><a href="#cb2-17" aria-hidden="true" tabindex="-1"></a><span class="kw">import</span> <span class="dt">Raylib.Types</span> (<span class="dt">Vector3</span> (..))</span></code></pre></div>
<p>Here is how our <code>Lib</code> module is setup now. We’re still working in one file to keep it simple, so it’s okay for things to be messy.</p>
<ul>
<li>I use the <code>-Wall</code> language option just to make sure we’re ironing out warnings we go — personal prefence.</li>
<li>The language extensions you see are all used by Apecs (or at least, the example made use of them). I know for a fact that <code>TemplateHaskell</code> is used as an easy way of building a <code>World</code> type for use throughout the application.</li>
<li><code>Lib</code> only needs to export <code>main</code> for now, but if we ever want to export a configuration data type that our client can provide then this is where we’d put it.</li>
<li>I try to structure my includes with my ‘Haskell libraries’ at the top (i.e. things that aren’t specific to my project), followed by blocks of imports for my dependencies:
<ul>
<li>Apecs has quite a nice API; it doesn’t get messy if you just import it in its entirety and it almost feels like it’s part of the language.</li>
<li>Raylib has a <em>lot</em> of things going on (again, refer to the <a href="https://www.raylib.com/cheatsheet/cheatsheet.html">cheatsheet</a>, so I’ve <code>qualified</code> it. Normally I’d explicitly write every function I use, however for this tutorial I’m going to use qualifications so that you can easily tell when something is a Raylib thing and when it’s something else.
<ul>
<li>I made an exception for <code>Raylib.Types</code> — certain types are quite commonly used throughout the project and so rather than typing <code>RL.Vector3</code> constantly I instead explicitly imported it so that we can use it without restraint.</li>
</ul></li>
</ul></li>
</ul>
<h3 id="creating-and-initialising-a-world">Creating and initialising a World</h3>
<p>Next up is creating our <code>World</code>. In Apecs, the <code>World</code> is a type built specifically for your components to live in; that’s why <code>TemplateHaskell</code> is used to automatically write the code that glues your components together. The <code>initWorld</code> function is also a result of this template, which is why you might find it hard to find the <code>World</code> type and <code>initWorld</code> in the <a href="https://hackage.haskell.org/package/apecs"><code>apecs</code> documentation</a>.</p>
<div class="sourceCode" id="cb3"><pre class="sourceCode hs"><code class="sourceCode haskell"><span id="cb3-1"><a href="#cb3-1" aria-hidden="true" tabindex="-1"></a><span class="co">-- Define a component, a Camera</span></span>
<span id="cb3-2"><a href="#cb3-2" aria-hidden="true" tabindex="-1"></a><span class="kw">newtype</span> <span class="dt">Camera</span> <span class="ot">=</span> <span class="dt">Camera</span> <span class="dt">RL.Camera3D</span></span>
<span id="cb3-3"><a href="#cb3-3" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb3-4"><a href="#cb3-4" aria-hidden="true" tabindex="-1"></a><span class="co">-- Create a world featuring the lonely Camera component</span></span>
<span id="cb3-5"><a href="#cb3-5" aria-hidden="true" tabindex="-1"></a>makeWorldAndComponents <span class="st">&quot;World&quot;</span> [&#39;<span class="dt">&#39;Camera</span>]</span>
<span id="cb3-6"><a href="#cb3-6" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb3-7"><a href="#cb3-7" aria-hidden="true" tabindex="-1"></a><span class="co">-- Initialise our world in the main function, and give it to our game&#39;s systems</span></span>
<span id="cb3-8"><a href="#cb3-8" aria-hidden="true" tabindex="-1"></a><span class="ot">main ::</span> <span class="dt">IO</span> ()</span>
<span id="cb3-9"><a href="#cb3-9" aria-hidden="true" tabindex="-1"></a>main <span class="ot">=</span> initWorld <span class="op">&gt;&gt;=</span> runSystem (initialise <span class="op">&gt;&gt;</span> run <span class="op">&gt;&gt;</span> terminate)</span></code></pre></div>
<p>The big important function here is <code>makeWorldAndComponents</code>. In Apecs, there are multiple template-Haskell functions you can use to create your <code>World</code> and associated components:</p>
<ul>
<li><code>makeWorld</code> takes your components and constructs your <code>World</code> and component associations, but it doesn’t assume anything about your component’s storage mechanisms.</li>
<li><code>makeWorldAndComponents</code> calls <code>makeWorld</code>, but then also calls <code>makeMapComponents</code> which takes all of your components and defines <code>Component</code> instances with a <code>Map</code> store. In simple terms, it sets up your components with the most common storage mechanism, <code>Map</code>.</li>
</ul>
<p>In this tutorial, I’ll be using <code>makeWorldAndComponents</code> to keep things simple, but if you ever want components that have specific constraints you might want to consider <code>makeWorld</code> and defining your mechanisms manually like I did <a href="/blog/making-a-game-with-haskell-and-apecs/#creating-components">in my previous post</a>.</p>
<div class="note" data-header="Manual storage definitions" data-caption="For more information, [check out the documentation](https://hackage.haskell.org/package/apecs-0.9.4/docs/Apecs-Stores.html) and maybe even [my previous post](/blog/making-a-game-with-haskell-and-apecs/#creating-components).">
<p>You probably want to use <code>makeWorld</code> if you want to be cool so that you have full control. Here’s how components would look if you want things to be done manually:</p>
<div class="sourceCode" id="cb4"><pre class="sourceCode hs"><code class="sourceCode haskell"><span id="cb4-1"><a href="#cb4-1" aria-hidden="true" tabindex="-1"></a><span class="co">-- &#39;Map&#39; storage: standard storage where any entity can have one</span></span>
<span id="cb4-2"><a href="#cb4-2" aria-hidden="true" tabindex="-1"></a><span class="co">-- e.g. Every entity may have a name</span></span>
<span id="cb4-3"><a href="#cb4-3" aria-hidden="true" tabindex="-1"></a><span class="kw">newtype</span> <span class="dt">Name</span> <span class="ot">=</span> <span class="dt">Name</span> <span class="dt">String</span> <span class="kw">deriving</span> <span class="dt">Show</span></span>
<span id="cb4-4"><a href="#cb4-4" aria-hidden="true" tabindex="-1"></a><span class="kw">instance</span> <span class="dt">Component</span> <span class="dt">Name</span> <span class="kw">where</span> <span class="kw">type</span> <span class="dt">Storage</span> <span class="dt">Name</span> <span class="ot">=</span> <span class="dt">Map</span> <span class="dt">Name</span></span>
<span id="cb4-5"><a href="#cb4-5" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb4-6"><a href="#cb4-6" aria-hidden="true" tabindex="-1"></a><span class="co">-- &#39;Unique&#39; storage: only one entity can have this component at maximum</span></span>
<span id="cb4-7"><a href="#cb4-7" aria-hidden="true" tabindex="-1"></a><span class="co">-- e.g. Only zero or one entities can be marked as a player at any given time</span></span>
<span id="cb4-8"><a href="#cb4-8" aria-hidden="true" tabindex="-1"></a><span class="kw">data</span> <span class="dt">Player</span> <span class="ot">=</span> <span class="dt">Player</span></span>
<span id="cb4-9"><a href="#cb4-9" aria-hidden="true" tabindex="-1"></a><span class="kw">instance</span> <span class="dt">Component</span> <span class="dt">Player</span> <span class="kw">where</span> <span class="kw">type</span> <span class="dt">Storage</span> <span class="dt">Player</span> <span class="ot">=</span> <span class="dt">Unique</span> <span class="dt">Player</span></span>
<span id="cb4-10"><a href="#cb4-10" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb4-11"><a href="#cb4-11" aria-hidden="true" tabindex="-1"></a><span class="co">-- &#39;Global&#39; storage: exactly one component exists for the lifetime of the game</span></span>
<span id="cb4-12"><a href="#cb4-12" aria-hidden="true" tabindex="-1"></a><span class="co">-- e.g. There only needs to be one definition of the game&#39;s configuration</span></span>
<span id="cb4-13"><a href="#cb4-13" aria-hidden="true" tabindex="-1"></a><span class="co">-- Note that querying for this on ANY entity will yield the global one,</span></span>
<span id="cb4-14"><a href="#cb4-14" aria-hidden="true" tabindex="-1"></a><span class="co">-- effectively sharing the component between all entities</span></span>
<span id="cb4-15"><a href="#cb4-15" aria-hidden="true" tabindex="-1"></a><span class="co">-- Also note that globals need instances for Monoid and Semigroup</span></span>
<span id="cb4-16"><a href="#cb4-16" aria-hidden="true" tabindex="-1"></a><span class="kw">data</span> <span class="dt">Config</span> <span class="ot">=</span> <span class="dt">Config</span> <span class="dt">String</span> <span class="dt">Int</span></span>
<span id="cb4-17"><a href="#cb4-17" aria-hidden="true" tabindex="-1"></a><span class="kw">instance</span> <span class="dt">Monoid</span> <span class="dt">Config</span> <span class="kw">where</span> <span class="fu">mempty</span> <span class="ot">=</span> <span class="dt">Config</span> <span class="st">&quot;Foo&quot;</span> <span class="dv">0</span></span>
<span id="cb4-18"><a href="#cb4-18" aria-hidden="true" tabindex="-1"></a><span class="kw">instance</span> <span class="dt">Semigroup</span> <span class="dt">Config</span> <span class="kw">where</span> (<span class="op">&lt;&gt;</span>) <span class="ot">=</span> <span class="fu">mappend</span></span>
<span id="cb4-19"><a href="#cb4-19" aria-hidden="true" tabindex="-1"></a><span class="kw">instance</span> <span class="dt">Component</span> <span class="dt">Config</span> <span class="kw">where</span> <span class="kw">type</span> <span class="dt">Storage</span> <span class="dt">Config</span> <span class="ot">=</span> <span class="dt">Global</span> <span class="dt">Config</span></span></code></pre></div>
<p>So even though I’m going to be lazy on this post so I can say ‘make a new component’, I really do encourage people reading this to <strong>try and use <code>makeWorld</code> instead</strong>.</p>
</div>
<p>So, what are the <code>initialise</code>, <code>run</code> and <code>terminate</code> systems? Well, they are just functions with the type <code>System World ()</code>!</p>
<ul>
<li><code>System</code> is an Apecs type defining a system, one of the parts of the ECS pattern. Note that <code>System w a</code> is mapped to <code>SystemT w IO a</code> under the hood; it’s just a convenience type.</li>
<li><code>World</code> is our world type created by template haskell in the above snippet.</li>
<li><code>()</code> is the absence of type; we aren’t expecting these systems to return anything, so these particular functions are only for executing side effects.</li>
</ul>
<p>Let’s first look at <code>initialise</code>:</p>
<div class="sourceCode" id="cb5"><pre class="sourceCode hs"><code class="sourceCode haskell"><span id="cb5-1"><a href="#cb5-1" aria-hidden="true" tabindex="-1"></a><span class="co">-- Simple system, doesn&#39;t return anything</span></span>
<span id="cb5-2"><a href="#cb5-2" aria-hidden="true" tabindex="-1"></a><span class="ot">initialise ::</span> <span class="dt">System</span> <span class="dt">World</span> ()</span>
<span id="cb5-3"><a href="#cb5-3" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb5-4"><a href="#cb5-4" aria-hidden="true" tabindex="-1"></a><span class="co">-- We&#39;re in the &#39;System&#39; monad, use &#39;do&#39; to compose side effects</span></span>
<span id="cb5-5"><a href="#cb5-5" aria-hidden="true" tabindex="-1"></a>initialise <span class="ot">=</span> <span class="kw">do</span></span>
<span id="cb5-6"><a href="#cb5-6" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb5-7"><a href="#cb5-7" aria-hidden="true" tabindex="-1"></a>  <span class="co">-- Define a Raylib 3D perspective camera and name it &#39;camera&#39;</span></span>
<span id="cb5-8"><a href="#cb5-8" aria-hidden="true" tabindex="-1"></a>  <span class="kw">let</span> camera <span class="ot">=</span> <span class="dt">RL.Camera3D</span> (<span class="dt">Vector3</span> <span class="dv">0</span> <span class="dv">1</span> <span class="dv">0</span>) (<span class="dt">Vector3</span> <span class="dv">2</span> <span class="dv">1</span> <span class="dv">1</span>) (<span class="dt">Vector3</span> <span class="dv">0</span> <span class="dv">1</span> <span class="dv">0</span>) <span class="dv">70</span></span>
<span id="cb5-9"><a href="#cb5-9" aria-hidden="true" tabindex="-1"></a>        RL.cameraProjection&#39;perspective</span>
<span id="cb5-10"><a href="#cb5-10" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb5-11"><a href="#cb5-11" aria-hidden="true" tabindex="-1"></a>  <span class="co">-- Create a global entity with our camera component</span></span>
<span id="cb5-12"><a href="#cb5-12" aria-hidden="true" tabindex="-1"></a>  <span class="co">-- &#39;set&#39; is an apecs function for setting a component&#39;s state on a given entity</span></span>
<span id="cb5-13"><a href="#cb5-13" aria-hidden="true" tabindex="-1"></a>  <span class="co">-- &#39;global&#39; refers to the singular and unique global entity of the game</span></span>
<span id="cb5-14"><a href="#cb5-14" aria-hidden="true" tabindex="-1"></a>  <span class="co">-- &#39;Camera&#39; refers to the constructor for our component which contains a RL.3DCamera</span></span>
<span id="cb5-15"><a href="#cb5-15" aria-hidden="true" tabindex="-1"></a>  set global <span class="op">$</span> <span class="dt">Camera</span> camera</span>
<span id="cb5-16"><a href="#cb5-16" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb5-17"><a href="#cb5-17" aria-hidden="true" tabindex="-1"></a>  <span class="co">-- The &#39;System&#39; monad has IO, remember &#39;System w a = SystemT w IO a&#39;!</span></span>
<span id="cb5-18"><a href="#cb5-18" aria-hidden="true" tabindex="-1"></a>  liftIO <span class="op">$</span> <span class="kw">do</span></span>
<span id="cb5-19"><a href="#cb5-19" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb5-20"><a href="#cb5-20" aria-hidden="true" tabindex="-1"></a>    <span class="co">-- Now we can compose side effects for IO, which is what h-raylib uses</span></span>
<span id="cb5-21"><a href="#cb5-21" aria-hidden="true" tabindex="-1"></a>    RL.initWindow <span class="dv">1920</span> <span class="dv">1080</span> <span class="st">&quot;App&quot;</span></span>
<span id="cb5-22"><a href="#cb5-22" aria-hidden="true" tabindex="-1"></a>    RL.setTargetFPS <span class="dv">60</span></span>
<span id="cb5-23"><a href="#cb5-23" aria-hidden="true" tabindex="-1"></a>    RL.setCameraMode camera RL.cameraMode&#39;firstPerson</span></code></pre></div>
<p>The biggest takeaway from the above snippet is to remember that just because we’re in Apecs-land doesn’t mean that we’re constrained to only using Apecs functions. <code>System</code> is a <code>type</code> constructor for <code>SystemT</code>, which <code>apecs</code> documentation explains:</p>
<blockquote>
<p>A <code>SystemT</code> is a newtype around <code>ReaderT w m a</code>, where <code>w</code> is the game world variable. Systems serve to:</p>
<ul>
<li>Allow type-based lookup of a component’s store through <code>getStore</code>.</li>
<li>Lift side effects into their host Monad.</li>
</ul>
</blockquote>
<p>We can do <code>IO</code> 🎉 Before we continue though, let’s look into <code>terminate</code>, since it’s good practice to always write in programming to always write <code>delete</code> where there’s <code>new</code>, or a <em>destructor</em> whenever you write a <em>constructor</em>. We have made our window, so let’s handle closing it before we forget:</p>
<div class="sourceCode" id="cb6"><pre class="sourceCode hs"><code class="sourceCode haskell"><span id="cb6-1"><a href="#cb6-1" aria-hidden="true" tabindex="-1"></a><span class="co">-- When terminate is called, just close the window</span></span>
<span id="cb6-2"><a href="#cb6-2" aria-hidden="true" tabindex="-1"></a><span class="ot">terminate ::</span> <span class="dt">System</span> <span class="dt">World</span> ()</span>
<span id="cb6-3"><a href="#cb6-3" aria-hidden="true" tabindex="-1"></a>terminate <span class="ot">=</span> liftIO RL.closeWindow</span></code></pre></div>
<p>This is a short and sweet one!</p>
<div class="help" data-header="Why didn&#39;t we just manage the window in main?">
<p>The question on your mind might be <em>“why did we need to do this in a <code>System</code>?”</em> The answer to that lies in the names: <code>initialise</code> and <code>terminate</code>. Yes, the Raylib specific stuff could be done purely in <code>IO</code> without Apecs getting involved, but this is constraining.</p>
<p>What if we want to store the want to load and save data using a file when the application opens and closes? What if we need to correct the state of the game before we enter the game loop, or after it’s concluded? So long as we’re in a <code>System</code>, we have access to all the components in the <code>World</code>; exiting back into <code>IO</code> removes this ability and so I prefer to use <code>liftIO</code> within <code>System</code> to get the best of both worlds.</p>
</div>
<h3 id="updating-and-rendering">Updating and rendering</h3>
<p>We aren’t quite done with our single-file example since we have one remaining undefined function: <code>run</code>. Let’s dive in:</p>
<div class="sourceCode" id="cb7"><pre class="sourceCode hs"><code class="sourceCode haskell"><span id="cb7-1"><a href="#cb7-1" aria-hidden="true" tabindex="-1"></a><span class="ot">run ::</span> <span class="dt">System</span> <span class="dt">World</span> ()</span>
<span id="cb7-2"><a href="#cb7-2" aria-hidden="true" tabindex="-1"></a>run <span class="ot">=</span> <span class="kw">do</span></span>
<span id="cb7-3"><a href="#cb7-3" aria-hidden="true" tabindex="-1"></a>  update</span>
<span id="cb7-4"><a href="#cb7-4" aria-hidden="true" tabindex="-1"></a>  render</span>
<span id="cb7-5"><a href="#cb7-5" aria-hidden="true" tabindex="-1"></a>  shouldClose <span class="ot">&lt;-</span> liftIO RL.windowShouldClose</span>
<span id="cb7-6"><a href="#cb7-6" aria-hidden="true" tabindex="-1"></a>  unless shouldClose run</span></code></pre></div>
<p>Hang on a moment, this is a <strong>game loop</strong>! So in <code>main</code>, we had <code>initialise &gt;&gt; run &gt;&gt; terminate</code>, you can now see that the reason the program doesn’t terminate immediately is because <code>run</code> is hogging the thread and infinitely looping until told otherwise!</p>
<p>So what are <code>update</code> and <code>render</code>? Well, when you are in a monad be it <code>IO</code> or <code>System</code>, you can easily call functions of the same monadic type to compose side effects. You could pretty much substitute <code>update</code> and <code>render</code> for their contents and everything will work the same; this is a way of breaking things up. I like updating the game and then rendering the result. We can split these two steps into as many more steps as we need, but for our single file example they are singular systems that just handle the entire game.</p>
<div class="sourceCode" id="cb8"><pre class="sourceCode hs"><code class="sourceCode haskell"><span id="cb8-1"><a href="#cb8-1" aria-hidden="true" tabindex="-1"></a><span class="co">-- Simple system</span></span>
<span id="cb8-2"><a href="#cb8-2" aria-hidden="true" tabindex="-1"></a><span class="ot">update ::</span> <span class="dt">System</span> <span class="dt">World</span> ()</span>
<span id="cb8-3"><a href="#cb8-3" aria-hidden="true" tabindex="-1"></a>update <span class="ot">=</span> <span class="kw">do</span></span>
<span id="cb8-4"><a href="#cb8-4" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb8-5"><a href="#cb8-5" aria-hidden="true" tabindex="-1"></a>  <span class="co">-- Retrieve the camera component from the global entity (c is a RL.Camera3D)</span></span>
<span id="cb8-6"><a href="#cb8-6" aria-hidden="true" tabindex="-1"></a>  <span class="dt">Camera</span> c <span class="ot">&lt;-</span> get global</span>
<span id="cb8-7"><a href="#cb8-7" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb8-8"><a href="#cb8-8" aria-hidden="true" tabindex="-1"></a>  <span class="co">-- Update the camera and store the updated version in c&#39;</span></span>
<span id="cb8-9"><a href="#cb8-9" aria-hidden="true" tabindex="-1"></a>  <span class="co">-- Also note the use of liftIO to dip into the IO monad to allow the use of raylib</span></span>
<span id="cb8-10"><a href="#cb8-10" aria-hidden="true" tabindex="-1"></a>  c&#39; <span class="ot">&lt;-</span> liftIO <span class="op">$</span> RL.updateCamera c</span>
<span id="cb8-11"><a href="#cb8-11" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb8-12"><a href="#cb8-12" aria-hidden="true" tabindex="-1"></a>  <span class="co">-- Replace the global entity&#39;s Camera with a new one containing the updated camera</span></span>
<span id="cb8-13"><a href="#cb8-13" aria-hidden="true" tabindex="-1"></a>  set global <span class="op">$</span> <span class="dt">Camera</span> c&#39;</span></code></pre></div>
<p>I was a bit alarmed at first at how small this function is — where is the input handling? Where’s the movement speed definitions and all the other things we expect to see in a first-person game? Well it looks like Raylib is has some very plug-and-play style functions, which is nice to see when playing around. I’m sure anyone looking to make an FPS will be able to roll their own movement system, but for us we’ll be removing this pretty quickly since funnily enough Notakto is not a competitor to <a href="https://www.callofduty.com/uk/en/">Call of Duty</a>.</p>
<div class="sourceCode" id="cb9"><pre class="sourceCode hs"><code class="sourceCode haskell"><span id="cb9-1"><a href="#cb9-1" aria-hidden="true" tabindex="-1"></a><span class="ot">render ::</span> <span class="dt">System</span> <span class="dt">World</span> ()</span>
<span id="cb9-2"><a href="#cb9-2" aria-hidden="true" tabindex="-1"></a>render <span class="ot">=</span> <span class="kw">do</span></span>
<span id="cb9-3"><a href="#cb9-3" aria-hidden="true" tabindex="-1"></a>  <span class="dt">Camera</span> camera <span class="ot">&lt;-</span> get global</span>
<span id="cb9-4"><a href="#cb9-4" aria-hidden="true" tabindex="-1"></a>  liftIO <span class="op">$</span> <span class="kw">do</span></span>
<span id="cb9-5"><a href="#cb9-5" aria-hidden="true" tabindex="-1"></a>    RL.beginDrawing</span>
<span id="cb9-6"><a href="#cb9-6" aria-hidden="true" tabindex="-1"></a>    RL.clearBackground RL.black</span>
<span id="cb9-7"><a href="#cb9-7" aria-hidden="true" tabindex="-1"></a>    RL.drawFPS <span class="dv">10</span> <span class="dv">20</span></span>
<span id="cb9-8"><a href="#cb9-8" aria-hidden="true" tabindex="-1"></a>    RL.beginMode3D camera</span>
<span id="cb9-9"><a href="#cb9-9" aria-hidden="true" tabindex="-1"></a>    RL.drawGrid <span class="dv">10</span> <span class="dv">1</span></span>
<span id="cb9-10"><a href="#cb9-10" aria-hidden="true" tabindex="-1"></a>    RL.drawCircle3D (<span class="dt">Vector3</span> <span class="dv">2</span> <span class="dv">1</span> <span class="dv">1</span>) <span class="dv">2</span> (<span class="dt">Vector3</span> <span class="dv">0</span> <span class="dv">1</span> <span class="dv">0</span>) <span class="dv">0</span> RL.white</span>
<span id="cb9-11"><a href="#cb9-11" aria-hidden="true" tabindex="-1"></a>    RL.drawLine3D (<span class="dt">Vector3</span> <span class="dv">3</span> <span class="dv">0</span> <span class="dv">1</span>) (<span class="dt">Vector3</span> <span class="dv">1</span> <span class="dv">2</span> <span class="dv">1</span>) RL.white</span>
<span id="cb9-12"><a href="#cb9-12" aria-hidden="true" tabindex="-1"></a>    RL.drawLine3D (<span class="dt">Vector3</span> <span class="dv">3</span> <span class="dv">2</span> <span class="dv">1</span>) (<span class="dt">Vector3</span> <span class="dv">1</span> <span class="dv">0</span> <span class="dv">1</span>) RL.white</span>
<span id="cb9-13"><a href="#cb9-13" aria-hidden="true" tabindex="-1"></a>    RL.drawCubeWiresV (<span class="dt">Vector3</span> (<span class="op">-</span><span class="dv">2</span>) <span class="dv">1</span> <span class="dv">0</span>) (<span class="dt">Vector3</span> <span class="dv">1</span> <span class="dv">2</span> <span class="dv">1</span>) RL.white</span>
<span id="cb9-14"><a href="#cb9-14" aria-hidden="true" tabindex="-1"></a>    RL.endMode3D</span>
<span id="cb9-15"><a href="#cb9-15" aria-hidden="true" tabindex="-1"></a>    RL.endDrawing</span></code></pre></div>
<p>The <code>render</code> system is very straightforward. We grab our camera out of our Apecs <code>World</code> and then use it in the <code>IO</code> monad to help Raylib render the world. I won’t go into much detail here.</p>
<p>After what feels like an eternity (it has taken me 2 hours to write this!), here’s our single file example up and running! Time for a toilet break and a glass of water!</p>
<div class="figure" data-image="https://res.cloudinary.com/aas-sh/image/upload/v1668335749/blog/2022/11/13-11-2022_10_35_33_e1xmdy.png" data-caption="Screenshot of the single file example running." data-source="Notakto" data-sourceUrl="https://github.com/Ashe/Notakto/tree/dd26d756904358cc907a8db11ae66392f45bfa96">

</div>
<div class="gitrepo" data-header="Notakto">
<p>A link to the corresponding commit for the previous section can be found <a href="https://github.com/Ashe/Notakto/tree/0852350c18071b6332899639055d3c38c1976963">here</a>.</p>
</div>
<h1 id="visualising-the-state-of-the-game">Visualising the state of the game</h1>
<h2 id="what-should-be-an-entity">What should be an entity?</h2>
<p>I believe that the next step of this project is to visualise the boards and the marks placed upon them. In terms of priority, I want to get the visuals set up first otherwise testing the game is going to be a pain, but in order to get that done we need to create a basic representation of state!</p>
<p>So, representations of state — <code>data</code> types! Let’s make some new types to represent things we’ll need in our game! But wait.. Do you hear alarm bells?</p>
<div class="danger" data-header="Don&#39;t rush!">
<p>While it’s all fun and games to get experimental and start playing around with Haskell’s wonderful type system, sometimes we can get bogged down in actually using these types and trying to make them work.</p>
<p>Let’s take a moment to appreciate the blank slate we have right now and come up with at least a hypothesis for how things should be laid out.</p>
</div>
<p>After heeding that warning, let’s create an action plan. What should consist of an entity in our game? More specifically, should the boards themselves be entities? Should the marks that players place be entities? One could argue that both the board itself and the crosses placed could be entities. I disagree; I believe that the crosses don’t really make sense without the context of a board, and so there’d be little use in having an entity representing each cross in isolation (it might even make things more confusing trying to figure out which board each cross is on).</p>
<div class="caption" data-caption="A table describing my plan for entities in Notakto." data-source="Notakto" data-sourceUrl="https://github.com/Ashe/Notakto/tree/e71210405272674b49929c70cca0e2006df3888e">
<table>
<colgroup>
<col style="width: 14%" />
<col style="width: 14%" />
<col style="width: 71%" />
</colgroup>
<thead>
<tr class="header">
<th style="text-align: center;">Thing</th>
<th style="text-align: center;">Is Entity?</th>
<th style="text-align: center;">Reasoning</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: center;">Player</td>
<td style="text-align: center;">Maybe</td>
<td style="text-align: center;">The player won’t have much data of their own; they can be represented elsewhere. If it turns out we want things like customisable player names and colours then they could become entities.</td>
</tr>
<tr class="even">
<td style="text-align: center;">‘Game’</td>
<td style="text-align: center;">Global</td>
<td style="text-align: center;">The global entity can contain a component with the information for who’s turn it is (either player one or player two).</td>
</tr>
<tr class="odd">
<td style="text-align: center;">Cross</td>
<td style="text-align: center;">No</td>
<td style="text-align: center;">Crosses don’t have much of their own data other than their location, which is dependent on the board. Standard Haskell data types will suffice. If they were their own entity, we could potentially have more than nine crosses assigned to a signle board.</td>
</tr>
<tr class="even">
<td style="text-align: center;">Board</td>
<td style="text-align: center;">Yes</td>
<td style="text-align: center;">Boards contain the state of crosses placed on them, as well as whether they are ‘dead’ or not. Their state will need to be rendered.</td>
</tr>
</tbody>
</table>
</div>
<p>I believe that’s all we need to think about to get started; let’s do some programming.</p>
<h2 id="the-types-module">The Types module</h2>
<p>A single-file example is nice, but is only going to impede us going forward; let’s make a new module containing all of our components and miscellaneous types: <code>Types.hs</code>!</p>
<div class="sourceCode" id="cb10"><pre class="sourceCode hs"><code class="sourceCode haskell"><span id="cb10-1"><a href="#cb10-1" aria-hidden="true" tabindex="-1"></a><span class="ot">{-# OPTIONS -Wall #-}</span></span>
<span id="cb10-2"><a href="#cb10-2" aria-hidden="true" tabindex="-1"></a><span class="ot">{-# LANGUAGE FlexibleInstances #-}</span></span>
<span id="cb10-3"><a href="#cb10-3" aria-hidden="true" tabindex="-1"></a><span class="ot">{-# LANGUAGE MultiParamTypeClasses #-}</span></span>
<span id="cb10-4"><a href="#cb10-4" aria-hidden="true" tabindex="-1"></a><span class="ot">{-# LANGUAGE TemplateHaskell #-}</span></span>
<span id="cb10-5"><a href="#cb10-5" aria-hidden="true" tabindex="-1"></a><span class="ot">{-# LANGUAGE TypeFamilies #-}</span></span>
<span id="cb10-6"><a href="#cb10-6" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb10-7"><a href="#cb10-7" aria-hidden="true" tabindex="-1"></a><span class="kw">module</span> <span class="dt">Types</span> (</span>
<span id="cb10-8"><a href="#cb10-8" aria-hidden="true" tabindex="-1"></a>  <span class="dt">World</span>,</span>
<span id="cb10-9"><a href="#cb10-9" aria-hidden="true" tabindex="-1"></a>  initWorld,</span>
<span id="cb10-10"><a href="#cb10-10" aria-hidden="true" tabindex="-1"></a>  <span class="dt">Camera</span> (<span class="op">..</span>),</span>
<span id="cb10-11"><a href="#cb10-11" aria-hidden="true" tabindex="-1"></a>) <span class="kw">where</span></span>
<span id="cb10-12"><a href="#cb10-12" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb10-13"><a href="#cb10-13" aria-hidden="true" tabindex="-1"></a><span class="kw">import</span> <span class="dt">Apecs</span></span>
<span id="cb10-14"><a href="#cb10-14" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb10-15"><a href="#cb10-15" aria-hidden="true" tabindex="-1"></a><span class="kw">import</span> <span class="kw">qualified</span> <span class="dt">Raylib.Types</span> <span class="kw">as</span> <span class="dt">RL</span></span>
<span id="cb10-16"><a href="#cb10-16" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb10-17"><a href="#cb10-17" aria-hidden="true" tabindex="-1"></a><span class="kw">newtype</span> <span class="dt">Camera</span> <span class="ot">=</span> <span class="dt">Camera</span> <span class="dt">RL.Camera3D</span></span>
<span id="cb10-18"><a href="#cb10-18" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb10-19"><a href="#cb10-19" aria-hidden="true" tabindex="-1"></a>makeWorldAndComponents <span class="st">&quot;World&quot;</span> [&#39;<span class="dt">&#39;Camera</span>]</span></code></pre></div>
<p>So I’ve moved all language extensions into this new file, since they’re only relevant for the <code>World</code> initialisation code. We now have a cleaner space to declare new data types, and since components <em>should</em> be simple, we should be fine to place them all in here for the duration of this project.</p>
<h2 id="the-boardcomponent">The BoardComponent</h2>
<p>In the previous section, we asked the question “what should be an entity?” Now that we know of some certain entities, we now need to think about what components we might like to attach. The one I’m most interested in right now is a representation of a board, the standard tic-tac-toe battle ground.</p>
<div class="sourceCode" id="cb11"><pre class="sourceCode hs"><code class="sourceCode haskell"><span id="cb11-1"><a href="#cb11-1" aria-hidden="true" tabindex="-1"></a><span class="co">-----------</span></span>
<span id="cb11-2"><a href="#cb11-2" aria-hidden="true" tabindex="-1"></a><span class="co">-- Types --</span></span>
<span id="cb11-3"><a href="#cb11-3" aria-hidden="true" tabindex="-1"></a><span class="co">-----------</span></span>
<span id="cb11-4"><a href="#cb11-4" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb11-5"><a href="#cb11-5" aria-hidden="true" tabindex="-1"></a><span class="kw">data</span> <span class="dt">Cell</span> <span class="ot">=</span> <span class="dt">Empty</span> <span class="op">|</span> <span class="dt">Filled</span> <span class="kw">deriving</span> (<span class="dt">Show</span>, <span class="dt">Eq</span>)</span>
<span id="cb11-6"><a href="#cb11-6" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb11-7"><a href="#cb11-7" aria-hidden="true" tabindex="-1"></a><span class="co">----------------</span></span>
<span id="cb11-8"><a href="#cb11-8" aria-hidden="true" tabindex="-1"></a><span class="co">-- Components --</span></span>
<span id="cb11-9"><a href="#cb11-9" aria-hidden="true" tabindex="-1"></a><span class="co">----------------</span></span>
<span id="cb11-10"><a href="#cb11-10" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb11-11"><a href="#cb11-11" aria-hidden="true" tabindex="-1"></a><span class="kw">newtype</span> <span class="dt">CameraComponent</span> <span class="ot">=</span> <span class="dt">Camera</span> <span class="dt">RL.Camera3D</span></span>
<span id="cb11-12"><a href="#cb11-12" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb11-13"><a href="#cb11-13" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb11-14"><a href="#cb11-14" aria-hidden="true" tabindex="-1"></a><span class="kw">data</span> <span class="dt">BoardComponent</span> <span class="ot">=</span> <span class="dt">Board</span> {</span>
<span id="cb11-15"><a href="#cb11-15" aria-hidden="true" tabindex="-1"></a><span class="ot">  _tl ::</span> <span class="dt">Cell</span>,<span class="ot"> _tc ::</span> <span class="dt">Cell</span>,<span class="ot"> _tr ::</span> <span class="dt">Cell</span>,</span>
<span id="cb11-16"><a href="#cb11-16" aria-hidden="true" tabindex="-1"></a><span class="ot">  _ml ::</span> <span class="dt">Cell</span>,<span class="ot"> _mc ::</span> <span class="dt">Cell</span>,<span class="ot"> _mr ::</span> <span class="dt">Cell</span>,</span>
<span id="cb11-17"><a href="#cb11-17" aria-hidden="true" tabindex="-1"></a><span class="ot">  _bl ::</span> <span class="dt">Cell</span>,<span class="ot"> _bc ::</span> <span class="dt">Cell</span>,<span class="ot"> _br ::</span> <span class="dt">Cell</span></span>
<span id="cb11-18"><a href="#cb11-18" aria-hidden="true" tabindex="-1"></a>} <span class="kw">deriving</span> (<span class="dt">Show</span>, <span class="dt">Eq</span>)</span>
<span id="cb11-19"><a href="#cb11-19" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb11-20"><a href="#cb11-20" aria-hidden="true" tabindex="-1"></a>makeWorldAndComponents <span class="st">&quot;World&quot;</span> [&#39;<span class="dt">&#39;CameraComponent</span>, &#39;<span class="dt">&#39;BoardComponent</span>]</span></code></pre></div>
<p>This will do for now I think, no need to get too fancy. One thing I’d like to draw your attention to is the separation of standard types and types that are used as components — components are the things you’ll be operating on when using Apecs, so try to organise your code in a way which makes sense to you. I’ve appended <code>Component</code> to my component types, but I’ve omitted it from my data constructors so I don’t have to type it out as much.</p>
<p>Now go back to <code>Lib.hs</code> and fix any errors we have and ensure things still run. Let’s also create an entity with <code>BoardComponent</code>s to represent a singular board while we’re at it!</p>
<div class="sourceCode" id="cb12"><pre class="sourceCode hs"><code class="sourceCode haskell"><span id="cb12-1"><a href="#cb12-1" aria-hidden="true" tabindex="-1"></a><span class="ot">initialise ::</span> <span class="dt">System</span> <span class="dt">World</span> ()</span>
<span id="cb12-2"><a href="#cb12-2" aria-hidden="true" tabindex="-1"></a>initialise <span class="ot">=</span> <span class="kw">do</span></span>
<span id="cb12-3"><a href="#cb12-3" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb12-4"><a href="#cb12-4" aria-hidden="true" tabindex="-1"></a>      <span class="co">-- Update location of camera so we can look at origin</span></span>
<span id="cb12-5"><a href="#cb12-5" aria-hidden="true" tabindex="-1"></a>  <span class="kw">let</span> camera <span class="ot">=</span> <span class="dt">RL.Camera3D</span> (<span class="dt">Vector3</span> <span class="dv">0</span> <span class="dv">1</span> <span class="dv">6</span>) (<span class="dt">Vector3</span> <span class="dv">0</span> <span class="dv">1</span> <span class="dv">0</span>) (<span class="dt">Vector3</span> <span class="dv">0</span> <span class="dv">1</span> <span class="dv">0</span>) <span class="dv">90</span></span>
<span id="cb12-6"><a href="#cb12-6" aria-hidden="true" tabindex="-1"></a>        RL.cameraProjection&#39;perspective</span>
<span id="cb12-7"><a href="#cb12-7" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb12-8"><a href="#cb12-8" aria-hidden="true" tabindex="-1"></a>      <span class="co">-- Define what a blank board looks like</span></span>
<span id="cb12-9"><a href="#cb12-9" aria-hidden="true" tabindex="-1"></a>      newBoard <span class="ot">=</span> <span class="dt">Board</span> <span class="dt">Empty</span> <span class="dt">Empty</span> <span class="dt">Empty</span> <span class="dt">Empty</span> <span class="dt">Empty</span> <span class="dt">Empty</span> <span class="dt">Empty</span> <span class="dt">Empty</span> <span class="dt">Empty</span></span>
<span id="cb12-10"><a href="#cb12-10" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb12-11"><a href="#cb12-11" aria-hidden="true" tabindex="-1"></a>  set global <span class="op">$</span> <span class="dt">Camera</span> camera</span>
<span id="cb12-12"><a href="#cb12-12" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb12-13"><a href="#cb12-13" aria-hidden="true" tabindex="-1"></a>  <span class="co">-- Create a new entity with a blank board</span></span>
<span id="cb12-14"><a href="#cb12-14" aria-hidden="true" tabindex="-1"></a>  <span class="co">-- Note: if you want the return value, omit &#39;_&#39;</span></span>
<span id="cb12-15"><a href="#cb12-15" aria-hidden="true" tabindex="-1"></a>  newEntity_ newBoard</span>
<span id="cb12-16"><a href="#cb12-16" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb12-17"><a href="#cb12-17" aria-hidden="true" tabindex="-1"></a>  liftIO <span class="op">$</span> <span class="kw">do</span></span>
<span id="cb12-18"><a href="#cb12-18" aria-hidden="true" tabindex="-1"></a>    RL.initWindow <span class="dv">1920</span> <span class="dv">1080</span> <span class="st">&quot;App&quot;</span></span>
<span id="cb12-19"><a href="#cb12-19" aria-hidden="true" tabindex="-1"></a>    RL.setTargetFPS <span class="dv">60</span></span>
<span id="cb12-20"><a href="#cb12-20" aria-hidden="true" tabindex="-1"></a>    RL.setCameraMode camera RL.cameraMode&#39;firstPerson</span></code></pre></div>
<h2 id="rendering">Rendering</h2>
<p>Now that we have some data floating around cyberspace it’s time to prove that we do indeed have some state by trying to visualise it. Now for the sake of fun, I’m going to <strong>continue to use the first-person camera</strong>. If this was any other project I’d throw it out the window, but it gives us an event handling system built as well as a great opportunity to experience Notakto in 3D! Throwing it away right now would just create a detour since we can use it in the short term to explore our world.</p>
<div class="help" data-header="What if I want to do 2D?">
<p>If you’re planning to use this project as a springboard for a 2D project, you might be thinking of splintering off here and doing some exploration with Raylib’s 2D camera. I have to say that it doesn’t look too scary, so maybe this would be a good point for you to take a break and play around with it. We will be using cubes and 3D shapes to represent our boards in 3D space, so you’ll have to translate things as you go. If you want to continue using 3D, I’m sure it wouldn’t take long to switch it out for 2D later down the line.</p>
<p>If you choose to split off now, good luck!</p>
</div>
<p>Once again, I’m going to make a new module: <code>Rendering.hs</code>. This module is going to import <code>Types</code> and be imported by our main <code>Lib</code> module. This module will house all the dirty Raylib rendering things so that our main file can be more gameplay-focused. I’ve also moved the <code>render</code> function into this module so that we only have to export a single function for the entire module.</p>
<div class="sourceCode" id="cb13"><pre class="sourceCode hs"><code class="sourceCode haskell"><span id="cb13-1"><a href="#cb13-1" aria-hidden="true" tabindex="-1"></a><span class="kw">module</span> <span class="dt">Rendering</span> (</span>
<span id="cb13-2"><a href="#cb13-2" aria-hidden="true" tabindex="-1"></a>  render</span>
<span id="cb13-3"><a href="#cb13-3" aria-hidden="true" tabindex="-1"></a>) <span class="kw">where</span></span>
<span id="cb13-4"><a href="#cb13-4" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb13-5"><a href="#cb13-5" aria-hidden="true" tabindex="-1"></a><span class="kw">import</span> <span class="dt">Apecs</span></span>
<span id="cb13-6"><a href="#cb13-6" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb13-7"><a href="#cb13-7" aria-hidden="true" tabindex="-1"></a><span class="kw">import</span> <span class="kw">qualified</span> <span class="dt">Raylib</span> <span class="kw">as</span> <span class="dt">RL</span></span>
<span id="cb13-8"><a href="#cb13-8" aria-hidden="true" tabindex="-1"></a><span class="kw">import</span> <span class="kw">qualified</span> <span class="dt">Raylib.Colors</span> <span class="kw">as</span> <span class="dt">RL</span></span>
<span id="cb13-9"><a href="#cb13-9" aria-hidden="true" tabindex="-1"></a><span class="kw">import</span> <span class="kw">qualified</span> <span class="dt">Raylib.Constants</span> <span class="kw">as</span> <span class="dt">RL</span></span>
<span id="cb13-10"><a href="#cb13-10" aria-hidden="true" tabindex="-1"></a><span class="kw">import</span> <span class="kw">qualified</span> <span class="dt">Raylib.Types</span> <span class="kw">as</span> <span class="dt">RL</span></span>
<span id="cb13-11"><a href="#cb13-11" aria-hidden="true" tabindex="-1"></a><span class="kw">import</span> <span class="dt">Raylib.Types</span> (<span class="dt">Vector3</span> (..))</span>
<span id="cb13-12"><a href="#cb13-12" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb13-13"><a href="#cb13-13" aria-hidden="true" tabindex="-1"></a><span class="kw">import</span> <span class="dt">Types</span></span>
<span id="cb13-14"><a href="#cb13-14" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb13-15"><a href="#cb13-15" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb13-16"><a href="#cb13-16" aria-hidden="true" tabindex="-1"></a><span class="ot">render ::</span> <span class="dt">System</span> <span class="dt">World</span> ()</span>
<span id="cb13-17"><a href="#cb13-17" aria-hidden="true" tabindex="-1"></a>render <span class="ot">=</span> <span class="kw">do</span></span>
<span id="cb13-18"><a href="#cb13-18" aria-hidden="true" tabindex="-1"></a>  <span class="dt">Camera</span> camera <span class="ot">&lt;-</span> get global</span>
<span id="cb13-19"><a href="#cb13-19" aria-hidden="true" tabindex="-1"></a>  liftIO <span class="op">$</span> <span class="kw">do</span></span>
<span id="cb13-20"><a href="#cb13-20" aria-hidden="true" tabindex="-1"></a>    RL.beginDrawing</span>
<span id="cb13-21"><a href="#cb13-21" aria-hidden="true" tabindex="-1"></a>    RL.clearBackground RL.black</span>
<span id="cb13-22"><a href="#cb13-22" aria-hidden="true" tabindex="-1"></a>    RL.drawFPS <span class="dv">10</span> <span class="dv">20</span></span>
<span id="cb13-23"><a href="#cb13-23" aria-hidden="true" tabindex="-1"></a>    RL.beginMode3D camera</span>
<span id="cb13-24"><a href="#cb13-24" aria-hidden="true" tabindex="-1"></a>    RL.drawGrid <span class="dv">10</span> <span class="dv">1</span></span>
<span id="cb13-25"><a href="#cb13-25" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb13-26"><a href="#cb13-26" aria-hidden="true" tabindex="-1"></a>  <span class="co">-- Our systems are sandwiched between the &#39;begin&#39; and &#39;end&#39; functions</span></span>
<span id="cb13-27"><a href="#cb13-27" aria-hidden="true" tabindex="-1"></a>  renderBoards</span>
<span id="cb13-28"><a href="#cb13-28" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb13-29"><a href="#cb13-29" aria-hidden="true" tabindex="-1"></a>  liftIO <span class="op">$</span> <span class="kw">do</span></span>
<span id="cb13-30"><a href="#cb13-30" aria-hidden="true" tabindex="-1"></a>    RL.endMode3D</span>
<span id="cb13-31"><a href="#cb13-31" aria-hidden="true" tabindex="-1"></a>    RL.endDrawing</span>
<span id="cb13-32"><a href="#cb13-32" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb13-33"><a href="#cb13-33" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb13-34"><a href="#cb13-34" aria-hidden="true" tabindex="-1"></a><span class="ot">renderBoards ::</span> <span class="dt">System</span> <span class="dt">World</span> ()</span>
<span id="cb13-35"><a href="#cb13-35" aria-hidden="true" tabindex="-1"></a>renderBoards <span class="ot">=</span> <span class="fu">undefined</span></span></code></pre></div>
<p>Time to get creative! We need to draw some array of cubes and shapes to visualise the board! Our use of <code>RL.drawGrid</code> means we can visualise the units of the world — the grid is spaced such that each cell is 1 unit by 1 unit. Now we just need to draw 4 cuboids to mock out a hash symbol.</p>
<div class="sourceCode" id="cb14"><pre class="sourceCode hs"><code class="sourceCode haskell"><span id="cb14-1"><a href="#cb14-1" aria-hidden="true" tabindex="-1"></a><span class="co">-- Those experienced with monads can probably guess what cmapM_ does</span></span>
<span id="cb14-2"><a href="#cb14-2" aria-hidden="true" tabindex="-1"></a><span class="ot">renderBoards ::</span> <span class="dt">System</span> <span class="dt">World</span> ()</span>
<span id="cb14-3"><a href="#cb14-3" aria-hidden="true" tabindex="-1"></a>renderBoards <span class="ot">=</span> cmapM_ renderBoard</span>
<span id="cb14-4"><a href="#cb14-4" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb14-5"><a href="#cb14-5" aria-hidden="true" tabindex="-1"></a><span class="co">-- The signature of this function also qualifies as a condition, only the</span></span>
<span id="cb14-6"><a href="#cb14-6" aria-hidden="true" tabindex="-1"></a><span class="co">-- entities that satisfy said condition will have this function mapped onto them</span></span>
<span id="cb14-7"><a href="#cb14-7" aria-hidden="true" tabindex="-1"></a><span class="co">-- In short, only entities with a BoardComponent get rendered via this function</span></span>
<span id="cb14-8"><a href="#cb14-8" aria-hidden="true" tabindex="-1"></a><span class="ot">renderBoard ::</span> <span class="dt">BoardComponent</span> <span class="ot">-&gt;</span> <span class="dt">System</span> <span class="dt">World</span> ()</span>
<span id="cb14-9"><a href="#cb14-9" aria-hidden="true" tabindex="-1"></a>renderBoard b <span class="ot">=</span> liftIO <span class="op">$</span> <span class="kw">do</span></span>
<span id="cb14-10"><a href="#cb14-10" aria-hidden="true" tabindex="-1"></a>  RL.drawCube (<span class="dt">Vector3</span> <span class="fl">0.5</span>    <span class="fl">1.5</span> <span class="dv">0</span>) t <span class="dv">3</span> t RL.white</span>
<span id="cb14-11"><a href="#cb14-11" aria-hidden="true" tabindex="-1"></a>  RL.drawCube (<span class="dt">Vector3</span> (<span class="op">-</span><span class="fl">0.5</span>) <span class="fl">1.5</span> <span class="dv">0</span>) t <span class="dv">3</span> t RL.white</span>
<span id="cb14-12"><a href="#cb14-12" aria-hidden="true" tabindex="-1"></a>  RL.drawCube (<span class="dt">Vector3</span> <span class="dv">0</span> <span class="dv">1</span> <span class="dv">0</span>) <span class="dv">3</span> t t RL.white</span>
<span id="cb14-13"><a href="#cb14-13" aria-hidden="true" tabindex="-1"></a>  RL.drawCube (<span class="dt">Vector3</span> <span class="dv">0</span> <span class="dv">2</span> <span class="dv">0</span>) <span class="dv">3</span> t t RL.white</span>
<span id="cb14-14"><a href="#cb14-14" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb14-15"><a href="#cb14-15" aria-hidden="true" tabindex="-1"></a>  <span class="co">-- &#39;t&#39; is the thickness here</span></span>
<span id="cb14-16"><a href="#cb14-16" aria-hidden="true" tabindex="-1"></a>  <span class="kw">where</span> t <span class="ot">=</span> <span class="fl">0.05</span></span></code></pre></div>
<p>The key takeaway here is <code>cmapM_</code>. Let’s quickly recap the other variants so that we can deduce what this does (I’m going to shorten the type signatures a bit here):</p>
<blockquote>
<div class="sourceCode" id="cb15"><pre class="sourceCode hs"><code class="sourceCode haskell"><span id="cb15-1"><a href="#cb15-1" aria-hidden="true" tabindex="-1"></a><span class="ot">cmap ::</span> (cx <span class="ot">-&gt;</span> cy) <span class="ot">-&gt;</span> <span class="dt">System</span> w ()</span></code></pre></div>
</blockquote>
<p>This function maps a standard, non-monadic function onto all entities with <code>cx</code>. What is <code>cx</code> you might ask? Well I shortened the type signature for the blog (sorry) but it’s a polymorphic parameter representing a bundle of components. Apecs leverages Haskell’s type system to intelligently select all entities that meet the criteria for <code>cx</code>. A singular type is one of the simplest forms of using this function; notice how our <code>renderBoard</code> function <em>requires</em> a parameter of <code>BoardComponent</code>. We can actually specify more than just a single component, and Apecs will use that group as <code>cx</code>. Similarly, <code>cy</code> is a group of components to be output.</p>
<blockquote>
<div class="sourceCode" id="cb16"><pre class="sourceCode hs"><code class="sourceCode haskell"><span id="cb16-1"><a href="#cb16-1" aria-hidden="true" tabindex="-1"></a><span class="ot">cmapM ::</span> (cx <span class="ot">-&gt;</span> <span class="dt">System</span> w cy) <span class="ot">-&gt;</span> <span class="dt">System</span> w ()</span></code></pre></div>
</blockquote>
<p>This function is very similar to <code>cmap</code> with one exception — the function mapped onto entities returns a composable side-effect of the <code>System</code> monad, which also means <em>access to <code>IO</code></em> as well as other Apecs functions. You will typically use <code>pure &lt;your components&gt;</code> to return things. Appending <code>M</code> to a function to denote the presence of a monad is very common in Haskell.</p>
<blockquote>
<div class="sourceCode" id="cb17"><pre class="sourceCode hs"><code class="sourceCode haskell"><span id="cb17-1"><a href="#cb17-1" aria-hidden="true" tabindex="-1"></a><span class="ot">cmapM_ ::</span> (cx <span class="ot">-&gt;</span> <span class="dt">System</span> w ()) <span class="ot">-&gt;</span> <span class="dt">System</span> w ()</span></code></pre></div>
</blockquote>
<p>Once again, very similar, except this time to <code>cmapM</code>. We still have access to monads, except the function we map onto entities no longer produces a <code>cy</code>. This means that the function you’re mapping onto your entities is there to only produce side-effects. In the case of <code>renderBoards</code>, we want to map a monad function to our entities, but we don’t need to return anything, so <code>cmapM_</code> is used.</p>
<p>After all of that, we have our first board rendered!</p>
<div class="figure" data-image="https://res.cloudinary.com/aas-sh/image/upload/v1668352718/blog/2022/11/13-11-2022_15_18_24_lfwnkh.png" data-caption="Screenshot of our first board being rendered in 3D space." data-source="Notakto" data-sourceUrl="https://github.com/Ashe/Notakto/tree/e71210405272674b49929c70cca0e2006df3888e">

</div>
<p>What does this tell us? Well, if we had no entities in the game that contained a <code>BoardComponent</code>, this arrangement of sticks wouldn’t appear in the world at all! We have correctly defined, initialised, stored, read and visualised state, even on a very basic level!</p>
<p>There are some things however that this doesn’t tell us:</p>
<ul>
<li>It won’t tell us <strong>how many</strong> boards there are, they all render on top of each other.</li>
<li>It won’t show us <strong>the state of the board</strong>, since we aren’t rendering crosses yet.</li>
<li>It won’t help us realise <strong>why we should love the game of Notakto</strong>.</li>
</ul>
<h2 id="multiple-boards">Multiple boards</h2>
<p>Let’s address this issue of not being able to see multiple boards. There’s two ways I can think of for going about this:</p>
<ul>
<li>We could create a new component representing the origin of the board in 3D space.</li>
<li>We could count the number of boards and distribute them evenly along the x-axis.</li>
</ul>
<p>Honestly, we’ll probably end up doing option one eventually, but because I like the idea of boards being automatically arranged I’m going to go with option 2 for now. I think the end game is a mixture of both approaches, where we automatically generate positions for each board, for instance in a circle or something.</p>
<div class="sourceCode" id="cb18"><pre class="sourceCode hs"><code class="sourceCode haskell"><span id="cb18-1"><a href="#cb18-1" aria-hidden="true" tabindex="-1"></a><span class="ot">renderBoards ::</span> <span class="dt">System</span> <span class="dt">World</span> ()</span>
<span id="cb18-2"><a href="#cb18-2" aria-hidden="true" tabindex="-1"></a>renderBoards <span class="ot">=</span> <span class="kw">do</span></span>
<span id="cb18-3"><a href="#cb18-3" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb18-4"><a href="#cb18-4" aria-hidden="true" tabindex="-1"></a>  <span class="co">-- Now we count how many entities have a BoardComponent using cfold</span></span>
<span id="cb18-5"><a href="#cb18-5" aria-hidden="true" tabindex="-1"></a>  numBoards <span class="ot">&lt;-</span> cfold (\c (<span class="dt">Board</span>{}) <span class="ot">-&gt;</span> c <span class="op">+</span> <span class="dv">1</span>) <span class="dv">0</span></span>
<span id="cb18-6"><a href="#cb18-6" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb18-7"><a href="#cb18-7" aria-hidden="true" tabindex="-1"></a>  <span class="co">-- We provide the count to renderBoard</span></span>
<span id="cb18-8"><a href="#cb18-8" aria-hidden="true" tabindex="-1"></a>  <span class="co">-- Also, we want to FOLD now, since we&#39;re iterating through boards</span></span>
<span id="cb18-9"><a href="#cb18-9" aria-hidden="true" tabindex="-1"></a>  cfoldM_ (renderBoard numBoards) <span class="dv">0</span></span>
<span id="cb18-10"><a href="#cb18-10" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb18-11"><a href="#cb18-11" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb18-12"><a href="#cb18-12" aria-hidden="true" tabindex="-1"></a><span class="co">-- We now know the total number of boards as well as the current board</span></span>
<span id="cb18-13"><a href="#cb18-13" aria-hidden="true" tabindex="-1"></a><span class="ot">renderBoard ::</span> <span class="dt">Int</span> <span class="ot">-&gt;</span> <span class="dt">Int</span> <span class="ot">-&gt;</span> <span class="dt">BoardComponent</span> <span class="ot">-&gt;</span> <span class="dt">System</span> <span class="dt">World</span> <span class="dt">Int</span></span>
<span id="cb18-14"><a href="#cb18-14" aria-hidden="true" tabindex="-1"></a>renderBoard total i b <span class="ot">=</span> liftIO <span class="op">$</span> <span class="kw">do</span></span>
<span id="cb18-15"><a href="#cb18-15" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb18-16"><a href="#cb18-16" aria-hidden="true" tabindex="-1"></a>  <span class="co">-- Each of our cubes are now offset using a function we define below</span></span>
<span id="cb18-17"><a href="#cb18-17" aria-hidden="true" tabindex="-1"></a>  RL.drawCube (addVectors origin <span class="op">$</span> <span class="dt">Vector3</span> <span class="fl">0.5</span>    <span class="dv">0</span> <span class="dv">0</span>) t <span class="dv">3</span> t RL.white</span>
<span id="cb18-18"><a href="#cb18-18" aria-hidden="true" tabindex="-1"></a>  RL.drawCube (addVectors origin <span class="op">$</span> <span class="dt">Vector3</span> (<span class="op">-</span><span class="fl">0.5</span>) <span class="dv">0</span> <span class="dv">0</span>) t <span class="dv">3</span> t RL.white</span>
<span id="cb18-19"><a href="#cb18-19" aria-hidden="true" tabindex="-1"></a>  RL.drawCube (addVectors origin <span class="op">$</span> <span class="dt">Vector3</span> <span class="dv">0</span> <span class="fl">0.5</span> <span class="dv">0</span>) <span class="dv">3</span> t t RL.white</span>
<span id="cb18-20"><a href="#cb18-20" aria-hidden="true" tabindex="-1"></a>  RL.drawCube (addVectors origin <span class="op">$</span> <span class="dt">Vector3</span> <span class="dv">0</span> (<span class="op">-</span><span class="fl">0.5</span>) <span class="dv">0</span>) <span class="dv">3</span> t t RL.white</span>
<span id="cb18-21"><a href="#cb18-21" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb18-22"><a href="#cb18-22" aria-hidden="true" tabindex="-1"></a>  <span class="co">-- Return the next index (so we can track progress through iteration)</span></span>
<span id="cb18-23"><a href="#cb18-23" aria-hidden="true" tabindex="-1"></a>  <span class="fu">pure</span> <span class="op">$</span> i <span class="op">+</span> <span class="dv">1</span></span>
<span id="cb18-24"><a href="#cb18-24" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb18-25"><a href="#cb18-25" aria-hidden="true" tabindex="-1"></a>  <span class="co">-- Determine the origin of the board (4.5 = length of board (3) + padding (1.5))</span></span>
<span id="cb18-26"><a href="#cb18-26" aria-hidden="true" tabindex="-1"></a>  <span class="kw">where</span> offset <span class="ot">=</span> <span class="fu">fromIntegral</span> (total <span class="op">-</span> <span class="dv">1</span>) <span class="op">*</span> <span class="fl">0.5</span></span>
<span id="cb18-27"><a href="#cb18-27" aria-hidden="true" tabindex="-1"></a>        origin <span class="ot">=</span> <span class="dt">Vector3</span> (<span class="dt">CFloat</span> (<span class="fu">fromIntegral</span> i <span class="op">-</span> offset) <span class="op">*</span> <span class="fl">4.5</span>) <span class="fl">1.5</span> <span class="dv">0</span></span>
<span id="cb18-28"><a href="#cb18-28" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb18-29"><a href="#cb18-29" aria-hidden="true" tabindex="-1"></a>        <span class="co">-- Convenience function for adding a vector to the origin, used above</span></span>
<span id="cb18-30"><a href="#cb18-30" aria-hidden="true" tabindex="-1"></a>        offset p <span class="ot">=</span> addVectors p <span class="op">$</span> <span class="dt">Vector3</span> (<span class="dt">CFloat</span> origin) <span class="dv">0</span> <span class="dv">0</span></span>
<span id="cb18-31"><a href="#cb18-31" aria-hidden="true" tabindex="-1"></a>        t <span class="ot">=</span> <span class="fl">0.05</span></span>
<span id="cb18-32"><a href="#cb18-32" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb18-33"><a href="#cb18-33" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb18-34"><a href="#cb18-34" aria-hidden="true" tabindex="-1"></a><span class="co">-- Raylib bindings need love; we need to make a function for adding vectors</span></span>
<span id="cb18-35"><a href="#cb18-35" aria-hidden="true" tabindex="-1"></a><span class="ot">addVectors ::</span> <span class="dt">Vector3</span> <span class="ot">-&gt;</span> <span class="dt">Vector3</span> <span class="ot">-&gt;</span> <span class="dt">Vector3</span></span>
<span id="cb18-36"><a href="#cb18-36" aria-hidden="true" tabindex="-1"></a>addVectors a b <span class="ot">=</span> <span class="dt">Vector3</span></span>
<span id="cb18-37"><a href="#cb18-37" aria-hidden="true" tabindex="-1"></a>    (vector3&#39;x a <span class="op">+</span> vector3&#39;x b)</span>
<span id="cb18-38"><a href="#cb18-38" aria-hidden="true" tabindex="-1"></a>    (vector3&#39;y a <span class="op">+</span> vector3&#39;y b)</span>
<span id="cb18-39"><a href="#cb18-39" aria-hidden="true" tabindex="-1"></a>    (vector3&#39;z a <span class="op">+</span> vector3&#39;z b)</span></code></pre></div>
<p>The biggest change we’ve made here is the use of <code>cfold</code> and <code>cfoldM_</code>. Our first use of <code>cfold</code> is given a pure function that doesn’t use monads, therefore we use <code>cfold</code>. The second one does use monads, and since we don’t care about a return value we use <code>cfoldM_</code>. Folding is a generic way of doing things like accumulation or filtering; you iterate through the list as well as another parameter, be it a ‘count’, ‘total’ or an entirely different list. In this case, we used folds to firstly count the number of entities satisfying a condition (whether they had a <code>BoardComponent</code>), then we used another fold to iterate through the same set of entities, except this time we used the iteration value (<code>index</code>) as a way of knowing how far through we are, kind of like a <code>for</code> loop in imperative languages.</p>
<div class="warning" data-header="Using the entity ID">
<p>An entity is just a wrapper for an integer value; in theory you could just use the entity’s ID itself to work out where the boards need to go. However, this will become problematic if you initialise other entities before or in the middle of your boards, as now your boards’ IDs won’t be sequential in the way you expect!</p>
</div>
<p>With that out of the way, let’s instantiate more entities!</p>
<div class="sourceCode" id="cb19"><pre class="sourceCode hs"><code class="sourceCode haskell"><span id="cb19-1"><a href="#cb19-1" aria-hidden="true" tabindex="-1"></a><span class="co">-- Let&#39;s make 3 boards!</span></span>
<span id="cb19-2"><a href="#cb19-2" aria-hidden="true" tabindex="-1"></a>newEntity_ newBoard</span>
<span id="cb19-3"><a href="#cb19-3" aria-hidden="true" tabindex="-1"></a>newEntity_ newBoard</span>
<span id="cb19-4"><a href="#cb19-4" aria-hidden="true" tabindex="-1"></a>newEntity_ newBoard</span></code></pre></div>
<p>Objective complete! Even though the components of each of these boards have the exact same state, the fact that there are multiple entities now reveals itself visually!</p>
<div class="figure" data-image="https://res.cloudinary.com/aas-sh/image/upload/v1668357984/blog/2022/11/13-11-2022_16_46_16_g6uf5j.png" data-caption="Now we can render as many boards as we like, distributed along the x-axis." data-source="Notakto" data-sourceUrl="https://github.com/Ashe/Notakto/tree/e71210405272674b49929c70cca0e2006df3888e">

</div>
<h2 id="board-state">Board state</h2>
<p>Time for the final piece of the puzzle: rendering a representation of what marks have been placed on each board! We’re almost there, I promise. This is more of the same kind of stuff.</p>
<div class="sourceCode" id="cb20"><pre class="sourceCode hs"><code class="sourceCode haskell"><span id="cb20-1"><a href="#cb20-1" aria-hidden="true" tabindex="-1"></a><span class="ot">renderBoard ::</span> <span class="dt">Int</span> <span class="ot">-&gt;</span> <span class="dt">Int</span> <span class="ot">-&gt;</span> <span class="dt">BoardComponent</span> <span class="ot">-&gt;</span> <span class="dt">System</span> <span class="dt">World</span> <span class="dt">Int</span></span>
<span id="cb20-2"><a href="#cb20-2" aria-hidden="true" tabindex="-1"></a>renderBoard total i b <span class="ot">=</span> <span class="kw">do</span></span>
<span id="cb20-3"><a href="#cb20-3" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb20-4"><a href="#cb20-4" aria-hidden="true" tabindex="-1"></a>  <span class="co">-- Render crosses as part of renderBoard</span></span>
<span id="cb20-5"><a href="#cb20-5" aria-hidden="true" tabindex="-1"></a>  <span class="co">-- We provide the origin value as well as the component</span></span>
<span id="cb20-6"><a href="#cb20-6" aria-hidden="true" tabindex="-1"></a>  renderCrosses origin b</span>
<span id="cb20-7"><a href="#cb20-7" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb20-8"><a href="#cb20-8" aria-hidden="true" tabindex="-1"></a>  liftIO <span class="op">$</span> <span class="kw">do</span></span>
<span id="cb20-9"><a href="#cb20-9" aria-hidden="true" tabindex="-1"></a>    RL.drawCube (addVectors origin <span class="op">$</span> <span class="dt">Vector3</span> <span class="fl">0.5</span>    <span class="dv">0</span> <span class="dv">0</span>) t <span class="dv">3</span> t RL.white</span>
<span id="cb20-10"><a href="#cb20-10" aria-hidden="true" tabindex="-1"></a>    <span class="co">-- &lt;...&gt;</span></span>
<span id="cb20-11"><a href="#cb20-11" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb20-12"><a href="#cb20-12" aria-hidden="true" tabindex="-1"></a><span class="co">-- Given an origin, render a cross for each cell</span></span>
<span id="cb20-13"><a href="#cb20-13" aria-hidden="true" tabindex="-1"></a><span class="ot">renderCrosses ::</span> <span class="dt">Vector3</span> <span class="ot">-&gt;</span> <span class="dt">BoardComponent</span> <span class="ot">-&gt;</span> <span class="dt">System</span> <span class="dt">World</span> ()</span>
<span id="cb20-14"><a href="#cb20-14" aria-hidden="true" tabindex="-1"></a>renderCrosses origin b <span class="ot">=</span> <span class="kw">do</span></span>
<span id="cb20-15"><a href="#cb20-15" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb20-16"><a href="#cb20-16" aria-hidden="true" tabindex="-1"></a>  <span class="co">-- This function&#39;s job is to geometrically define what &#39;top left&#39; etc means</span></span>
<span id="cb20-17"><a href="#cb20-17" aria-hidden="true" tabindex="-1"></a>  renderCross origin (<span class="op">-</span><span class="dv">1</span>)   <span class="dv">1</span>  (_tl b)</span>
<span id="cb20-18"><a href="#cb20-18" aria-hidden="true" tabindex="-1"></a>  renderCross origin   <span class="dv">0</span>    <span class="dv">1</span>  (_tc b)</span>
<span id="cb20-19"><a href="#cb20-19" aria-hidden="true" tabindex="-1"></a>  renderCross origin   <span class="dv">1</span>    <span class="dv">1</span>  (_tr b)</span>
<span id="cb20-20"><a href="#cb20-20" aria-hidden="true" tabindex="-1"></a>  renderCross origin (<span class="op">-</span><span class="dv">1</span>)   <span class="dv">0</span>  (_ml b)</span>
<span id="cb20-21"><a href="#cb20-21" aria-hidden="true" tabindex="-1"></a>  renderCross origin   <span class="dv">0</span>    <span class="dv">0</span>  (_mc b)</span>
<span id="cb20-22"><a href="#cb20-22" aria-hidden="true" tabindex="-1"></a>  renderCross origin   <span class="dv">1</span>    <span class="dv">0</span>  (_mr b)</span>
<span id="cb20-23"><a href="#cb20-23" aria-hidden="true" tabindex="-1"></a>  renderCross origin (<span class="op">-</span><span class="dv">1</span>) (<span class="op">-</span><span class="dv">1</span>) (_bl b)</span>
<span id="cb20-24"><a href="#cb20-24" aria-hidden="true" tabindex="-1"></a>  renderCross origin   <span class="dv">0</span>  (<span class="op">-</span><span class="dv">1</span>) (_bc b)</span>
<span id="cb20-25"><a href="#cb20-25" aria-hidden="true" tabindex="-1"></a>  renderCross origin   <span class="dv">1</span>  (<span class="op">-</span><span class="dv">1</span>) (_br b)</span>
<span id="cb20-26"><a href="#cb20-26" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb20-27"><a href="#cb20-27" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb20-28"><a href="#cb20-28" aria-hidden="true" tabindex="-1"></a><span class="co">-- Now we have an origin as well as a horizontal + vertical offset and a cell</span></span>
<span id="cb20-29"><a href="#cb20-29" aria-hidden="true" tabindex="-1"></a><span class="ot">renderCross ::</span> <span class="dt">Vector3</span> <span class="ot">-&gt;</span> <span class="dt">Float</span> <span class="ot">-&gt;</span> <span class="dt">Float</span> <span class="ot">-&gt;</span> <span class="dt">Cell</span> <span class="ot">-&gt;</span> <span class="dt">System</span> <span class="dt">World</span> ()</span>
<span id="cb20-30"><a href="#cb20-30" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb20-31"><a href="#cb20-31" aria-hidden="true" tabindex="-1"></a><span class="co">-- If the cell is empty, we just do nothing (pure nothingness, pretty metal!)</span></span>
<span id="cb20-32"><a href="#cb20-32" aria-hidden="true" tabindex="-1"></a>renderCross _ _ _ <span class="dt">Empty</span> <span class="ot">=</span> <span class="fu">pure</span> ()</span>
<span id="cb20-33"><a href="#cb20-33" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb20-34"><a href="#cb20-34" aria-hidden="true" tabindex="-1"></a><span class="co">-- If the cell is filled, we render a cross</span></span>
<span id="cb20-35"><a href="#cb20-35" aria-hidden="true" tabindex="-1"></a>renderCross origin i j <span class="dt">Filled</span> <span class="ot">=</span> liftIO <span class="op">$</span> <span class="kw">do</span></span>
<span id="cb20-36"><a href="#cb20-36" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb20-37"><a href="#cb20-37" aria-hidden="true" tabindex="-1"></a>  <span class="co">-- We simply draw 2 lines, bottom left to top right...</span></span>
<span id="cb20-38"><a href="#cb20-38" aria-hidden="true" tabindex="-1"></a>  RL.drawLine3D (f (<span class="op">-</span><span class="fl">0.4</span>) (<span class="op">-</span><span class="fl">0.4</span>)) (f <span class="fl">0.4</span> <span class="fl">0.4</span>) RL.red</span>
<span id="cb20-39"><a href="#cb20-39" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb20-40"><a href="#cb20-40" aria-hidden="true" tabindex="-1"></a>  <span class="co">-- ... and then bottom right to top left</span></span>
<span id="cb20-41"><a href="#cb20-41" aria-hidden="true" tabindex="-1"></a>  RL.drawLine3D (f <span class="fl">0.4</span> (<span class="op">-</span><span class="fl">0.4</span>)) (f (<span class="op">-</span><span class="fl">0.4</span>) <span class="fl">0.4</span>) RL.red</span>
<span id="cb20-42"><a href="#cb20-42" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb20-43"><a href="#cb20-43" aria-hidden="true" tabindex="-1"></a>  <span class="co">-- We have some helper values here, center being the center of the cell</span></span>
<span id="cb20-44"><a href="#cb20-44" aria-hidden="true" tabindex="-1"></a>  <span class="co">-- calculated using the origin and offsets</span></span>
<span id="cb20-45"><a href="#cb20-45" aria-hidden="true" tabindex="-1"></a>  <span class="kw">where</span> center <span class="ot">=</span> addVectors origin <span class="op">$</span> <span class="dt">Vector3</span> (<span class="dt">CFloat</span> i) (<span class="dt">CFloat</span> j) <span class="dv">0</span></span>
<span id="cb20-46"><a href="#cb20-46" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb20-47"><a href="#cb20-47" aria-hidden="true" tabindex="-1"></a>        <span class="co">-- As well as a helper function to create start and end points</span></span>
<span id="cb20-48"><a href="#cb20-48" aria-hidden="true" tabindex="-1"></a>        f x y <span class="ot">=</span> addVectors center <span class="op">$</span> <span class="dt">Vector3</span> x y <span class="dv">0</span></span></code></pre></div>
<p>Ready to test it out? Let’s ammend our initialisation for one of the boards:</p>
<div class="sourceCode" id="cb21"><pre class="sourceCode hs"><code class="sourceCode haskell"><span id="cb21-1"><a href="#cb21-1" aria-hidden="true" tabindex="-1"></a>  newEntity_ <span class="op">$</span> <span class="dt">Board</span></span>
<span id="cb21-2"><a href="#cb21-2" aria-hidden="true" tabindex="-1"></a>    <span class="dt">Filled</span> <span class="dt">Empty</span> <span class="dt">Empty</span></span>
<span id="cb21-3"><a href="#cb21-3" aria-hidden="true" tabindex="-1"></a>    <span class="dt">Empty</span> <span class="dt">Empty</span> <span class="dt">Empty</span></span>
<span id="cb21-4"><a href="#cb21-4" aria-hidden="true" tabindex="-1"></a>    <span class="dt">Empty</span> <span class="dt">Empty</span> <span class="dt">Empty</span></span>
<span id="cb21-5"><a href="#cb21-5" aria-hidden="true" tabindex="-1"></a>  newEntity_ newBoard</span>
<span id="cb21-6"><a href="#cb21-6" aria-hidden="true" tabindex="-1"></a>  newEntity_ newBoard</span></code></pre></div>
<p>And now we see that the first board has the top-left cell filled! We can now visualise both the amount of boards and the content of each one! Chapter over!</p>
<div class="figure" data-image="https://res.cloudinary.com/aas-sh/image/upload/v1668362726/blog/2022/11/13-11-2022_18_05_04_kqweul.png" data-caption="We can now visualise the state of each board." data-source="Notakto" data-sourceUrl="https://github.com/Ashe/Notakto/tree/e71210405272674b49929c70cca0e2006df3888e">

</div>
<div class="gitrepo" data-header="Notakto">
<p>A link to the corresponding commit for the previous section can be found <a href="https://github.com/Ashe/Notakto/tree/e71210405272674b49929c70cca0e2006df3888e">here</a>.</p>
</div>
<h1 id="making-moves">Making moves</h1>
<h2 id="preparing-the-raycast">Preparing the raycast</h2>
<p>Okay, it’s time to speed up and do some gameplay code. In order to make moves, players will need to shoot a ray out from the camera into the boards so that they can precisely specify where they want to place their cross. Let’s start by adding a new component responsible for storing the player’s current aim. We don’t have to give it a default value as it’ll be written during our update frame anyway.</p>
<div class="sourceCode" id="cb22"><pre class="sourceCode hs"><code class="sourceCode haskell"><span id="cb22-1"><a href="#cb22-1" aria-hidden="true" tabindex="-1"></a><span class="co">-- New component to add (Types.hs) and add to World</span></span>
<span id="cb22-2"><a href="#cb22-2" aria-hidden="true" tabindex="-1"></a><span class="kw">newtype</span> <span class="dt">PlayerAimComponent</span> <span class="ot">=</span> <span class="dt">Aim</span> <span class="dt">RL.Ray</span></span>
<span id="cb22-3"><a href="#cb22-3" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb22-4"><a href="#cb22-4" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb22-5"><a href="#cb22-5" aria-hidden="true" tabindex="-1"></a><span class="co">-- New update system to add (Lib.hs) and be called from update system</span></span>
<span id="cb22-6"><a href="#cb22-6" aria-hidden="true" tabindex="-1"></a><span class="ot">handlePlayerAim ::</span> <span class="dt">System</span> <span class="dt">World</span> ()</span>
<span id="cb22-7"><a href="#cb22-7" aria-hidden="true" tabindex="-1"></a>handlePlayerAim <span class="ot">=</span> <span class="kw">do</span></span>
<span id="cb22-8"><a href="#cb22-8" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb22-9"><a href="#cb22-9" aria-hidden="true" tabindex="-1"></a>  <span class="co">-- Determine window size so that we can cast from center of screen</span></span>
<span id="cb22-10"><a href="#cb22-10" aria-hidden="true" tabindex="-1"></a>  windowWidth <span class="ot">&lt;-</span> liftIO RL.getScreenWidth</span>
<span id="cb22-11"><a href="#cb22-11" aria-hidden="true" tabindex="-1"></a>  windowHeight <span class="ot">&lt;-</span> liftIO RL.getScreenHeight</span>
<span id="cb22-12"><a href="#cb22-12" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb22-13"><a href="#cb22-13" aria-hidden="true" tabindex="-1"></a>  <span class="op">-</span> <span class="dt">Retrieve</span> the camera (will have just been updated)</span>
<span id="cb22-14"><a href="#cb22-14" aria-hidden="true" tabindex="-1"></a>  <span class="dt">Camera</span> camera <span class="ot">&lt;-</span> get global</span>
<span id="cb22-15"><a href="#cb22-15" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb22-16"><a href="#cb22-16" aria-hidden="true" tabindex="-1"></a>  <span class="co">-- Create a ray to be cast later</span></span>
<span id="cb22-17"><a href="#cb22-17" aria-hidden="true" tabindex="-1"></a>  ray <span class="ot">&lt;-</span> liftIO <span class="op">$</span> RL.getMouseRay (<span class="dt">RL.Vector2</span></span>
<span id="cb22-18"><a href="#cb22-18" aria-hidden="true" tabindex="-1"></a>    (<span class="dt">CFloat</span> <span class="op">$</span> <span class="fu">fromIntegral</span> windowWidth <span class="op">/</span> <span class="dv">2</span>)</span>
<span id="cb22-19"><a href="#cb22-19" aria-hidden="true" tabindex="-1"></a>    (<span class="dt">CFloat</span> <span class="op">$</span> <span class="fu">fromIntegral</span> windowHeight <span class="op">/</span> <span class="dv">2</span>)) camera</span>
<span id="cb22-20"><a href="#cb22-20" aria-hidden="true" tabindex="-1"></a>  set global <span class="op">$</span> <span class="dt">Aim</span> ray</span>
<span id="cb22-21"><a href="#cb22-21" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb22-22"><a href="#cb22-22" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb22-23"><a href="#cb22-23" aria-hidden="true" tabindex="-1"></a><span class="co">-- New render system to add (Rendering.hs) and be called from render system</span></span>
<span id="cb22-24"><a href="#cb22-24" aria-hidden="true" tabindex="-1"></a><span class="ot">renderAimRay ::</span> <span class="dt">System</span> <span class="dt">World</span> ()</span>
<span id="cb22-25"><a href="#cb22-25" aria-hidden="true" tabindex="-1"></a>renderAimRay <span class="ot">=</span> <span class="kw">do</span></span>
<span id="cb22-26"><a href="#cb22-26" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb22-27"><a href="#cb22-27" aria-hidden="true" tabindex="-1"></a>  <span class="co">-- Retrieve player aim component</span></span>
<span id="cb22-28"><a href="#cb22-28" aria-hidden="true" tabindex="-1"></a>  <span class="dt">Aim</span> ray <span class="ot">&lt;-</span> get global</span>
<span id="cb22-29"><a href="#cb22-29" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb22-30"><a href="#cb22-30" aria-hidden="true" tabindex="-1"></a>  <span class="co">-- Determine endpoints of a line to draw</span></span>
<span id="cb22-31"><a href="#cb22-31" aria-hidden="true" tabindex="-1"></a>  <span class="co">-- Note that we slightly offset the start location since we are drawing</span></span>
<span id="cb22-32"><a href="#cb22-32" aria-hidden="true" tabindex="-1"></a>  <span class="co">-- from the camera, and if we didn&#39;t offset then the line would appear</span></span>
<span id="cb22-33"><a href="#cb22-33" aria-hidden="true" tabindex="-1"></a>  <span class="co">-- as a dot!</span></span>
<span id="cb22-34"><a href="#cb22-34" aria-hidden="true" tabindex="-1"></a>  <span class="kw">let</span> lineStart <span class="ot">=</span> addVectors (RL.ray&#39;position ray) (<span class="dt">Vector3</span> <span class="dv">0</span> (<span class="op">-</span><span class="fl">0.05</span>) <span class="dv">0</span>)</span>
<span id="cb22-35"><a href="#cb22-35" aria-hidden="true" tabindex="-1"></a>      lineEnd <span class="ot">=</span> addVectors (RL.ray&#39;position ray) <span class="op">$</span></span>
<span id="cb22-36"><a href="#cb22-36" aria-hidden="true" tabindex="-1"></a>        multiplyVector (RL.ray&#39;direction ray) <span class="dv">10</span></span>
<span id="cb22-37"><a href="#cb22-37" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb22-38"><a href="#cb22-38" aria-hidden="true" tabindex="-1"></a>  <span class="co">-- Render the line</span></span>
<span id="cb22-39"><a href="#cb22-39" aria-hidden="true" tabindex="-1"></a>  liftIO <span class="op">$</span> RL.drawLine3D lineStart lineEnd RL.yellow</span>
<span id="cb22-40"><a href="#cb22-40" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb22-41"><a href="#cb22-41" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb22-42"><a href="#cb22-42" aria-hidden="true" tabindex="-1"></a><span class="co">-- New utility function</span></span>
<span id="cb22-43"><a href="#cb22-43" aria-hidden="true" tabindex="-1"></a><span class="ot">multiplyVector ::</span> <span class="dt">Vector3</span> <span class="ot">-&gt;</span> <span class="dt">Float</span> <span class="ot">-&gt;</span> <span class="dt">Vector3</span></span>
<span id="cb22-44"><a href="#cb22-44" aria-hidden="true" tabindex="-1"></a>multiplyVector a b <span class="ot">=</span> <span class="kw">let</span> b&#39; <span class="ot">=</span> <span class="dt">CFloat</span> b <span class="kw">in</span> <span class="dt">Vector3</span></span>
<span id="cb22-45"><a href="#cb22-45" aria-hidden="true" tabindex="-1"></a>  (vector3&#39;x a <span class="op">*</span> b&#39;)</span>
<span id="cb22-46"><a href="#cb22-46" aria-hidden="true" tabindex="-1"></a>  (vector3&#39;y a <span class="op">*</span> b&#39;)</span>
<span id="cb22-47"><a href="#cb22-47" aria-hidden="true" tabindex="-1"></a>  (vector3&#39;z a <span class="op">*</span> b&#39;)</span></code></pre></div>
<p>We have momentum now! We haven’t done anything gameplay related really yet, but we’re blasting through the basics and now we’re ready to try and cherry-pick a cell from a board. This yellow line will be really helpful for making sure that the selected cell we’re going to calculate is in the approximate area of the ray.</p>
<p>This is where having each cross as its own entity has a benefit; each cross could easily check if it the raycast strikes it and our picking system would be done in a matter of minutes. However, the drawbacks of this is the task of connecting it back to the board and making changes to the game state. Instead, we’re going to see if the raycast collides with the board, and use the position it strikes the board to determine which cell the player is aiming at.</p>
<div class="gitrepo" data-header="Notakto">
<p>A link to the corresponding commit for the previous section can be found <a href="https://github.com/Ashe/Notakto/tree/d85cd87ad2ebe77e14c572f1db43fec0c9120059">here</a>.</p>
</div>
<h2 id="identifying-the-looked-at-cell">Identifying the looked-at cell</h2>
<p>I knew it was coming; the problem with writing the blog post as I go means that I get stuff wrong. I initially thought it would be a good idea to simply count the entities and render the board in a position dependent on it’s index, however this is just going to be so annoying to calculate each time. That’s okay though, as both Haskell and Apecs are really easy to experiment with and try new things. Here’s a quick correction to our project:</p>
<div class="sourceCode" id="cb23"><pre class="sourceCode hs"><code class="sourceCode haskell"><span id="cb23-1"><a href="#cb23-1" aria-hidden="true" tabindex="-1"></a><span class="co">-- New component for tracking positions in 3D space</span></span>
<span id="cb23-2"><a href="#cb23-2" aria-hidden="true" tabindex="-1"></a><span class="kw">newtype</span> <span class="dt">PositionComponent</span> <span class="ot">=</span> <span class="dt">Position</span> <span class="dt">RL.Vector3</span> <span class="kw">deriving</span> (<span class="dt">Show</span>, <span class="dt">Eq</span>)</span>
<span id="cb23-3"><a href="#cb23-3" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb23-4"><a href="#cb23-4" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb23-5"><a href="#cb23-5" aria-hidden="true" tabindex="-1"></a><span class="co">-- Initialisation system for automatically creating n boards across the x axis</span></span>
<span id="cb23-6"><a href="#cb23-6" aria-hidden="true" tabindex="-1"></a><span class="co">-- Note: Thanks to our position component, you could create all sorts of patterns!</span></span>
<span id="cb23-7"><a href="#cb23-7" aria-hidden="true" tabindex="-1"></a><span class="ot">createBoards ::</span> <span class="dt">Int</span> <span class="ot">-&gt;</span> <span class="dt">System</span> <span class="dt">World</span> ()</span>
<span id="cb23-8"><a href="#cb23-8" aria-hidden="true" tabindex="-1"></a>createBoards n <span class="ot">=</span> <span class="kw">do</span></span>
<span id="cb23-9"><a href="#cb23-9" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb23-10"><a href="#cb23-10" aria-hidden="true" tabindex="-1"></a>  <span class="co">-- forM_ is standard library, it&#39;s equivalent to flip mapM</span></span>
<span id="cb23-11"><a href="#cb23-11" aria-hidden="true" tabindex="-1"></a>  <span class="co">-- Also notice that to create an entity with multiple components we use a tuple</span></span>
<span id="cb23-12"><a href="#cb23-12" aria-hidden="true" tabindex="-1"></a>  forM_ positions <span class="op">$</span> \p <span class="ot">-&gt;</span> newEntity_ (newBoard, <span class="dt">Position</span> p)</span>
<span id="cb23-13"><a href="#cb23-13" aria-hidden="true" tabindex="-1"></a>  <span class="kw">where</span> newBoard <span class="ot">=</span> <span class="dt">Board</span> <span class="dt">Empty</span> <span class="dt">Empty</span> <span class="dt">Empty</span> <span class="dt">Empty</span> <span class="dt">Empty</span> <span class="dt">Empty</span> <span class="dt">Empty</span> <span class="dt">Empty</span> <span class="dt">Empty</span></span>
<span id="cb23-14"><a href="#cb23-14" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb23-15"><a href="#cb23-15" aria-hidden="true" tabindex="-1"></a>        <span class="co">-- List comprehension to dynamically generate a list of x coordinates</span></span>
<span id="cb23-16"><a href="#cb23-16" aria-hidden="true" tabindex="-1"></a>        positions <span class="ot">=</span> [<span class="dt">Vector3</span> x&#39; <span class="fl">1.5</span> <span class="dv">0</span> <span class="op">|</span> x <span class="ot">&lt;-</span> [<span class="dv">0</span><span class="op">..</span>n <span class="op">-</span> <span class="dv">1</span>],</span>
<span id="cb23-17"><a href="#cb23-17" aria-hidden="true" tabindex="-1"></a>          <span class="kw">let</span> x&#39; <span class="ot">=</span> (<span class="fu">fromIntegral</span> x <span class="op">-</span> (<span class="fu">fromIntegral</span> (n <span class="op">-</span> <span class="dv">1</span>) <span class="op">/</span> <span class="dv">2</span>)) <span class="op">*</span> <span class="fl">4.5</span>]</span>
<span id="cb23-18"><a href="#cb23-18" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb23-19"><a href="#cb23-19" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb23-20"><a href="#cb23-20" aria-hidden="true" tabindex="-1"></a><span class="co">-- Forget cfoldM_, we&#39;re back to cmapM_</span></span>
<span id="cb23-21"><a href="#cb23-21" aria-hidden="true" tabindex="-1"></a><span class="ot">renderBoards ::</span> <span class="dt">System</span> <span class="dt">World</span> ()</span>
<span id="cb23-22"><a href="#cb23-22" aria-hidden="true" tabindex="-1"></a>renderBoards <span class="ot">=</span> cmapM_ renderBoard</span>
<span id="cb23-23"><a href="#cb23-23" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb23-24"><a href="#cb23-24" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb23-25"><a href="#cb23-25" aria-hidden="true" tabindex="-1"></a><span class="co">-- Notice the tuple - this is how you select entities that contain both components</span></span>
<span id="cb23-26"><a href="#cb23-26" aria-hidden="true" tabindex="-1"></a><span class="co">-- Note: You can use the &#39;Not&#39; type to ensure the entity DOES NOT have that type</span></span>
<span id="cb23-27"><a href="#cb23-27" aria-hidden="true" tabindex="-1"></a><span class="ot">renderBoard ::</span> (<span class="dt">BoardComponent</span>, <span class="dt">PositionComponent</span>) <span class="ot">-&gt;</span> <span class="dt">System</span> <span class="dt">World</span> ()</span>
<span id="cb23-28"><a href="#cb23-28" aria-hidden="true" tabindex="-1"></a>renderBoard (b, <span class="dt">Position</span> p) <span class="ot">=</span> <span class="kw">do</span></span>
<span id="cb23-29"><a href="#cb23-29" aria-hidden="true" tabindex="-1"></a>  renderCrosses p b</span>
<span id="cb23-30"><a href="#cb23-30" aria-hidden="true" tabindex="-1"></a>  liftIO <span class="op">$</span> <span class="kw">do</span></span>
<span id="cb23-31"><a href="#cb23-31" aria-hidden="true" tabindex="-1"></a>    RL.drawCube (addVectors p <span class="op">$</span> <span class="dt">Vector3</span> <span class="fl">0.5</span>    <span class="dv">0</span> <span class="dv">0</span>) t <span class="dv">3</span> t RL.white</span>
<span id="cb23-32"><a href="#cb23-32" aria-hidden="true" tabindex="-1"></a>    RL.drawCube (addVectors p <span class="op">$</span> <span class="dt">Vector3</span> (<span class="op">-</span><span class="fl">0.5</span>) <span class="dv">0</span> <span class="dv">0</span>) t <span class="dv">3</span> t RL.white</span>
<span id="cb23-33"><a href="#cb23-33" aria-hidden="true" tabindex="-1"></a>    RL.drawCube (addVectors p <span class="op">$</span> <span class="dt">Vector3</span> <span class="dv">0</span> <span class="fl">0.5</span> <span class="dv">0</span>) <span class="dv">3</span> t t RL.white</span>
<span id="cb23-34"><a href="#cb23-34" aria-hidden="true" tabindex="-1"></a>    RL.drawCube (addVectors p <span class="op">$</span> <span class="dt">Vector3</span> <span class="dv">0</span> (<span class="op">-</span><span class="fl">0.5</span>) <span class="dv">0</span>) <span class="dv">3</span> t t RL.white</span>
<span id="cb23-35"><a href="#cb23-35" aria-hidden="true" tabindex="-1"></a>  <span class="kw">where</span> t <span class="ot">=</span> <span class="fl">0.05</span></span></code></pre></div>
<p>This is where things get tricky… I’ve actually had to file a <a href="https://github.com/Anut-py/h-raylib/issues/5">bug report</a> since the raycasting and collision of Raylib don’t seem to be working great. It seems that data that we’re receiving isn’t what we expect and is slightly unreliable unless we do some IO before accessing it. Raylib wasn’t written in Haskell, and so even though our programming can easily be reasoned about, there’s a bit of a grey area where bindings to libraries written in other languages are. For now though, I’m just going to pretend the bug doesn’t exist and try to implement more of the program.</p>
<p>Before we continue, we need to ask ourselves what we actually want to do. Right now, my goal is to make it so that when you aim at a cell, we see a ‘ghost’ of a cross that will appear if you hit the left mouse button. The biggest question is, how do we want to store this bit of state?</p>
<ol type="1">
<li>We could change our <code>Cell</code> type to be either <code>Empty | Filled | Chosen</code>, however that will require us to make sure that only one cell is chosen at most, which is more work.</li>
<li>We could specify a new variable on the <code>BoardComponent</code> to keep track on which cell is chosen, but that would mean that we could have multiple chosen cells across multiple boards.</li>
<li>We could update the <code>PlayerAimComponent</code> to contain both the ray and the looked-at cell — while this would work, it would be assuming that we’re only interested in players looking at cells, and wouldn’t be very good if your game had multiple things players could interact with.</li>
<li>We could try to avoid writing state altogether, but this would mean that every cell will need to crunch the numbers to work out if you’re looking at it <em>every rendering loop</em>. This would also mean that we have to test cells in isolation, meaning that there could be a situation where you’re technically looking at multiple cells at once.</li>
</ol>
<p>Isn’t gamedev fun? I believe that I’m going to go for <strong>option 3</strong>. Note that if you were doing a look-at system in a different type of game, you’d most likely just record which <code>Entity</code> you’re looking at. The only reason we are in this scenario is because we avoided making crosses be their own <code>Entity</code>.</p>
<div class="help" data-header="Thinking of alternatives">
<p>If you are looking to improve yourself as a programmer it’s always a good idea to think about all the different ways you could solve a problem <em>before</em> you get started. You (or your team) could begin to spot glaring issues before they manifest, and they also reassure you that if things go wrong you have other ways of solving things. Of course, don’t spend <em>ages</em> planning as you can’t always capture every potential problem without giving things a go.</p>
<p>If you’re struggling with thinking of approaches (and believe me, there are <em>always</em> better ways of writing things and numerous things that could be improved), try some of the following methods:</p>
<ul>
<li><p><strong>Start making a list —</strong> Sometimes, by simply writing ‘1.’ and arranging your thoughts into a list, you naturally start thinking of new entries to pad it out. I literally did this in the section above! Give yourself a space to prove to yourself you can do this!</p></li>
<li><p><strong>Take your initial approach and make small adjustments —</strong> Sometimes you can quickly create alternative approaches by simply taking your first idea and altering it slightly; option 2 could be the same as option 1 with an addition or exception. For example, if your idea was to add a new variable to something, maybe consider if it could also be added somewhere else or added in a different way such that it has multiple uses.</p></li>
<li><p><strong>Pretend to be a super-villain —</strong> Let’s say that it’s become your job to sabotage your code in some way, whether that’s by misusing the code or using the application in unintended ways. What would you do, and what kinds of things could you break? Now come back to reality and think about the likelihood of any of those scenarios, the risks they present and the cost of prevention.</p></li>
<li><p><strong>Consider not doing it —</strong> Lack of action is itself an action, and so questionning whether you need to implement your feature in the first place isn’t a bad question to ask. Sometimes it exposes how many drawbacks there are versus the benefits, and perhaps what you might consider a workaround turns into one of your alternative approaches. What is the requirement that is driving this decision? If there isn’t one, then maybe we need to understand our requirements first.</p></li>
</ul>
</div>
<p>Huzzah, after a few days that <a href="https://github.com/Anut-py/h-raylib/issues/5">bug</a> was fixed! Let’s get on with approach number three:</p>
<div class="sourceCode" id="cb24"><pre class="sourceCode hs"><code class="sourceCode haskell"><span id="cb24-1"><a href="#cb24-1" aria-hidden="true" tabindex="-1"></a><span class="co">-- New data type representing the player&#39;s current looked-at cell</span></span>
<span id="cb24-2"><a href="#cb24-2" aria-hidden="true" tabindex="-1"></a><span class="kw">data</span> <span class="dt">LookAtTarget</span> <span class="ot">=</span> <span class="dt">NoTarget</span> <span class="op">|</span> <span class="dt">Target</span> <span class="dt">Entity</span> <span class="dt">Int</span> <span class="kw">deriving</span> (<span class="dt">Show</span>, <span class="dt">Eq</span>)</span>
<span id="cb24-3"><a href="#cb24-3" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb24-4"><a href="#cb24-4" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb24-5"><a href="#cb24-5" aria-hidden="true" tabindex="-1"></a><span class="co">-- Update the aim component to make use of our new type</span></span>
<span id="cb24-6"><a href="#cb24-6" aria-hidden="true" tabindex="-1"></a><span class="kw">data</span> <span class="dt">PlayerAimComponent</span> <span class="ot">=</span> <span class="dt">Aim</span> <span class="dt">RL.Ray</span> <span class="dt">LookAtTarget</span> <span class="kw">deriving</span> (<span class="dt">Show</span>, <span class="dt">Eq</span>)</span>
<span id="cb24-7"><a href="#cb24-7" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb24-8"><a href="#cb24-8" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb24-9"><a href="#cb24-9" aria-hidden="true" tabindex="-1"></a><span class="co">-- Update the player aim function to calculate the currently looked-at cell</span></span>
<span id="cb24-10"><a href="#cb24-10" aria-hidden="true" tabindex="-1"></a><span class="ot">handlePlayerAim ::</span> <span class="dt">System</span> <span class="dt">World</span> ()</span>
<span id="cb24-11"><a href="#cb24-11" aria-hidden="true" tabindex="-1"></a>handlePlayerAim <span class="ot">=</span> <span class="kw">do</span></span>
<span id="cb24-12"><a href="#cb24-12" aria-hidden="true" tabindex="-1"></a>  windowWidth <span class="ot">&lt;-</span> liftIO RL.getScreenWidth</span>
<span id="cb24-13"><a href="#cb24-13" aria-hidden="true" tabindex="-1"></a>  windowHeight <span class="ot">&lt;-</span> liftIO RL.getScreenHeight</span>
<span id="cb24-14"><a href="#cb24-14" aria-hidden="true" tabindex="-1"></a>  <span class="dt">Camera</span> camera <span class="ot">&lt;-</span> get global</span>
<span id="cb24-15"><a href="#cb24-15" aria-hidden="true" tabindex="-1"></a>  ray <span class="ot">&lt;-</span> liftIO <span class="op">$</span> RL.getMouseRay (<span class="dt">RL.Vector2</span></span>
<span id="cb24-16"><a href="#cb24-16" aria-hidden="true" tabindex="-1"></a>    (<span class="dt">CFloat</span> <span class="op">$</span> <span class="fu">fromIntegral</span> windowWidth <span class="op">/</span> <span class="dv">2</span>)</span>
<span id="cb24-17"><a href="#cb24-17" aria-hidden="true" tabindex="-1"></a>    (<span class="dt">CFloat</span> <span class="op">$</span> <span class="fu">fromIntegral</span> windowHeight <span class="op">/</span> <span class="dv">2</span>)) camera</span>
<span id="cb24-18"><a href="#cb24-18" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb24-19"><a href="#cb24-19" aria-hidden="true" tabindex="-1"></a>  <span class="co">-- Use the ray we generated to find a target</span></span>
<span id="cb24-20"><a href="#cb24-20" aria-hidden="true" tabindex="-1"></a>  target <span class="ot">&lt;-</span> cfoldM (findLookAtTarget ray) <span class="dt">NoTarget</span></span>
<span id="cb24-21"><a href="#cb24-21" aria-hidden="true" tabindex="-1"></a>  set global <span class="op">$</span> <span class="dt">Aim</span> ray target</span>
<span id="cb24-22"><a href="#cb24-22" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb24-23"><a href="#cb24-23" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb24-24"><a href="#cb24-24" aria-hidden="true" tabindex="-1"></a><span class="co">-- Look for closest board that the player is looking at</span></span>
<span id="cb24-25"><a href="#cb24-25" aria-hidden="true" tabindex="-1"></a><span class="ot">findLookAtTarget ::</span> <span class="dt">RL.Ray</span> <span class="ot">-&gt;</span> <span class="dt">LookAtTarget</span> <span class="ot">-&gt;</span></span>
<span id="cb24-26"><a href="#cb24-26" aria-hidden="true" tabindex="-1"></a>                    (<span class="dt">BoardComponent</span>, <span class="dt">PositionComponent</span>, <span class="dt">Entity</span>) <span class="ot">-&gt;</span></span>
<span id="cb24-27"><a href="#cb24-27" aria-hidden="true" tabindex="-1"></a>                    <span class="dt">System</span> <span class="dt">World</span> <span class="dt">LookAtTarget</span></span>
<span id="cb24-28"><a href="#cb24-28" aria-hidden="true" tabindex="-1"></a>findLookAtTarget ray target (_, <span class="dt">Position</span> p, e) <span class="ot">=</span> <span class="kw">do</span></span>
<span id="cb24-29"><a href="#cb24-29" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb24-30"><a href="#cb24-30" aria-hidden="true" tabindex="-1"></a>  <span class="co">-- If our raycast hits the current board</span></span>
<span id="cb24-31"><a href="#cb24-31" aria-hidden="true" tabindex="-1"></a>  <span class="kw">if</span> RL.rayCollision&#39;hit hitInfo <span class="op">&gt;</span> <span class="dv">0</span> <span class="kw">then</span></span>
<span id="cb24-32"><a href="#cb24-32" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb24-33"><a href="#cb24-33" aria-hidden="true" tabindex="-1"></a>    <span class="co">-- Check if this new target is closer than our current target</span></span>
<span id="cb24-34"><a href="#cb24-34" aria-hidden="true" tabindex="-1"></a>    getClosestTarget ray target <span class="op">$</span> <span class="dt">Target</span> e (findCell hitPos)</span>
<span id="cb24-35"><a href="#cb24-35" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb24-36"><a href="#cb24-36" aria-hidden="true" tabindex="-1"></a>  <span class="co">-- Otherwise, use the current best target</span></span>
<span id="cb24-37"><a href="#cb24-37" aria-hidden="true" tabindex="-1"></a>  <span class="kw">else</span></span>
<span id="cb24-38"><a href="#cb24-38" aria-hidden="true" tabindex="-1"></a>    <span class="fu">pure</span> target</span>
<span id="cb24-39"><a href="#cb24-39" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb24-40"><a href="#cb24-40" aria-hidden="true" tabindex="-1"></a>  <span class="co">-- Determine where to place the hitbox for raycast, and check hit location</span></span>
<span id="cb24-41"><a href="#cb24-41" aria-hidden="true" tabindex="-1"></a>  <span class="kw">where</span> from <span class="ot">=</span> addVectors p <span class="op">$</span> <span class="dt">Vector3</span> (<span class="op">-</span><span class="fl">1.5</span>) (<span class="op">-</span><span class="fl">1.5</span>) (<span class="op">-</span><span class="fl">0.05</span>)</span>
<span id="cb24-42"><a href="#cb24-42" aria-hidden="true" tabindex="-1"></a>        to <span class="ot">=</span> addVectors p <span class="op">$</span> <span class="dt">Vector3</span> <span class="fl">1.5</span> <span class="fl">1.5</span> <span class="fl">0.05</span></span>
<span id="cb24-43"><a href="#cb24-43" aria-hidden="true" tabindex="-1"></a>        hitInfo <span class="ot">=</span> RL.getRayCollisionBox ray <span class="op">$</span> <span class="dt">RL.BoundingBox</span> from to</span>
<span id="cb24-44"><a href="#cb24-44" aria-hidden="true" tabindex="-1"></a>        hitPos <span class="ot">=</span> subtractVectors (RL.rayCollision&#39;point hitInfo) p</span>
<span id="cb24-45"><a href="#cb24-45" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb24-46"><a href="#cb24-46" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb24-47"><a href="#cb24-47" aria-hidden="true" tabindex="-1"></a><span class="co">-- Checks two targets and returns the closest one</span></span>
<span id="cb24-48"><a href="#cb24-48" aria-hidden="true" tabindex="-1"></a><span class="ot">getClosestTarget ::</span> <span class="dt">RL.Ray</span> <span class="ot">-&gt;</span> <span class="dt">LookAtTarget</span> <span class="ot">-&gt;</span> <span class="dt">LookAtTarget</span> <span class="ot">-&gt;</span></span>
<span id="cb24-49"><a href="#cb24-49" aria-hidden="true" tabindex="-1"></a>                    <span class="dt">System</span> <span class="dt">World</span> <span class="dt">LookAtTarget</span></span>
<span id="cb24-50"><a href="#cb24-50" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb24-51"><a href="#cb24-51" aria-hidden="true" tabindex="-1"></a><span class="co">-- If both variables are valid targets</span></span>
<span id="cb24-52"><a href="#cb24-52" aria-hidden="true" tabindex="-1"></a>getClosestTarget ray a<span class="op">@</span>(<span class="dt">Target</span> eA _) b<span class="op">@</span>(<span class="dt">Target</span> eB _) <span class="ot">=</span> <span class="kw">do</span></span>
<span id="cb24-53"><a href="#cb24-53" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb24-54"><a href="#cb24-54" aria-hidden="true" tabindex="-1"></a>  <span class="co">-- Note: We could have passed in the position of the prospective target,</span></span>
<span id="cb24-55"><a href="#cb24-55" aria-hidden="true" tabindex="-1"></a>  <span class="co">-- but felt a bit rubbish today and just thought I&#39;d keep it simple</span></span>
<span id="cb24-56"><a href="#cb24-56" aria-hidden="true" tabindex="-1"></a>  <span class="dt">Position</span> posA <span class="ot">&lt;-</span> get eA</span>
<span id="cb24-57"><a href="#cb24-57" aria-hidden="true" tabindex="-1"></a>  <span class="dt">Position</span> posB <span class="ot">&lt;-</span> get eB</span>
<span id="cb24-58"><a href="#cb24-58" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb24-59"><a href="#cb24-59" aria-hidden="true" tabindex="-1"></a>  <span class="co">-- Calculate distances to ray origin</span></span>
<span id="cb24-60"><a href="#cb24-60" aria-hidden="true" tabindex="-1"></a>  <span class="kw">let</span> p <span class="ot">=</span> RL.ray&#39;position ray</span>
<span id="cb24-61"><a href="#cb24-61" aria-hidden="true" tabindex="-1"></a>      distA <span class="ot">=</span> magnitudeVector <span class="op">$</span> subtractVectors posA p</span>
<span id="cb24-62"><a href="#cb24-62" aria-hidden="true" tabindex="-1"></a>      distB <span class="ot">=</span> magnitudeVector <span class="op">$</span> subtractVectors posB p</span>
<span id="cb24-63"><a href="#cb24-63" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb24-64"><a href="#cb24-64" aria-hidden="true" tabindex="-1"></a>  <span class="co">-- Return closest target</span></span>
<span id="cb24-65"><a href="#cb24-65" aria-hidden="true" tabindex="-1"></a>  <span class="fu">pure</span> <span class="op">$</span> <span class="kw">if</span> distA <span class="op">&lt;=</span> distB <span class="kw">then</span> a <span class="kw">else</span> b</span>
<span id="cb24-66"><a href="#cb24-66" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb24-67"><a href="#cb24-67" aria-hidden="true" tabindex="-1"></a><span class="co">-- Handle cases where invalid targets present</span></span>
<span id="cb24-68"><a href="#cb24-68" aria-hidden="true" tabindex="-1"></a>getClosestTarget _ a <span class="dt">NoTarget</span> <span class="ot">=</span> <span class="fu">pure</span> a</span>
<span id="cb24-69"><a href="#cb24-69" aria-hidden="true" tabindex="-1"></a>getClosestTarget _ <span class="dt">NoTarget</span> b <span class="ot">=</span> <span class="fu">pure</span> b</span>
<span id="cb24-70"><a href="#cb24-70" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb24-71"><a href="#cb24-71" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb24-72"><a href="#cb24-72" aria-hidden="true" tabindex="-1"></a><span class="co">-- Takes a hit position and determines the looked-at cell</span></span>
<span id="cb24-73"><a href="#cb24-73" aria-hidden="true" tabindex="-1"></a><span class="ot">findCell ::</span> <span class="dt">Vector3</span> <span class="ot">-&gt;</span> <span class="dt">Int</span></span>
<span id="cb24-74"><a href="#cb24-74" aria-hidden="true" tabindex="-1"></a>findCell (<span class="dt">Vector3</span> x y _)</span>
<span id="cb24-75"><a href="#cb24-75" aria-hidden="true" tabindex="-1"></a>  <span class="op">|</span> y <span class="op">&gt;</span> <span class="fl">0.5</span> <span class="ot">=</span> findCol <span class="dv">0</span> <span class="dv">1</span> <span class="dv">2</span></span>
<span id="cb24-76"><a href="#cb24-76" aria-hidden="true" tabindex="-1"></a>  <span class="op">|</span> y <span class="op">&lt;</span> <span class="op">-</span><span class="fl">0.5</span> <span class="ot">=</span> findCol <span class="dv">6</span> <span class="dv">7</span> <span class="dv">8</span></span>
<span id="cb24-77"><a href="#cb24-77" aria-hidden="true" tabindex="-1"></a>  <span class="op">|</span> <span class="fu">otherwise</span> <span class="ot">=</span> findCol <span class="dv">3</span> <span class="dv">4</span> <span class="dv">5</span></span>
<span id="cb24-78"><a href="#cb24-78" aria-hidden="true" tabindex="-1"></a>  <span class="kw">where</span> findCol left center right</span>
<span id="cb24-79"><a href="#cb24-79" aria-hidden="true" tabindex="-1"></a>          <span class="op">|</span> x <span class="op">&lt;</span> <span class="op">-</span><span class="fl">0.5</span> <span class="ot">=</span> left</span>
<span id="cb24-80"><a href="#cb24-80" aria-hidden="true" tabindex="-1"></a>          <span class="op">|</span> x <span class="op">&gt;</span> <span class="fl">0.5</span> <span class="ot">=</span> right</span>
<span id="cb24-81"><a href="#cb24-81" aria-hidden="true" tabindex="-1"></a>          <span class="op">|</span> <span class="fu">otherwise</span> <span class="ot">=</span> center</span>
<span id="cb24-82"><a href="#cb24-82" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb24-83"><a href="#cb24-83" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb24-84"><a href="#cb24-84" aria-hidden="true" tabindex="-1"></a><span class="co">-- Another utility function to get the length / magnitude of a vector3</span></span>
<span id="cb24-85"><a href="#cb24-85" aria-hidden="true" tabindex="-1"></a><span class="ot">magnitudeVector ::</span> <span class="dt">Vector3</span> <span class="ot">-&gt;</span> <span class="dt">Float</span></span>
<span id="cb24-86"><a href="#cb24-86" aria-hidden="true" tabindex="-1"></a>magnitudeVector (<span class="dt">Vector3</span> x y z) <span class="ot">=</span></span>
<span id="cb24-87"><a href="#cb24-87" aria-hidden="true" tabindex="-1"></a>  <span class="kw">let</span> <span class="dt">CFloat</span> f <span class="ot">=</span> <span class="fu">sqrt</span> <span class="op">$</span> (x <span class="op">*</span> x) <span class="op">+</span> (y <span class="op">*</span> y) <span class="op">+</span> (z <span class="op">*</span> z) <span class="kw">in</span> f</span></code></pre></div>
<p>Our <code>PlayerAimComponent</code> is now primed! Let’s render it to prove to ourselves that we’ve completed a major hurdle. As an extra spin, I only want to render these markings if the cell isn’t already filled. We’re going to be pretty much updating all of our rendering logic to accept the <code>LookAtTarget</code> as a new parameter:</p>
<div class="sourceCode" id="cb25"><pre class="sourceCode hs"><code class="sourceCode haskell"><span id="cb25-1"><a href="#cb25-1" aria-hidden="true" tabindex="-1"></a><span class="ot">renderBoards ::</span> <span class="dt">System</span> <span class="dt">World</span> ()</span>
<span id="cb25-2"><a href="#cb25-2" aria-hidden="true" tabindex="-1"></a>renderBoards <span class="ot">=</span> <span class="kw">do</span></span>
<span id="cb25-3"><a href="#cb25-3" aria-hidden="true" tabindex="-1"></a>  <span class="co">-- Give the target from our aim component to renderBoard</span></span>
<span id="cb25-4"><a href="#cb25-4" aria-hidden="true" tabindex="-1"></a>  <span class="dt">Aim</span> _ target <span class="ot">&lt;-</span> get global</span>
<span id="cb25-5"><a href="#cb25-5" aria-hidden="true" tabindex="-1"></a>  cmapM_ (renderBoard target)</span>
<span id="cb25-6"><a href="#cb25-6" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb25-7"><a href="#cb25-7" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb25-8"><a href="#cb25-8" aria-hidden="true" tabindex="-1"></a><span class="co">-- Accept a new parameter and forward it to renderCrosses</span></span>
<span id="cb25-9"><a href="#cb25-9" aria-hidden="true" tabindex="-1"></a><span class="ot">renderBoard ::</span> <span class="dt">LookAtTarget</span> <span class="ot">-&gt;</span> (<span class="dt">BoardComponent</span>, <span class="dt">PositionComponent</span>, <span class="dt">Entity</span>) <span class="ot">-&gt;</span></span>
<span id="cb25-10"><a href="#cb25-10" aria-hidden="true" tabindex="-1"></a>               <span class="dt">System</span> <span class="dt">World</span> ()</span>
<span id="cb25-11"><a href="#cb25-11" aria-hidden="true" tabindex="-1"></a>renderBoard target (b, <span class="dt">Position</span> p, e) <span class="ot">=</span> <span class="kw">do</span></span>
<span id="cb25-12"><a href="#cb25-12" aria-hidden="true" tabindex="-1"></a>  renderCrosses p (b, e) target</span>
<span id="cb25-13"><a href="#cb25-13" aria-hidden="true" tabindex="-1"></a>  <span class="co">-- ...</span></span>
<span id="cb25-14"><a href="#cb25-14" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb25-15"><a href="#cb25-15" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb25-16"><a href="#cb25-16" aria-hidden="true" tabindex="-1"></a><span class="co">-- Each cross now has an index - we need to check if each cross is being</span></span>
<span id="cb25-17"><a href="#cb25-17" aria-hidden="true" tabindex="-1"></a><span class="co">-- aimed at and pass that to renderCross. We have a new function to handle</span></span>
<span id="cb25-18"><a href="#cb25-18" aria-hidden="true" tabindex="-1"></a><span class="co">-- that: isAimingAtCell</span></span>
<span id="cb25-19"><a href="#cb25-19" aria-hidden="true" tabindex="-1"></a><span class="ot">renderCrosses ::</span> <span class="dt">Vector3</span> <span class="ot">-&gt;</span> (<span class="dt">BoardComponent</span>, <span class="dt">Entity</span>) <span class="ot">-&gt;</span> <span class="dt">LookAtTarget</span> <span class="ot">-&gt;</span></span>
<span id="cb25-20"><a href="#cb25-20" aria-hidden="true" tabindex="-1"></a>                 <span class="dt">System</span> <span class="dt">World</span> ()</span>
<span id="cb25-21"><a href="#cb25-21" aria-hidden="true" tabindex="-1"></a>renderCrosses origin (b, e) target <span class="ot">=</span> <span class="kw">do</span></span>
<span id="cb25-22"><a href="#cb25-22" aria-hidden="true" tabindex="-1"></a>  renderCross origin (<span class="op">-</span><span class="dv">1</span>)   <span class="dv">1</span>  (_tl b) (isAimingAtCell e <span class="dv">0</span> target)</span>
<span id="cb25-23"><a href="#cb25-23" aria-hidden="true" tabindex="-1"></a>  renderCross origin   <span class="dv">0</span>    <span class="dv">1</span>  (_tc b) (isAimingAtCell e <span class="dv">1</span> target)</span>
<span id="cb25-24"><a href="#cb25-24" aria-hidden="true" tabindex="-1"></a>  <span class="co">-- ...</span></span>
<span id="cb25-25"><a href="#cb25-25" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb25-26"><a href="#cb25-26" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb25-27"><a href="#cb25-27" aria-hidden="true" tabindex="-1"></a><span class="co">-- Checks if the target is valid, and returns true if entity and cell matches</span></span>
<span id="cb25-28"><a href="#cb25-28" aria-hidden="true" tabindex="-1"></a><span class="ot">isAimingAtCell ::</span> <span class="dt">Entity</span> <span class="ot">-&gt;</span> <span class="dt">Int</span> <span class="ot">-&gt;</span> <span class="dt">LookAtTarget</span> <span class="ot">-&gt;</span> <span class="dt">Bool</span></span>
<span id="cb25-29"><a href="#cb25-29" aria-hidden="true" tabindex="-1"></a>isAimingAtCell (<span class="dt">Entity</span> e) i (<span class="dt">Target</span> (<span class="dt">Entity</span> e&#39;) i&#39;) <span class="ot">=</span> e <span class="op">==</span> e&#39; <span class="op">&amp;&amp;</span> i <span class="op">==</span> i&#39;</span>
<span id="cb25-30"><a href="#cb25-30" aria-hidden="true" tabindex="-1"></a>isAimingAtCell _ _ _ <span class="ot">=</span> <span class="dt">False</span></span>
<span id="cb25-31"><a href="#cb25-31" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb25-32"><a href="#cb25-32" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb25-33"><a href="#cb25-33" aria-hidden="true" tabindex="-1"></a><span class="co">-- This function has another pattern to it depending on whether its aimed at</span></span>
<span id="cb25-34"><a href="#cb25-34" aria-hidden="true" tabindex="-1"></a><span class="ot">renderCross ::</span> <span class="dt">Vector3</span> <span class="ot">-&gt;</span> <span class="dt">Float</span> <span class="ot">-&gt;</span> <span class="dt">Float</span> <span class="ot">-&gt;</span> <span class="dt">Cell</span> <span class="ot">-&gt;</span> <span class="dt">Bool</span> <span class="ot">-&gt;</span> <span class="dt">System</span> <span class="dt">World</span> ()</span>
<span id="cb25-35"><a href="#cb25-35" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb25-36"><a href="#cb25-36" aria-hidden="true" tabindex="-1"></a><span class="co">-- Empty, non-aimed at cells have nothing rendered</span></span>
<span id="cb25-37"><a href="#cb25-37" aria-hidden="true" tabindex="-1"></a>renderCross _ _ _ <span class="dt">Empty</span> <span class="dt">False</span> <span class="ot">=</span> <span class="fu">pure</span> ()</span>
<span id="cb25-38"><a href="#cb25-38" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb25-39"><a href="#cb25-39" aria-hidden="true" tabindex="-1"></a><span class="co">-- Filled cells are rendered as crosses, regardless of aim</span></span>
<span id="cb25-40"><a href="#cb25-40" aria-hidden="true" tabindex="-1"></a>renderCross origin i j <span class="dt">Filled</span> _ <span class="ot">=</span> liftIO <span class="op">$</span> <span class="kw">do</span></span>
<span id="cb25-41"><a href="#cb25-41" aria-hidden="true" tabindex="-1"></a>  RL.drawLine3D (f (<span class="op">-</span><span class="fl">0.4</span>) (<span class="op">-</span><span class="fl">0.4</span>)) (f <span class="fl">0.4</span> <span class="fl">0.4</span>) RL.red</span>
<span id="cb25-42"><a href="#cb25-42" aria-hidden="true" tabindex="-1"></a>  RL.drawLine3D (f <span class="fl">0.4</span> (<span class="op">-</span><span class="fl">0.4</span>)) (f (<span class="op">-</span><span class="fl">0.4</span>) <span class="fl">0.4</span>) RL.red</span>
<span id="cb25-43"><a href="#cb25-43" aria-hidden="true" tabindex="-1"></a>  <span class="kw">where</span> center <span class="ot">=</span> addVectors origin <span class="op">$</span> <span class="dt">Vector3</span> (<span class="dt">CFloat</span> i) (<span class="dt">CFloat</span> j) <span class="dv">0</span></span>
<span id="cb25-44"><a href="#cb25-44" aria-hidden="true" tabindex="-1"></a>        f x y <span class="ot">=</span> addVectors center <span class="op">$</span> <span class="dt">Vector3</span> x y <span class="dv">0</span></span>
<span id="cb25-45"><a href="#cb25-45" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb25-46"><a href="#cb25-46" aria-hidden="true" tabindex="-1"></a><span class="co">-- Otherwise, if we have an empty cell that&#39;s aimed at, render a circle</span></span>
<span id="cb25-47"><a href="#cb25-47" aria-hidden="true" tabindex="-1"></a>renderCross origin i j <span class="dt">Empty</span> <span class="dt">True</span> <span class="ot">=</span> liftIO <span class="op">$</span> <span class="kw">do</span></span>
<span id="cb25-48"><a href="#cb25-48" aria-hidden="true" tabindex="-1"></a>    RL.drawCircle3D center <span class="fl">0.4</span> (<span class="dt">Vector3</span> <span class="dv">0</span> <span class="dv">1</span> <span class="dv">0</span>) <span class="dv">0</span> RL.yellow</span>
<span id="cb25-49"><a href="#cb25-49" aria-hidden="true" tabindex="-1"></a>  <span class="kw">where</span> center <span class="ot">=</span> addVectors origin <span class="op">$</span> <span class="dt">Vector3</span> (<span class="dt">CFloat</span> i) (<span class="dt">CFloat</span> j) <span class="dv">0</span></span></code></pre></div>
<p>And with this, it’s game over! From now on it’s mostly gameplay code, and hopefully everything we do can is reflected by our rendering! Well done if you’ve made it this far; like with most games, the rendering can easily eat up a lot of our time. I’m sure the only rendering we’ll do from now on will be trivial.</p>
<div class="figure" data-image="https://res.cloudinary.com/aas-sh/image/upload/v1668959570/blog/2022/11/20-11-2022_15_52_00_njlrim.png" data-caption="We can now aim at cells, rendering the game is pretty much complete!" data-source="Notakto" data-sourceUrl="https://github.com/Ashe/Notakto/tree/38d84524d96e21050e8dca6f1ec944f675d966d4">

</div>
<div class="gitrepo" data-header="Notakto">
<p>A link to the corresponding commit for the previous section can be found <a href="https://github.com/Ashe/Notakto/tree/38d84524d96e21050e8dca6f1ec944f675d966d4">here</a>.</p>
</div>
<h2 id="placing-crosses-dynamically">Placing crosses dynamically</h2>
<p>I don’t know about you, but I really hate the fact that this blog post so far has been mostly rendering! Isn’t this meant to be a blog about <a href="https://hackage.haskell.org/package/apecs">Apecs</a>?! Well, let’s fix that by finishing our game and coming up with more entities, components and systems! First up are a set of systems to handle playing the game.</p>
<p>So far, our game has been doing all of our systems every single frame — we need to have some logic ran conditionally:</p>
<ul>
<li><strong>Obviously, we need to place crosses when we click:</strong> We wouldn’t want this running every frame as the game would be unplayable!</li>
<li><strong>When we get three-in-a-row we need to kill the board:</strong> The state of the game only changes when moves are made, so this can also be ran on left click; it would be redundant otherwise!</li>
<li><strong>We need to check for game-over when a board is killed:</strong> When there are no boards remaining, the current player is the loser and the winner is decided. Again, this relies on state being changed, so we’re slowly moving away from frames to turns.</li>
<li><strong>We need to switch players:</strong> We have no concept of players yet, but when we do, we will be switching who’s turn it is as well as incrementing stats of whatever sort after checking for game-over and it being decided that play should be continued.</li>
</ul>
<div class="sourceCode" id="cb26"><pre class="sourceCode hs"><code class="sourceCode haskell"><span id="cb26-1"><a href="#cb26-1" aria-hidden="true" tabindex="-1"></a><span class="ot">update ::</span> <span class="dt">System</span> <span class="dt">World</span> ()</span>
<span id="cb26-2"><a href="#cb26-2" aria-hidden="true" tabindex="-1"></a>update <span class="ot">=</span> <span class="kw">do</span></span>
<span id="cb26-3"><a href="#cb26-3" aria-hidden="true" tabindex="-1"></a>  updateCamera</span>
<span id="cb26-4"><a href="#cb26-4" aria-hidden="true" tabindex="-1"></a>  handlePlayerAim</span>
<span id="cb26-5"><a href="#cb26-5" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb26-6"><a href="#cb26-6" aria-hidden="true" tabindex="-1"></a>  <span class="co">-- After aiming, we want to handle clicking</span></span>
<span id="cb26-7"><a href="#cb26-7" aria-hidden="true" tabindex="-1"></a>  clicked <span class="ot">&lt;-</span> liftIO <span class="op">$</span> RL.isMouseButtonPressed <span class="dv">0</span></span>
<span id="cb26-8"><a href="#cb26-8" aria-hidden="true" tabindex="-1"></a>  when clicked <span class="op">$</span> <span class="kw">do</span></span>
<span id="cb26-9"><a href="#cb26-9" aria-hidden="true" tabindex="-1"></a>    handleLeftClick</span>
<span id="cb26-10"><a href="#cb26-10" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb26-11"><a href="#cb26-11" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb26-12"><a href="#cb26-12" aria-hidden="true" tabindex="-1"></a><span class="co">-- Handles everything that may happen following a left-click</span></span>
<span id="cb26-13"><a href="#cb26-13" aria-hidden="true" tabindex="-1"></a><span class="ot">handleLeftClick ::</span> <span class="dt">System</span> <span class="dt">World</span> ()</span>
<span id="cb26-14"><a href="#cb26-14" aria-hidden="true" tabindex="-1"></a>handleLeftClick <span class="ot">=</span> <span class="kw">do</span></span>
<span id="cb26-15"><a href="#cb26-15" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb26-16"><a href="#cb26-16" aria-hidden="true" tabindex="-1"></a>  <span class="co">-- Try and place a cross, and print a message when successful</span></span>
<span id="cb26-17"><a href="#cb26-17" aria-hidden="true" tabindex="-1"></a>  moveMade <span class="ot">&lt;-</span> tryPlaceCross</span>
<span id="cb26-18"><a href="#cb26-18" aria-hidden="true" tabindex="-1"></a>  when moveMade <span class="op">$</span> <span class="kw">do</span></span>
<span id="cb26-19"><a href="#cb26-19" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb26-20"><a href="#cb26-20" aria-hidden="true" tabindex="-1"></a>    <span class="co">-- Note: This is where we&#39;ll check for game-over later</span></span>
<span id="cb26-21"><a href="#cb26-21" aria-hidden="true" tabindex="-1"></a>    liftIO <span class="op">$</span> <span class="fu">putStrLn</span> <span class="st">&quot;Move Made!&quot;</span></span>
<span id="cb26-22"><a href="#cb26-22" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb26-23"><a href="#cb26-23" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb26-24"><a href="#cb26-24" aria-hidden="true" tabindex="-1"></a><span class="co">-- This system returns true if a new cross is placed on the board</span></span>
<span id="cb26-25"><a href="#cb26-25" aria-hidden="true" tabindex="-1"></a><span class="ot">tryPlaceCross ::</span> <span class="dt">System</span> <span class="dt">World</span> <span class="dt">Bool</span></span>
<span id="cb26-26"><a href="#cb26-26" aria-hidden="true" tabindex="-1"></a>tryPlaceCross <span class="ot">=</span> <span class="kw">do</span></span>
<span id="cb26-27"><a href="#cb26-27" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb26-28"><a href="#cb26-28" aria-hidden="true" tabindex="-1"></a>  <span class="co">-- Get the player&#39;s target</span></span>
<span id="cb26-29"><a href="#cb26-29" aria-hidden="true" tabindex="-1"></a>  <span class="dt">Aim</span> _ target <span class="ot">&lt;-</span> get global</span>
<span id="cb26-30"><a href="#cb26-30" aria-hidden="true" tabindex="-1"></a>  <span class="kw">case</span> target <span class="kw">of</span></span>
<span id="cb26-31"><a href="#cb26-31" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb26-32"><a href="#cb26-32" aria-hidden="true" tabindex="-1"></a>    <span class="co">-- Do nothing if there is no target</span></span>
<span id="cb26-33"><a href="#cb26-33" aria-hidden="true" tabindex="-1"></a>    <span class="dt">NoTarget</span> <span class="ot">-&gt;</span> <span class="fu">pure</span> <span class="dt">False</span></span>
<span id="cb26-34"><a href="#cb26-34" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb26-35"><a href="#cb26-35" aria-hidden="true" tabindex="-1"></a>    <span class="co">-- If there is a target, try to mutate the state of the board</span></span>
<span id="cb26-36"><a href="#cb26-36" aria-hidden="true" tabindex="-1"></a>    <span class="dt">Target</span> e i <span class="ot">-&gt;</span> <span class="kw">do</span></span>
<span id="cb26-37"><a href="#cb26-37" aria-hidden="true" tabindex="-1"></a>      board <span class="ot">&lt;-</span> get e</span>
<span id="cb26-38"><a href="#cb26-38" aria-hidden="true" tabindex="-1"></a>      <span class="kw">if</span> getCell board i <span class="op">==</span> <span class="dt">Empty</span> <span class="kw">then</span> <span class="kw">do</span></span>
<span id="cb26-39"><a href="#cb26-39" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb26-40"><a href="#cb26-40" aria-hidden="true" tabindex="-1"></a>        <span class="co">-- We set the component on the entity here directly,</span></span>
<span id="cb26-41"><a href="#cb26-41" aria-hidden="true" tabindex="-1"></a>        <span class="co">-- if you&#39;re doing this on lots of entities you should be using cmap</span></span>
<span id="cb26-42"><a href="#cb26-42" aria-hidden="true" tabindex="-1"></a>        set e <span class="op">$</span> setCell board i <span class="dt">Filled</span></span>
<span id="cb26-43"><a href="#cb26-43" aria-hidden="true" tabindex="-1"></a>        <span class="fu">pure</span> <span class="dt">True</span></span>
<span id="cb26-44"><a href="#cb26-44" aria-hidden="true" tabindex="-1"></a>      <span class="kw">else</span></span>
<span id="cb26-45"><a href="#cb26-45" aria-hidden="true" tabindex="-1"></a>        <span class="fu">pure</span> <span class="dt">False</span></span>
<span id="cb26-46"><a href="#cb26-46" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb26-47"><a href="#cb26-47" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb26-48"><a href="#cb26-48" aria-hidden="true" tabindex="-1"></a><span class="co">-- Convenience function for retrieving a cell by-index</span></span>
<span id="cb26-49"><a href="#cb26-49" aria-hidden="true" tabindex="-1"></a><span class="ot">getCell ::</span> <span class="dt">BoardComponent</span> <span class="ot">-&gt;</span> <span class="dt">Int</span> <span class="ot">-&gt;</span> <span class="dt">Cell</span></span>
<span id="cb26-50"><a href="#cb26-50" aria-hidden="true" tabindex="-1"></a>getCell b <span class="dv">0</span> <span class="ot">=</span>_tl b</span>
<span id="cb26-51"><a href="#cb26-51" aria-hidden="true" tabindex="-1"></a>getCell b <span class="dv">1</span> <span class="ot">=</span>_tc b</span>
<span id="cb26-52"><a href="#cb26-52" aria-hidden="true" tabindex="-1"></a>getCell b <span class="dv">2</span> <span class="ot">=</span>_tr b</span>
<span id="cb26-53"><a href="#cb26-53" aria-hidden="true" tabindex="-1"></a><span class="co">-- ...</span></span>
<span id="cb26-54"><a href="#cb26-54" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb26-55"><a href="#cb26-55" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb26-56"><a href="#cb26-56" aria-hidden="true" tabindex="-1"></a><span class="co">-- Convenience function for setting a cell by-index</span></span>
<span id="cb26-57"><a href="#cb26-57" aria-hidden="true" tabindex="-1"></a><span class="ot">setCell ::</span> <span class="dt">BoardComponent</span> <span class="ot">-&gt;</span> <span class="dt">Int</span> <span class="ot">-&gt;</span> <span class="dt">Cell</span> <span class="ot">-&gt;</span> <span class="dt">BoardComponent</span></span>
<span id="cb26-58"><a href="#cb26-58" aria-hidden="true" tabindex="-1"></a>setCell b <span class="dv">0</span> c <span class="ot">=</span> b { _tl <span class="ot">=</span> c }</span>
<span id="cb26-59"><a href="#cb26-59" aria-hidden="true" tabindex="-1"></a>setCell b <span class="dv">1</span> c <span class="ot">=</span> b { _tc <span class="ot">=</span> c }</span>
<span id="cb26-60"><a href="#cb26-60" aria-hidden="true" tabindex="-1"></a>setCell b <span class="dv">2</span> c <span class="ot">=</span> b { _tr <span class="ot">=</span> c }</span>
<span id="cb26-61"><a href="#cb26-61" aria-hidden="true" tabindex="-1"></a><span class="co">-- ...</span></span></code></pre></div>
<p>If you give the game a try now, you’ll be happy to see that, as expected, we can now place crosses when we click the mouse button. We have a lot of momentum now, let’s not stop here and move onto finishing the game loop itself!</p>
<div class="gitrepo" data-header="Notakto">
<p>A link to the corresponding commit for the previous section can be found <a href="https://github.com/Ashe/Notakto/tree/c740a55ee514d1d7d93dda38f4cdfd9a2a079fcb">here</a>.</p>
</div>
<h2 id="killing-boards">Killing boards</h2>
<p>The rules of Notakto state that when a three-in-a-row is detected, a board is declared ‘dead’ and can no longer be played on; when there are no boards remaining, the game is over and the current player loses. Killing boards is just as important as making moves on a single board, however fortunately for us this won’t be difficult at all to pull off with the tools we have.</p>
<ol type="1">
<li><strong>We will create a new component that we attach to boards to render them dead:</strong> We <em>could</em> calculate if a board is dead every time we need to know, but this will add up especially if we want to render this somehow. If we use a component, we can trivially iterate through alive and dead boards.</li>
<li><strong>We will count the dead boards:</strong> We will use <code>cfold</code> to count the number of boards that are alive, and if this number is 0 we will declare the game to be over.</li>
<li><strong>We will <em>not</em> render dead boards:</strong> I’m stick of doing rendering in this tutorial. I’m going to force the players to manually check the state of the board for whether they’re playable — it’s not a <em>missing feature</em>, it’s a <strong><em>skill check</em></strong>.</li>
</ol>
<div class="sourceCode" id="cb27"><pre class="sourceCode hs"><code class="sourceCode haskell"><span id="cb27-1"><a href="#cb27-1" aria-hidden="true" tabindex="-1"></a><span class="co">-- New component with a unary data constructor</span></span>
<span id="cb27-2"><a href="#cb27-2" aria-hidden="true" tabindex="-1"></a><span class="co">-- Note: To test for absense, we will be using the type Not DeathComponent</span></span>
<span id="cb27-3"><a href="#cb27-3" aria-hidden="true" tabindex="-1"></a><span class="kw">data</span> <span class="dt">DeathComponent</span> <span class="ot">=</span> <span class="dt">Dead</span> <span class="kw">deriving</span> (<span class="dt">Show</span>, <span class="dt">Eq</span>)</span>
<span id="cb27-4"><a href="#cb27-4" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb27-5"><a href="#cb27-5" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb27-6"><a href="#cb27-6" aria-hidden="true" tabindex="-1"></a><span class="co">-- New system that will kill any boards with three-in-a-row and</span></span>
<span id="cb27-7"><a href="#cb27-7" aria-hidden="true" tabindex="-1"></a><span class="co">-- then return if there&#39;s a game-over</span></span>
<span id="cb27-8"><a href="#cb27-8" aria-hidden="true" tabindex="-1"></a><span class="ot">checkForGameOver ::</span> <span class="dt">System</span> <span class="dt">World</span> <span class="dt">Bool</span></span>
<span id="cb27-9"><a href="#cb27-9" aria-hidden="true" tabindex="-1"></a>checkForGameOver <span class="ot">=</span> <span class="kw">do</span></span>
<span id="cb27-10"><a href="#cb27-10" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb27-11"><a href="#cb27-11" aria-hidden="true" tabindex="-1"></a>  <span class="co">-- Map a function onto all entities with boards, killing them if possible</span></span>
<span id="cb27-12"><a href="#cb27-12" aria-hidden="true" tabindex="-1"></a>  cmap tryKillBoard</span>
<span id="cb27-13"><a href="#cb27-13" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb27-14"><a href="#cb27-14" aria-hidden="true" tabindex="-1"></a>  <span class="co">-- Count the number of boards that are alive (lack of death component)</span></span>
<span id="cb27-15"><a href="#cb27-15" aria-hidden="true" tabindex="-1"></a>  <span class="kw">let</span><span class="ot"> countAlive ::</span> <span class="dt">Int</span> <span class="ot">-&gt;</span> (<span class="dt">BoardComponent</span>, <span class="dt">Not</span> <span class="dt">DeathComponent</span>) <span class="ot">-&gt;</span> <span class="dt">Int</span></span>
<span id="cb27-16"><a href="#cb27-16" aria-hidden="true" tabindex="-1"></a>      countAlive c (_, _) <span class="ot">=</span> c <span class="op">+</span> <span class="dv">1</span></span>
<span id="cb27-17"><a href="#cb27-17" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb27-18"><a href="#cb27-18" aria-hidden="true" tabindex="-1"></a>  <span class="co">-- Perform the counting and return true if all boards dead</span></span>
<span id="cb27-19"><a href="#cb27-19" aria-hidden="true" tabindex="-1"></a>  count <span class="ot">&lt;-</span> cfold countAlive <span class="dv">0</span></span>
<span id="cb27-20"><a href="#cb27-20" aria-hidden="true" tabindex="-1"></a>  <span class="fu">pure</span> <span class="op">$</span> count <span class="op">&lt;=</span> <span class="dv">0</span></span>
<span id="cb27-21"><a href="#cb27-21" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb27-22"><a href="#cb27-22" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb27-23"><a href="#cb27-23" aria-hidden="true" tabindex="-1"></a><span class="co">-- Note the type signature; we use &#39;Not&#39; to exclude dead boards</span></span>
<span id="cb27-24"><a href="#cb27-24" aria-hidden="true" tabindex="-1"></a><span class="co">-- Another thing to note is that we return &#39;Maybe DeathComponent&#39;,</span></span>
<span id="cb27-25"><a href="#cb27-25" aria-hidden="true" tabindex="-1"></a><span class="co">-- this hints that we may or may not be adding a component to the entity</span></span>
<span id="cb27-26"><a href="#cb27-26" aria-hidden="true" tabindex="-1"></a><span class="ot">tryKillBoard ::</span> (<span class="dt">BoardComponent</span>, <span class="dt">Not</span> <span class="dt">DeathComponent</span>) <span class="ot">-&gt;</span> <span class="dt">Maybe</span> <span class="dt">DeathComponent</span></span>
<span id="cb27-27"><a href="#cb27-27" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb27-28"><a href="#cb27-28" aria-hidden="true" tabindex="-1"></a><span class="co">-- Just Dead will add the DeathComponent, Nothing will add nothing</span></span>
<span id="cb27-29"><a href="#cb27-29" aria-hidden="true" tabindex="-1"></a>tryKillBoard (bc, _) <span class="ot">=</span> <span class="kw">if</span> check cellCombos <span class="kw">then</span> <span class="dt">Just</span> <span class="dt">Dead</span> <span class="kw">else</span> <span class="dt">Nothing</span></span>
<span id="cb27-30"><a href="#cb27-30" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb27-31"><a href="#cb27-31" aria-hidden="true" tabindex="-1"></a>  <span class="co">-- Fold through a list of combos and check if any are threes-in-a-row</span></span>
<span id="cb27-32"><a href="#cb27-32" aria-hidden="true" tabindex="-1"></a>  <span class="kw">where</span> check <span class="ot">=</span> <span class="fu">foldl</span> (\dead (a, b, c) <span class="ot">-&gt;</span> dead <span class="op">||</span> checkCombo a b c) <span class="dt">False</span></span>
<span id="cb27-33"><a href="#cb27-33" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb27-34"><a href="#cb27-34" aria-hidden="true" tabindex="-1"></a>        <span class="co">-- Check if all cells in a combination are filled, meaning a win</span></span>
<span id="cb27-35"><a href="#cb27-35" aria-hidden="true" tabindex="-1"></a>        checkCombo a b c <span class="ot">=</span> checkCell a <span class="op">&amp;&amp;</span> checkCell b <span class="op">&amp;&amp;</span> checkCell c</span>
<span id="cb27-36"><a href="#cb27-36" aria-hidden="true" tabindex="-1"></a>        checkCell c <span class="ot">=</span> getCell bc c <span class="op">==</span> <span class="dt">Filled</span></span>
<span id="cb27-37"><a href="#cb27-37" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb27-38"><a href="#cb27-38" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb27-39"><a href="#cb27-39" aria-hidden="true" tabindex="-1"></a><span class="co">-- A list of all cell combinations in index form (to be used with getCell)</span></span>
<span id="cb27-40"><a href="#cb27-40" aria-hidden="true" tabindex="-1"></a><span class="ot">cellCombos ::</span> [(<span class="dt">Int</span>, <span class="dt">Int</span>, <span class="dt">Int</span>)]</span>
<span id="cb27-41"><a href="#cb27-41" aria-hidden="true" tabindex="-1"></a>cellCombos <span class="ot">=</span> [</span>
<span id="cb27-42"><a href="#cb27-42" aria-hidden="true" tabindex="-1"></a>  <span class="co">-- Horizontal</span></span>
<span id="cb27-43"><a href="#cb27-43" aria-hidden="true" tabindex="-1"></a>  (<span class="dv">0</span>, <span class="dv">1</span>, <span class="dv">2</span>),</span>
<span id="cb27-44"><a href="#cb27-44" aria-hidden="true" tabindex="-1"></a>  (<span class="dv">3</span>, <span class="dv">4</span>, <span class="dv">5</span>),</span>
<span id="cb27-45"><a href="#cb27-45" aria-hidden="true" tabindex="-1"></a>  (<span class="dv">6</span>, <span class="dv">7</span>, <span class="dv">8</span>),</span>
<span id="cb27-46"><a href="#cb27-46" aria-hidden="true" tabindex="-1"></a>  <span class="co">-- Vertical</span></span>
<span id="cb27-47"><a href="#cb27-47" aria-hidden="true" tabindex="-1"></a>  (<span class="dv">0</span>, <span class="dv">3</span>, <span class="dv">6</span>),</span>
<span id="cb27-48"><a href="#cb27-48" aria-hidden="true" tabindex="-1"></a>  (<span class="dv">1</span>, <span class="dv">4</span>, <span class="dv">7</span>),</span>
<span id="cb27-49"><a href="#cb27-49" aria-hidden="true" tabindex="-1"></a>  (<span class="dv">2</span>, <span class="dv">5</span>, <span class="dv">8</span>),</span>
<span id="cb27-50"><a href="#cb27-50" aria-hidden="true" tabindex="-1"></a>  <span class="co">-- Diagonal</span></span>
<span id="cb27-51"><a href="#cb27-51" aria-hidden="true" tabindex="-1"></a>  (<span class="dv">0</span>, <span class="dv">4</span>, <span class="dv">8</span>),</span>
<span id="cb27-52"><a href="#cb27-52" aria-hidden="true" tabindex="-1"></a>  (<span class="dv">2</span>, <span class="dv">4</span>, <span class="dv">6</span>)</span>
<span id="cb27-53"><a href="#cb27-53" aria-hidden="true" tabindex="-1"></a>  ]</span></code></pre></div>
<p>You may think that’s it, but now we need to sprinkle mention of the <code>DeathComponent</code> to places where we don’t want interactions with dead boards. After looking through the code, I can only think of one place, but you might have more:</p>
<div class="sourceCode" id="cb28"><pre class="sourceCode hs"><code class="sourceCode haskell"><span id="cb28-1"><a href="#cb28-1" aria-hidden="true" tabindex="-1"></a><span class="ot">findLookAtTarget ::</span> <span class="dt">RL.Ray</span> <span class="ot">-&gt;</span> <span class="dt">LookAtTarget</span> <span class="ot">-&gt;</span> (<span class="dt">BoardComponent</span>,</span>
<span id="cb28-2"><a href="#cb28-2" aria-hidden="true" tabindex="-1"></a>                    <span class="dt">PositionComponent</span>, <span class="dt">Not</span> <span class="dt">DeathComponent</span>, <span class="dt">Entity</span>) <span class="ot">-&gt;</span></span>
<span id="cb28-3"><a href="#cb28-3" aria-hidden="true" tabindex="-1"></a>                    <span class="dt">System</span> <span class="dt">World</span> <span class="dt">LookAtTarget</span></span></code></pre></div>
<p>If you want to special rendering for dead boards, now is the time! You might even want to update the death component to contain data regarding the winning combination for easy access!</p>
<p>Let’s now use our new system in the game and print a message if the game is over:</p>
<div class="sourceCode" id="cb29"><pre class="sourceCode hs"><code class="sourceCode haskell"><span id="cb29-1"><a href="#cb29-1" aria-hidden="true" tabindex="-1"></a><span class="ot">handleLeftClick ::</span> <span class="dt">System</span> <span class="dt">World</span> ()</span>
<span id="cb29-2"><a href="#cb29-2" aria-hidden="true" tabindex="-1"></a>handleLeftClick <span class="ot">=</span> <span class="kw">do</span></span>
<span id="cb29-3"><a href="#cb29-3" aria-hidden="true" tabindex="-1"></a>  moveMade <span class="ot">&lt;-</span> tryPlaceCross</span>
<span id="cb29-4"><a href="#cb29-4" aria-hidden="true" tabindex="-1"></a>  when moveMade <span class="op">$</span> <span class="kw">do</span></span>
<span id="cb29-5"><a href="#cb29-5" aria-hidden="true" tabindex="-1"></a>    isGameOver <span class="ot">&lt;-</span> checkForGameOver</span>
<span id="cb29-6"><a href="#cb29-6" aria-hidden="true" tabindex="-1"></a>    <span class="kw">if</span> isGameOver <span class="kw">then</span></span>
<span id="cb29-7"><a href="#cb29-7" aria-hidden="true" tabindex="-1"></a>      liftIO <span class="op">$</span> <span class="fu">putStrLn</span> <span class="st">&quot;Game over!&quot;</span></span>
<span id="cb29-8"><a href="#cb29-8" aria-hidden="true" tabindex="-1"></a>    <span class="kw">else</span></span>
<span id="cb29-9"><a href="#cb29-9" aria-hidden="true" tabindex="-1"></a>      liftIO <span class="op">$</span> <span class="fu">putStrLn</span> <span class="st">&quot;Next turn!&quot;</span></span></code></pre></div>
<div class="figure" data-image="https://res.cloudinary.com/aas-sh/image/upload/v1668969610/blog/2022/11/20-11-2022_18_39_47_svchfm.png" data-caption="We can now detect a game over --- it&#39;s all coming together!" data-source="Notakto" data-sourceUrl="https://github.com/Ashe/Notakto/tree/e6f589f3661fd8070ef977021174edb3ca808188">

</div>
<h2 id="restarting-the-game">Restarting the game</h2>
<p>Before we finish this chapter, let’s handle restarting the game as it’s very related to the previous section! Firstly, even though we named the function <code>checkForGameOver</code>, this function is also responsible for killing boards. Let’s do this elsewhere so that this function is purely a check, this way we can reuse it without worry!</p>
<div class="sourceCode" id="cb30"><pre class="sourceCode hs"><code class="sourceCode haskell"><span id="cb30-1"><a href="#cb30-1" aria-hidden="true" tabindex="-1"></a><span class="ot">handleLeftClick ::</span> <span class="dt">System</span> <span class="dt">World</span> ()</span>
<span id="cb30-2"><a href="#cb30-2" aria-hidden="true" tabindex="-1"></a>handleLeftClick <span class="ot">=</span> <span class="kw">do</span></span>
<span id="cb30-3"><a href="#cb30-3" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb30-4"><a href="#cb30-4" aria-hidden="true" tabindex="-1"></a>  <span class="co">-- Check if the game is already over before making a move</span></span>
<span id="cb30-5"><a href="#cb30-5" aria-hidden="true" tabindex="-1"></a>  needsRestart <span class="ot">&lt;-</span> checkForGameOver</span>
<span id="cb30-6"><a href="#cb30-6" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb30-7"><a href="#cb30-7" aria-hidden="true" tabindex="-1"></a>  <span class="co">-- Only make moves if the game isn&#39;t over</span></span>
<span id="cb30-8"><a href="#cb30-8" aria-hidden="true" tabindex="-1"></a>  <span class="kw">if</span> <span class="fu">not</span> needsRestart <span class="kw">then</span> <span class="kw">do</span></span>
<span id="cb30-9"><a href="#cb30-9" aria-hidden="true" tabindex="-1"></a>    moveMade <span class="ot">&lt;-</span> tryPlaceCross</span>
<span id="cb30-10"><a href="#cb30-10" aria-hidden="true" tabindex="-1"></a>    when moveMade <span class="op">$</span> <span class="kw">do</span></span>
<span id="cb30-11"><a href="#cb30-11" aria-hidden="true" tabindex="-1"></a>      cmap tryKillBoard</span>
<span id="cb30-12"><a href="#cb30-12" aria-hidden="true" tabindex="-1"></a>      isGameOver <span class="ot">&lt;-</span> checkForGameOver</span>
<span id="cb30-13"><a href="#cb30-13" aria-hidden="true" tabindex="-1"></a>      <span class="kw">if</span> isGameOver <span class="kw">then</span></span>
<span id="cb30-14"><a href="#cb30-14" aria-hidden="true" tabindex="-1"></a>        liftIO <span class="op">$</span> <span class="fu">putStrLn</span> <span class="st">&quot;Game over!&quot;</span></span>
<span id="cb30-15"><a href="#cb30-15" aria-hidden="true" tabindex="-1"></a>      <span class="kw">else</span></span>
<span id="cb30-16"><a href="#cb30-16" aria-hidden="true" tabindex="-1"></a>        liftIO <span class="op">$</span> <span class="fu">putStrLn</span> <span class="st">&quot;Next turn!&quot;</span></span>
<span id="cb30-17"><a href="#cb30-17" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb30-18"><a href="#cb30-18" aria-hidden="true" tabindex="-1"></a>  <span class="co">-- Otherwise, restart the game</span></span>
<span id="cb30-19"><a href="#cb30-19" aria-hidden="true" tabindex="-1"></a>  <span class="kw">else</span> <span class="kw">do</span></span>
<span id="cb30-20"><a href="#cb30-20" aria-hidden="true" tabindex="-1"></a>    newGame</span>
<span id="cb30-21"><a href="#cb30-21" aria-hidden="true" tabindex="-1"></a>    liftIO <span class="op">$</span> <span class="fu">putStrLn</span> <span class="st">&quot;Restarted game!&quot;</span></span>
<span id="cb30-22"><a href="#cb30-22" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb30-23"><a href="#cb30-23" aria-hidden="true" tabindex="-1"></a><span class="co">-- New initialisation function that deletes all entities</span></span>
<span id="cb30-24"><a href="#cb30-24" aria-hidden="true" tabindex="-1"></a><span class="ot">newGame ::</span> <span class="dt">System</span> <span class="dt">World</span> ()</span>
<span id="cb30-25"><a href="#cb30-25" aria-hidden="true" tabindex="-1"></a>newGame <span class="ot">=</span> <span class="kw">do</span></span>
<span id="cb30-26"><a href="#cb30-26" aria-hidden="true" tabindex="-1"></a>  cmapM_ deleteBoard</span>
<span id="cb30-27"><a href="#cb30-27" aria-hidden="true" tabindex="-1"></a>  createBoards <span class="dv">3</span></span>
<span id="cb30-28"><a href="#cb30-28" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb30-29"><a href="#cb30-29" aria-hidden="true" tabindex="-1"></a>  <span class="co">-- You can&#39;t really &#39;delete&#39; entities in Apecs since entities are just ints;</span></span>
<span id="cb30-30"><a href="#cb30-30" aria-hidden="true" tabindex="-1"></a>  <span class="co">-- you have to delete their components. We use a convenience function.</span></span>
<span id="cb30-31"><a href="#cb30-31" aria-hidden="true" tabindex="-1"></a>  <span class="kw">where</span> deleteBoard (<span class="dt">Board</span>{}, e) <span class="ot">=</span> destroyEntity e</span>
<span id="cb30-32"><a href="#cb30-32" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb30-33"><a href="#cb30-33" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb30-34"><a href="#cb30-34" aria-hidden="true" tabindex="-1"></a><span class="co">-- We make a type combining all types for miscellaneous use</span></span>
<span id="cb30-35"><a href="#cb30-35" aria-hidden="true" tabindex="-1"></a><span class="kw">type</span> <span class="dt">AllComponents</span> <span class="ot">=</span> (<span class="dt">PositionComponent</span>, <span class="dt">CameraComponent</span>, <span class="dt">BoardComponent</span>,</span>
<span id="cb30-36"><a href="#cb30-36" aria-hidden="true" tabindex="-1"></a>  <span class="dt">DeathComponent</span>, <span class="dt">PlayerAimComponent</span>)</span>
<span id="cb30-37"><a href="#cb30-37" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb30-38"><a href="#cb30-38" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb30-39"><a href="#cb30-39" aria-hidden="true" tabindex="-1"></a><span class="co">-- Trivial deletion function</span></span>
<span id="cb30-40"><a href="#cb30-40" aria-hidden="true" tabindex="-1"></a><span class="ot">destroyEntity ::</span> <span class="dt">Entity</span> <span class="ot">-&gt;</span> <span class="dt">System</span> <span class="dt">World</span> ()</span>
<span id="cb30-41"><a href="#cb30-41" aria-hidden="true" tabindex="-1"></a>destroyEntity e <span class="ot">=</span> destroy e (<span class="dt">Proxy</span><span class="ot"> ::</span> <span class="dt">Proxy</span> <span class="dt">AllComponents</span>)</span></code></pre></div>
<p>Deletion in Apecs can be a little tricky, but as the author writes in <a href="https://github.com/jonascarpay/apecs/issues/13#issuecomment-392630286">this comment</a>, as long as we obliterate any components on an entity it will stop having any effect on the application!</p>
<div class="caption" data-caption="Apecs author Jonascarpay talking about deletion in Apecs." data-source="Github" data-sourceUrl="https://github.com/jonascarpay/apecs/issues/13#issuecomment-392630286">
<blockquote>
<p>You can’t destroy an entity, you can only destroy each of its components. An Entity is just an integer that may or may not some components associated with it. There is currently no way to destroy all components for a given entity.</p>
<p>I might add some support for this in the future, but if you use type synonyms for common tuples, it shouldn’t be an issue.</p>
</blockquote>
</div>
<p>Well done, you can now play, complete and restart games! If you were to track turns and play with a friend, you could call this the end and enjoy it! There’s one final thing I want to do before I call quits and leave the rest up to you: creating the notion of players!</p>
<div class="gitrepo" data-header="Notakto">
<p>A link to the corresponding commit for the previous section can be found <a href="https://github.com/Ashe/Notakto/tree/63f686a4ae9fcba150c04b0605c2b4d781af2012">here</a>.</p>
</div>
<h2 id="making-players-take-turns">Making players take turns</h2>
<p>The game is essentially complete, but we don’t really track the current player anywhere! I’m going to leave out the rendering and purely focus on the components and systems as I’m sure anyone reading this can fill in the gaps.</p>
<div class="sourceCode" id="cb31"><pre class="sourceCode hs"><code class="sourceCode haskell"><span id="cb31-1"><a href="#cb31-1" aria-hidden="true" tabindex="-1"></a><span class="co">-- New component for tracking the current player</span></span>
<span id="cb31-2"><a href="#cb31-2" aria-hidden="true" tabindex="-1"></a><span class="kw">data</span> <span class="dt">PlayerComponent</span> <span class="ot">=</span> <span class="dt">Red</span> <span class="op">|</span> <span class="dt">Blue</span> <span class="kw">deriving</span> (<span class="dt">Show</span>, <span class="dt">Eq</span>)</span>
<span id="cb31-3"><a href="#cb31-3" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb31-4"><a href="#cb31-4" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb31-5"><a href="#cb31-5" aria-hidden="true" tabindex="-1"></a><span class="co">-- Initialise the current player when we initialise the camera</span></span>
<span id="cb31-6"><a href="#cb31-6" aria-hidden="true" tabindex="-1"></a>set global <span class="op">$</span> (<span class="dt">Camera</span> camera, <span class="dt">Red</span>)</span>
<span id="cb31-7"><a href="#cb31-7" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb31-8"><a href="#cb31-8" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb31-9"><a href="#cb31-9" aria-hidden="true" tabindex="-1"></a><span class="co">-- Switch players when a non-winning move is made</span></span>
<span id="cb31-10"><a href="#cb31-10" aria-hidden="true" tabindex="-1"></a><span class="ot">handleLeftClick ::</span> <span class="dt">System</span> <span class="dt">World</span> ()</span>
<span id="cb31-11"><a href="#cb31-11" aria-hidden="true" tabindex="-1"></a>handleLeftClick <span class="ot">=</span> <span class="kw">do</span></span>
<span id="cb31-12"><a href="#cb31-12" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb31-13"><a href="#cb31-13" aria-hidden="true" tabindex="-1"></a>  <span class="co">-- Grab current player</span></span>
<span id="cb31-14"><a href="#cb31-14" aria-hidden="true" tabindex="-1"></a>  player <span class="ot">&lt;-</span> get global</span>
<span id="cb31-15"><a href="#cb31-15" aria-hidden="true" tabindex="-1"></a>  needsRestart <span class="ot">&lt;-</span> checkForGameOver</span>
<span id="cb31-16"><a href="#cb31-16" aria-hidden="true" tabindex="-1"></a>  <span class="kw">if</span> <span class="fu">not</span> needsRestart <span class="kw">then</span> <span class="kw">do</span></span>
<span id="cb31-17"><a href="#cb31-17" aria-hidden="true" tabindex="-1"></a>    moveMade <span class="ot">&lt;-</span> tryPlaceCross</span>
<span id="cb31-18"><a href="#cb31-18" aria-hidden="true" tabindex="-1"></a>    when moveMade <span class="op">$</span> <span class="kw">do</span></span>
<span id="cb31-19"><a href="#cb31-19" aria-hidden="true" tabindex="-1"></a>      cmap tryKillBoard</span>
<span id="cb31-20"><a href="#cb31-20" aria-hidden="true" tabindex="-1"></a>      isGameOver <span class="ot">&lt;-</span> checkForGameOver</span>
<span id="cb31-21"><a href="#cb31-21" aria-hidden="true" tabindex="-1"></a>      <span class="kw">if</span> isGameOver <span class="kw">then</span></span>
<span id="cb31-22"><a href="#cb31-22" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb31-23"><a href="#cb31-23" aria-hidden="true" tabindex="-1"></a>        <span class="co">-- Print that the current player lost</span></span>
<span id="cb31-24"><a href="#cb31-24" aria-hidden="true" tabindex="-1"></a>        liftIO <span class="op">$</span> <span class="fu">putStrLn</span> <span class="op">$</span> <span class="st">&quot;Game over! &quot;</span> <span class="op">++</span> <span class="fu">show</span> player <span class="op">++</span> <span class="st">&quot; loses!&quot;</span></span>
<span id="cb31-25"><a href="#cb31-25" aria-hidden="true" tabindex="-1"></a>      <span class="kw">else</span> <span class="kw">do</span></span>
<span id="cb31-26"><a href="#cb31-26" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb31-27"><a href="#cb31-27" aria-hidden="true" tabindex="-1"></a>        <span class="co">-- Swap players and print who&#39;s turn it is</span></span>
<span id="cb31-28"><a href="#cb31-28" aria-hidden="true" tabindex="-1"></a>        <span class="kw">let</span> nextPlayer <span class="ot">=</span> <span class="kw">if</span> player <span class="op">==</span> <span class="dt">Red</span> <span class="kw">then</span> <span class="dt">Blue</span> <span class="kw">else</span> <span class="dt">Red</span></span>
<span id="cb31-29"><a href="#cb31-29" aria-hidden="true" tabindex="-1"></a>        set global nextPlayer</span>
<span id="cb31-30"><a href="#cb31-30" aria-hidden="true" tabindex="-1"></a>        liftIO <span class="op">$</span> <span class="fu">putStrLn</span> <span class="op">$</span> <span class="st">&quot;It&#39;s &quot;</span> <span class="op">++</span> <span class="fu">show</span> nextPlayer <span class="op">++</span> <span class="st">&quot;&#39;s turn!&quot;</span></span>
<span id="cb31-31"><a href="#cb31-31" aria-hidden="true" tabindex="-1"></a>  <span class="kw">else</span> <span class="kw">do</span></span>
<span id="cb31-32"><a href="#cb31-32" aria-hidden="true" tabindex="-1"></a>    newGame</span>
<span id="cb31-33"><a href="#cb31-33" aria-hidden="true" tabindex="-1"></a>    liftIO <span class="op">$</span> <span class="fu">putStrLn</span> <span class="op">$</span> <span class="st">&quot;Restarted game! It&#39;s &quot;</span> <span class="op">++</span> <span class="fu">show</span> player <span class="op">++</span> <span class="st">&quot;&#39;s turn!&quot;</span></span>
<span id="cb31-34"><a href="#cb31-34" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb31-35"><a href="#cb31-35" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb31-36"><a href="#cb31-36" aria-hidden="true" tabindex="-1"></a><span class="co">-- Change colour of things for different players</span></span>
<span id="cb31-37"><a href="#cb31-37" aria-hidden="true" tabindex="-1"></a><span class="ot">playerColour ::</span> <span class="dt">PlayerComponent</span> <span class="ot">-&gt;</span> <span class="dt">RL.Color</span></span>
<span id="cb31-38"><a href="#cb31-38" aria-hidden="true" tabindex="-1"></a>playerColour <span class="dt">Red</span> <span class="ot">=</span> RL.red</span>
<span id="cb31-39"><a href="#cb31-39" aria-hidden="true" tabindex="-1"></a>playerColour <span class="dt">Blue</span> <span class="ot">=</span> RL.skyBlue</span>
<span id="cb31-40"><a href="#cb31-40" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb31-41"><a href="#cb31-41" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb31-42"><a href="#cb31-42" aria-hidden="true" tabindex="-1"></a><span class="co">-- Example of changing colour of ray to suit player</span></span>
<span id="cb31-43"><a href="#cb31-43" aria-hidden="true" tabindex="-1"></a><span class="ot">renderAimRay ::</span> <span class="dt">System</span> <span class="dt">World</span> ()</span>
<span id="cb31-44"><a href="#cb31-44" aria-hidden="true" tabindex="-1"></a>renderAimRay <span class="ot">=</span> <span class="kw">do</span></span>
<span id="cb31-45"><a href="#cb31-45" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb31-46"><a href="#cb31-46" aria-hidden="true" tabindex="-1"></a>  <span class="co">-- Notice that we aren&#39;t annotating the type for player; we infer it!</span></span>
<span id="cb31-47"><a href="#cb31-47" aria-hidden="true" tabindex="-1"></a>  (<span class="dt">Aim</span> ray _, player) <span class="ot">&lt;-</span> get global</span>
<span id="cb31-48"><a href="#cb31-48" aria-hidden="true" tabindex="-1"></a>  <span class="kw">let</span> lineStart <span class="ot">=</span> addVectors (RL.ray&#39;position ray) (<span class="dt">Vector3</span> <span class="dv">0</span> (<span class="op">-</span><span class="fl">0.05</span>) <span class="dv">0</span>)</span>
<span id="cb31-49"><a href="#cb31-49" aria-hidden="true" tabindex="-1"></a>      lineEnd <span class="ot">=</span> addVectors (RL.ray&#39;position ray) <span class="op">$</span></span>
<span id="cb31-50"><a href="#cb31-50" aria-hidden="true" tabindex="-1"></a>        multiplyVector (RL.ray&#39;direction ray) <span class="dv">10</span></span>
<span id="cb31-51"><a href="#cb31-51" aria-hidden="true" tabindex="-1"></a>  liftIO <span class="op">$</span> RL.drawLine3D lineStart lineEnd <span class="op">$</span> playerColour player</span></code></pre></div>
<p>Firstly, how cool is it that we can add features to the game this easily when using both Haskell and Apecs? It’s really during the iterations on your project where Haskell shines, and Apecs complements it perfectly. Secondly, notice that <strong>we didn’t annotate</strong> the type for <code>player</code> — again, thanks to Haskell, we can infer the types of components from their <em>usage</em>, so as long as you use your components for things you typically don’t have to be explicit with what the result of <code>get</code> needs to be. We’ve been mostly explicit up until now as we wanted to pattern match, but the <code>PlayerComponent</code> is very simple.</p>
<p>Here is where I set my first <strong>challenge</strong> — this blog post is becoming way too long, and so I’m going to make a change and show you how cool the result is, and you’ll have to make the changes yourself! Of course, the repository can be found at the end of the section with a link to the commit, so if you get stuck you can look up how I managed it. These changes are small and numerous; too boring to put write up. Have fun and see you in the next section!</p>
<div class="sourceCode" id="cb32"><pre class="sourceCode hs"><code class="sourceCode haskell"><span id="cb32-1"><a href="#cb32-1" aria-hidden="true" tabindex="-1"></a><span class="co">-- We are going to annotate each cell with the player who placed the cross</span></span>
<span id="cb32-2"><a href="#cb32-2" aria-hidden="true" tabindex="-1"></a><span class="kw">data</span> <span class="dt">Cell</span> <span class="ot">=</span> <span class="dt">Empty</span> <span class="op">|</span> <span class="dt">Filled</span> <span class="dt">PlayerComponent</span> <span class="kw">deriving</span> (<span class="dt">Show</span>, <span class="dt">Eq</span>)</span>
<span id="cb32-3"><a href="#cb32-3" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb32-4"><a href="#cb32-4" aria-hidden="true" tabindex="-1"></a><span class="co">-- CHALLENGE:</span></span>
<span id="cb32-5"><a href="#cb32-5" aria-hidden="true" tabindex="-1"></a><span class="co">-- 1. Change colour of crosses to be dependent on player</span></span>
<span id="cb32-6"><a href="#cb32-6" aria-hidden="true" tabindex="-1"></a><span class="co">-- 2. Change circular &#39;aim&#39; indicator to match player colour</span></span>
<span id="cb32-7"><a href="#cb32-7" aria-hidden="true" tabindex="-1"></a><span class="co">-- 3. Have fun!</span></span></code></pre></div>
<div class="figure" data-image="https://res.cloudinary.com/aas-sh/image/upload/v1668977503/blog/2022/11/20-11-2022_20_51_32_keas6a.png" data-caption="It&#39;s heating up; it&#39;s *red* vs *blue*!" data-source="Notakto" data-sourceUrl="https://github.com/Ashe/Notakto/tree/f6b41756cf4f2e166d087b0b9c4487da6f996dff">

</div>
<div class="gitrepo" data-header="Notakto">
<p>A link to the final section can be found <a href="https://github.com/Ashe/Notakto/tree/f6b41756cf4f2e166d087b0b9c4487da6f996dff">here</a>.</p>
</div>
<h2 id="bonus-manually-implementing-first-person-camera">Bonus: Manually implementing first-person camera</h2>
<p>Okay, so I’ve spied online that this post is actually being read and people are posting it around on Reddit (thankyou!). With that in mind, I thought I’d update the repository so that newer Haskellers can use the code without as many issues. One of the biggest things I found is that the camera was no longer moving on its own.</p>
<p>This was actually something that worried me when using Raylib at first, as it felt too ‘magical’ that their demo just baked in the first person camera movement. Fortunately, this isn’t hard to do, and so here’s the code:</p>
<div class="sourceCode" id="cb33"><pre class="sourceCode hs"><code class="sourceCode haskell"><span id="cb33-1"><a href="#cb33-1" aria-hidden="true" tabindex="-1"></a><span class="co">-- Had to update this system to return the window we create</span></span>
<span id="cb33-2"><a href="#cb33-2" aria-hidden="true" tabindex="-1"></a><span class="co">-- Also note that we disable the cursor straight away for free look</span></span>
<span id="cb33-3"><a href="#cb33-3" aria-hidden="true" tabindex="-1"></a><span class="ot">initialise ::</span> <span class="dt">System</span> <span class="dt">World</span> <span class="dt">RL.WindowResources</span></span>
<span id="cb33-4"><a href="#cb33-4" aria-hidden="true" tabindex="-1"></a>initialise <span class="ot">=</span> <span class="kw">do</span></span>
<span id="cb33-5"><a href="#cb33-5" aria-hidden="true" tabindex="-1"></a>  <span class="kw">let</span> camera <span class="ot">=</span> <span class="dt">RL.Camera3D</span> (<span class="dt">Vector3</span> <span class="dv">0</span> <span class="dv">1</span> <span class="dv">6</span>) (<span class="dt">Vector3</span> <span class="dv">0</span> <span class="dv">1</span> <span class="dv">0</span>) (<span class="dt">Vector3</span> <span class="dv">0</span> <span class="dv">1</span> <span class="dv">0</span>) <span class="dv">90</span></span>
<span id="cb33-6"><a href="#cb33-6" aria-hidden="true" tabindex="-1"></a>        <span class="dt">RL.CameraPerspective</span></span>
<span id="cb33-7"><a href="#cb33-7" aria-hidden="true" tabindex="-1"></a>  set global (<span class="dt">Camera</span> camera, <span class="dt">Red</span>)</span>
<span id="cb33-8"><a href="#cb33-8" aria-hidden="true" tabindex="-1"></a>  newGame</span>
<span id="cb33-9"><a href="#cb33-9" aria-hidden="true" tabindex="-1"></a>  liftIO <span class="op">$</span> <span class="kw">do</span></span>
<span id="cb33-10"><a href="#cb33-10" aria-hidden="true" tabindex="-1"></a>    window <span class="ot">&lt;-</span> RL.initWindow <span class="dv">1920</span> <span class="dv">1080</span> <span class="st">&quot;App&quot;</span></span>
<span id="cb33-11"><a href="#cb33-11" aria-hidden="true" tabindex="-1"></a>    RL.setTargetFPS <span class="dv">60</span></span>
<span id="cb33-12"><a href="#cb33-12" aria-hidden="true" tabindex="-1"></a>    RL.disableCursor</span>
<span id="cb33-13"><a href="#cb33-13" aria-hidden="true" tabindex="-1"></a>    <span class="fu">pure</span> window</span>
<span id="cb33-14"><a href="#cb33-14" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb33-15"><a href="#cb33-15" aria-hidden="true" tabindex="-1"></a><span class="co">-- Also changed terminate to close the specific window we created</span></span>
<span id="cb33-16"><a href="#cb33-16" aria-hidden="true" tabindex="-1"></a><span class="ot">terminate ::</span> <span class="dt">RL.WindowResources</span> <span class="ot">-&gt;</span> <span class="dt">System</span> <span class="dt">World</span> ()</span>
<span id="cb33-17"><a href="#cb33-17" aria-hidden="true" tabindex="-1"></a>terminate window <span class="ot">=</span> liftIO <span class="op">$</span> RL.closeWindow window</span>
<span id="cb33-18"><a href="#cb33-18" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb33-19"><a href="#cb33-19" aria-hidden="true" tabindex="-1"></a><span class="co">-- We now manually manipulate the camera&#39;s location and rotation</span></span>
<span id="cb33-20"><a href="#cb33-20" aria-hidden="true" tabindex="-1"></a><span class="ot">updateCamera ::</span> <span class="dt">System</span> <span class="dt">World</span> ()</span>
<span id="cb33-21"><a href="#cb33-21" aria-hidden="true" tabindex="-1"></a>updateCamera <span class="ot">=</span> <span class="kw">do</span></span>
<span id="cb33-22"><a href="#cb33-22" aria-hidden="true" tabindex="-1"></a>  <span class="dt">Camera</span> c <span class="ot">&lt;-</span> get global</span>
<span id="cb33-23"><a href="#cb33-23" aria-hidden="true" tabindex="-1"></a>  newCam <span class="ot">&lt;-</span> liftIO <span class="op">$</span> <span class="kw">do</span></span>
<span id="cb33-24"><a href="#cb33-24" aria-hidden="true" tabindex="-1"></a>    dt <span class="ot">&lt;-</span> RL.getFrameTime</span>
<span id="cb33-25"><a href="#cb33-25" aria-hidden="true" tabindex="-1"></a>    forward <span class="ot">&lt;-</span> checkKey <span class="dt">RL.KeyW</span> <span class="dt">RL.KeyUp</span></span>
<span id="cb33-26"><a href="#cb33-26" aria-hidden="true" tabindex="-1"></a>    left <span class="ot">&lt;-</span> checkKey <span class="dt">RL.KeyA</span> <span class="dt">RL.KeyLeft</span></span>
<span id="cb33-27"><a href="#cb33-27" aria-hidden="true" tabindex="-1"></a>    backward <span class="ot">&lt;-</span> checkKey <span class="dt">RL.KeyS</span> <span class="dt">RL.KeyDown</span></span>
<span id="cb33-28"><a href="#cb33-28" aria-hidden="true" tabindex="-1"></a>    right <span class="ot">&lt;-</span> checkKey <span class="dt">RL.KeyD</span> <span class="dt">RL.KeyRight</span></span>
<span id="cb33-29"><a href="#cb33-29" aria-hidden="true" tabindex="-1"></a>    <span class="dt">Vector2</span> i j <span class="ot">&lt;-</span> RL.getMouseDelta</span>
<span id="cb33-30"><a href="#cb33-30" aria-hidden="true" tabindex="-1"></a>    <span class="kw">let</span> speed <span class="ot">=</span> <span class="fl">5.0</span></span>
<span id="cb33-31"><a href="#cb33-31" aria-hidden="true" tabindex="-1"></a>        turnspeed <span class="ot">=</span> <span class="dv">1</span></span>
<span id="cb33-32"><a href="#cb33-32" aria-hidden="true" tabindex="-1"></a>        <span class="dt">Vector3</span> x _ z <span class="ot">=</span></span>
<span id="cb33-33"><a href="#cb33-33" aria-hidden="true" tabindex="-1"></a>          (RL.getCameraForward c <span class="op">|*</span> (forward <span class="op">-</span> backward)) <span class="op">|+|</span></span>
<span id="cb33-34"><a href="#cb33-34" aria-hidden="true" tabindex="-1"></a>          (RL.getCameraRight c <span class="op">|*</span> (right <span class="op">-</span> left))</span>
<span id="cb33-35"><a href="#cb33-35" aria-hidden="true" tabindex="-1"></a>        c&#39; <span class="ot">=</span> RL.cameraMove c <span class="op">$</span> safeNormalize (<span class="dt">Vector3</span> x <span class="dv">0</span> z) <span class="op">|*</span> (speed <span class="op">*</span> dt)</span>
<span id="cb33-36"><a href="#cb33-36" aria-hidden="true" tabindex="-1"></a>        c&#39;&#39; <span class="ot">=</span> RL.cameraYaw c&#39; (<span class="op">-</span>i <span class="op">*</span> turnspeed <span class="op">*</span> dt) <span class="dt">False</span></span>
<span id="cb33-37"><a href="#cb33-37" aria-hidden="true" tabindex="-1"></a>    <span class="fu">pure</span> <span class="op">$</span> RL.cameraPitch c&#39;&#39; (<span class="op">-</span>j <span class="op">*</span> turnspeed <span class="op">*</span> dt) <span class="dt">False</span> <span class="dt">False</span> <span class="dt">False</span></span>
<span id="cb33-38"><a href="#cb33-38" aria-hidden="true" tabindex="-1"></a>  set global <span class="op">$</span> <span class="dt">Camera</span> newCam</span>
<span id="cb33-39"><a href="#cb33-39" aria-hidden="true" tabindex="-1"></a>  <span class="kw">where</span> checkKey a b <span class="ot">=</span></span>
<span id="cb33-40"><a href="#cb33-40" aria-hidden="true" tabindex="-1"></a>          liftA2 (\x y <span class="ot">-&gt;</span> <span class="kw">if</span> x <span class="op">||</span> y <span class="kw">then</span> <span class="dv">1</span> <span class="kw">else</span> <span class="dv">0</span>) (RL.isKeyDown a) (RL.isKeyDown b)</span>
<span id="cb33-41"><a href="#cb33-41" aria-hidden="true" tabindex="-1"></a>        safeNormalize v</span>
<span id="cb33-42"><a href="#cb33-42" aria-hidden="true" tabindex="-1"></a>          <span class="op">|</span> magnitude v <span class="op">==</span> <span class="dv">0</span> <span class="ot">=</span> v</span>
<span id="cb33-43"><a href="#cb33-43" aria-hidden="true" tabindex="-1"></a>          <span class="op">|</span> <span class="fu">otherwise</span> <span class="ot">=</span> vectorNormalize v</span></code></pre></div>
<p>Some things to note here is that a lot of our vector math functions are <a href="https://hackage.haskell.org/package/h-raylib-4.6.0.6/docs/Raylib-Util-Math.html#g:3">built into the h-raylib bindings</a> now, so <code>|+|</code> lets you add two vectors together, <code>|*|</code> lets you multiply two vectors together, <code>|*</code> lets you multiply a vector with a normal scalar value and so on.</p>
<p>So with that in mind, we now retrieve the state of several keyboard inputs one by one and determine which direction we want to move in by combining the player’s net input as well as the camera’s forward and right directions. We then normalize that (I had to make a <code>safeNormalize</code> function for cases when magnituded is zero, this will probably get fixed soon) and multiply it by some speed value and delta time to make it frame independent. Looking around is similar; Raylib already gives us the mouse delta so we can put the right into the look direction logic.</p>
<p>Make sure to check out <a href="https://github.com/Ashe/Notakto/commit/dc35e711dbc48703ff827dedbd2969c54e826d48">the diff</a> for all the changes I made in this update. I hope this helps!</p>
<h1 id="wrapping-up">Wrapping up</h1>
<p><strong>Congratulations!</strong> I’m hoping that the content of this post, although long, has been useful as a gateway into the world of Haskell game development. I really enjoyed making this post and I’m hoping my readers enjoyed this new format even if it is a little wordy.</p>
<p>There are no more sections for this blog post, although honestly I wanted to go wild and do things like:</p>
<ul>
<li><p><strong>Projectiles:</strong> When you click, you shoot a cube and you have to land it in a cell for it to mark. Would be interesting to make it so that you can only shoot if no projectile currently exists, and making the actions that happen when you click the mouse delayed until the projectile lands. Good luck finding that shot when it goes out of bounds!</p></li>
<li><p><strong>Moving boards:</strong> We have a <code>PositionComponent</code> but the data never really changes once created. Wouldn’t it be fun to make the boards fly around?</p></li>
<li><p><strong>Rotated boards:</strong> Right now we assume all boards face the same way. Adding a rotation would be fun but a little bit of work since you may need to write your own vector math functions unless you use another library (I wanted the dependency count to be low for this post).</p></li>
<li><p><strong>Forced distance:</strong> I wanted to make it so that you could only take a turn if you were stood in an area, so that you had to aim. Would be cool making a little environment with player colouring!</p></li>
<li><p><strong>AI:</strong> Here’s an easy peasy one — make it so that when you make your move, you can get an AI to play as the other person! Start off by just randomising the entity and cell index, and once you you’ve got a very basic AI you can move up to implementing the <a href="https://en.wikipedia.org/wiki/Negamax">Negamax algorithm</a>!</p></li>
</ul>
<p>These things all sound fun, but I believe that the important thing is to teach the basics of Apecs and Raylib so that we get more projects popping up in the Haskell gamedev space. I’ve seen a lot of cool projects like <a href="https://hackage.haskell.org/package/keid-core">Keid</a>, but admittedly I just love Apecs too much, and now I can love Raylib also (even if I haven’t explored its limits too much).</p>
<p><strong><em>Big thankyous</em></strong> to:</p>
<ul>
<li><a href="https://jonascarpay.com/">Jonas Carpay</a>, author of <a href="https://hackage.haskell.org/package/apecs">Apecs</a>,</li>
<li><a href="https://github.com/Anut-py">Anand Swaroop (Anut-py)</a> for creating the <a href="https://hackage.haskell.org/package/h-raylib">h-raylib bindings</a>,</li>
<li>the authors of <a href="https://www.raylib.com/">Raylib</a>,</li>
<li>and finally, the <a href="https://nixos.org/community/index.html">Nix community</a> for helping me with all my problems whenever I go crying to them about something not working. Really, thanks guys!</li>
</ul>
<p>If anyone wants anything from this blog revised, has feedback, or just wants to talk, you can get in touch via <a href="mailto:contact@aas.sh">contact@aas.sh</a>. Looking forward to hearing from you!</p>
<p>And with that, I’m signing off. Thank you for reading!</p>]]></description>
    <pubDate>Sun, 20 Nov 2022 00:00:00 UT</pubDate>
    <guid>https://aas.sh/blog/notakto-a-haskell-game-with-apecs-and-raylib/index.html</guid>
    <dc:creator>Ashley Rose</dc:creator>
</item>
<item>
    <title>Notakto: A Haskell game with Apecs and Raylib</title>
    <link>https://aas.sh/blog/notakto-a-haskell-game-with-apecs-and-raylib/index.html</link>
    <description><![CDATA[<div class="gitrepo infobox fill-horizontal">
<div class="header">
<span class="lab la-github mr-3"></span>Repository - Notakto
</div>
<p>A link to the repository can be found <a href="https://github.com/Ashe/Notakto/">here</a>.</p>
</div>
<div class="note infobox fill-horizontal">
<div class="header">
<span class="las la-info-circle mr-3"></span>Note - Out of date, but not to worry!
</div>
<p>I wrote this post as I made the project, but to make things easier for newer readers I have been updating the codebase so that it takes advantage of some of the newer features of <a href="https://hackage.haskell.org/package/h-raylib">h-raylib</a> and removes depreciated code. Check out the git repository for the latest updates and be careful when copy-pasting code — unless you’re running my repository or you’re using the exact same versions of libraries, some of this code may not work.</p>
<p>The biggest change was that I’ve manually implemented the first person camera, which has the added bonus of showing how we can handle input and make changes to our ECS world.</p>
</div>
<section id="previously-on-apecs" class="article-section">
<h1><span>Previously on Apecs</span><a href="#previously-on-apecs" class="anchor las la-link" title="previously-on-apecs"></a></h1>
<p>Roughly 4 years ago, I wrote the post <a href="/blog/making-a-game-with-haskell-and-apecs/">An introduction to game development to game development in Haskell using Apecs</a>. I like to think it was one of my most well-received blog posts <a href="https://github.com/jonascarpay/apecs#links">considering it is featured on the Apecs repository itself</a>, as well as being a common topic across emails and communications I receive.</p>
<p><a href="https://hackage.haskell.org/package/apecs">Apecs</a> is a ‘fast <a href="https://en.wikipedia.org/wiki/Entity_component_system">Entity-Component-System</a> library for game programming’ written in <a href="https://www.haskell.org/">Haskell</a>. It is by far one of the best ECS implementations I’ve used and also happens to be my favourite way of structuring games when using Haskell.</p>
<p>However, enough time has passed (4 years!) that some of the tricks and methods used in that blog post are old enough to confuse beginners. Since that was never my intention, I thought I’d make a new blog post about it!</p>
</section>
<section id="about-this-post" class="article-section">
<h1><span>About this post</span><a href="#about-this-post" class="anchor las la-link" title="about-this-post"></a></h1>
<p>This post is going to be a little bit different. Whereas normally I’d finish a project and write a post about it, in this post I want to write it as I go along! Each time I finish implement something substantial, I’m going to add to this post so that I can really capture more of the development process.</p>
<p>This may have a few side-effects, however. Firstly, code we write near the beginning may change towards the end. If I make a simple mistake (such as a syntax improvement), I’ll simply swap it out for the superior. But I want the big decisions I make to be written about so that if I later decide against it I can articulate properly why in the post.</p>
<p>My blog has support for both projects and blog posts; this post is a blog post since it is capturing a moment in time, like a photograph. The associated project for this page will be the formal write-up for how the game works, but this will act more as a portfolio piece than as a tutorial. This is a bit of an experiment for me, so please let me know how you think it goes!</p>
</section>
<section id="introduction" class="article-section">
<h1><span>Introduction</span><a href="#introduction" class="anchor las la-link" title="introduction"></a></h1>
<section id="what-is-the-ecs-pattern" class="article-section">
<h2><span>What is the ECS pattern?</span><a href="#what-is-the-ecs-pattern" class="anchor las la-link" title="what-is-the-ecs-pattern"></a></h2>
<p>As the name suggests, the ECS pattern is divided into three parts: entities, components and systems. These parts work together to form the foundations of your game’s architecture.</p>
<ul>
<li><p><strong>Entity —</strong> Alone, an entity is just a unique identifier, such as a simple integer value. They aren’t very useful by themselves!</p></li>
<li><p><strong>Component —</strong> Data, essentially. Anything that has data you need to store between frames, such as position, velocity, health or gold. Each component is attached to an entity in some way — some games have just a big database where an entity is just an integer used as a look-up key, whereas others (who probably would be using <a href="https://en.wikipedia.org/wiki/Object-oriented_programming">object oriented programming</a>) might compose component lists within the entity class itself.</p></li>
<li><p><strong>System —</strong> The magic part that a lot of people miss out on! A system is simple: it iterates through entities and updates their components in some way. A player movement system might cherry-pick the player’s entity and update the velocity component with respect to whatever keys are held on the keyboard; a movement system would then iterate through <em>all</em> entities with positions and velocities and update their positions accordingly. If you can break the logic of your game into systems then things become a lot simpler and safer.</p></li>
</ul>
<p>It was through ECS that I began to understand how modern game engines work (no thanks to you, university!) since having a greater appreciation for how games can be architected gave me an insight that couldn’t be taught through anything other experience. That isn’t to say that game engines all use ECS, in fact most of them don’t since they want to write their own systems (rendering, physics, scripting etc) that <em>you</em> then use and may or may not customise. Also, they probably don’t implement entities and components in the same way; both <a href="https://unity.com/">Unity</a> and <a href="https://www.unrealengine.com/en-US">Unreal</a> engines allow for logic to be placed in their components whereas the ECS pattern encourages components to be purely data.</p>
</section>
<section id="what-is-raylib" class="article-section">
<h2><span>What is Raylib?</span><a href="#what-is-raylib" class="anchor las la-link" title="what-is-raylib"></a></h2>
<p>One thing we haven’t mentioned yet is that this project will be using <a href="https://www.raylib.com/">Raylib</a> for the rendering side of things. I’ve always wanted to learn more about Raylib, and my chance came when I found the <a href="https://hackage.haskell.org/package/h-raylib">Haskell bindings</a> released recently.</p>
<p>We won’t spend too much time talking about Raylib, in fact I’m using it purely because it’s a really easy way to get things on-screen. The documentation style surprises me a bit, with a preference for documenting the source code rather than an online version of the API. That said, for our purposes the <a href="https://www.raylib.com/cheatsheet/cheatsheet.html">cheatsheet</a> is an excellent resource for just understanding what functions Raylib provides us with and what arguments they take.</p>
</section>
<section id="what-is-notakto" class="article-section">
<h2><span>What is Notakto?</span><a href="#what-is-notakto" class="anchor las la-link" title="what-is-notakto"></a></h2>
<p><a href="https://en.wikipedia.org/wiki/Notakto">Notakto</a> is a variant of tic-tac-toe in which both players play using ‘crosses’ as their markers across multiple tic-tac-toe boards. Three crosses in a row on any board will ‘kill’ it, meaning that the board can no longer be played on. When there is only one board remaining, the player who kills it is considered the loser, meaning that to win you have to get yourself in a position where you force the other person to get three-in-a-row on the final board. It is still a solveable game like regular tic-tac-toe, but the stratagies involve enough effort that you will probably not find many people who can figure them out on their own.</p>
<p>Why did I chose to make Notakto? There’s a beauty in making a game where the rules are already well-defined since there is already a definition of ‘done’ — I know what I’m working towards and the project has scope, a perfect scenario for an experimental tutorial!</p>
<p>And with that, it’s 10:00 am, let’s begin our journey!</p>
</section>
</section>
<section id="getting-started" class="article-section">
<h1><span>Getting started</span><a href="#getting-started" class="anchor las la-link" title="getting-started"></a></h1>
<section id="initial-commit" class="article-section">
<h2><span>Initial commit</span><a href="#initial-commit" class="anchor las la-link" title="initial-commit"></a></h2>
<div class="gitrepo infobox fill-horizontal">
<div class="header">
<span class="lab la-github mr-3"></span>Repository - Notakto
</div>
<p>I will be committing as I go, so even though this blog post may be revised for cleaner reading, the repository will always tell the full story. Each section will have a permalink to the commit I was at so that you can see how the project evolves. I won’t be detailing every single change in this blog post, so if you really are following along you may need to check the repository and fill the blanks in yourself.</p>
<p>A link to the repository’s first commit can be found <a href="https://github.com/Ashe/Notakto/tree/0852350c18071b6332899639055d3c38c1976963">here</a>.</p>
</div>
<div class="caption-frame apply-shadow">
<img src="https://res.cloudinary.com/aas-sh/image/upload/v1668334893/blog/2022/11/13-11-2022_10_20_31_ywlsij.png" title="The folder structure of the initial commit." class="w-full object-cover" alt="The folder structure of the initial commit." />
<div class="caption">
<p>The folder structure of the initial commit.</p>
<div class="caption-source">
<a href="https://github.com/Ashe/Notakto/tree/0852350c18071b6332899639055d3c38c1976963" title="Notakto">Notakto</a>
</div>
</div>
</div>
<p>Here we go! I’ve just pushed an initial commit with my standard Haskell bits and bobs. I always like making a library and separating executable-only code from the game itself, meaning that if we wanted multiple executables that handle the game setup in different ways (i.e. terminal or GUI) then we can. I’ve also got a testing folder, maybe we’ll write some tests as we go, who knows?</p>
<p>You may also notice that I am using <a href="https://nixos.org/">Nix</a> to build and run this project, so you should just be able to use <code>nix run</code> to run the project at any point in time. If you want to work in this repository, you can use <code>nix develop</code> to get your development environment set up.</p>
<p>At this point in time, running the project should print <code>Hello, Notakto</code>.</p>
</section>
<section id="introducing-libraries" class="article-section">
<h2><span>Introducing libraries</span><a href="#introducing-libraries" class="anchor las la-link" title="introducing-libraries"></a></h2>
<p>After setting up the repository, my next step with any project is adding the libraries I know I’ll be using and getting a modified example running to demonstrate that things are working correctly. Lets begin by updating our cabal file to include the <code>h-raylib</code> and <code>apecs</code>.</p>
<pre class="cabal"><code>library
  exposed-modules:  Lib
  hs-source-dirs:   src/lib
  build-depends:
    base,
    apecs,
    h-raylib
  default-language: Haskell2010</code></pre>
</section>
<section id="single-file-example" class="article-section">
<h2><span>Single file example</span><a href="#single-file-example" class="anchor las la-link" title="single-file-example"></a></h2>
<section id="imports-options-and-extensions" class="article-section">
<h3><span>Imports, options and extensions</span><a href="#imports-options-and-extensions" class="anchor las la-link" title="imports-options-and-extensions"></a></h3>
<p>Now we can try and use our dependencies by modifying an example! Thankfully, <code>h-raylib</code> supplies us with a <a href="https://github.com/Anut-py/h-raylib/tree/606936336922dea13517abf4d136f17b162efcc1/examples/first-person-camera">first-person-camera example</a>, and I already have some Apecs examples from the <a href="https://github.com/Ashe/HSRogue/">project</a> featured in my <a href="https://aas.sh/blog/making-a-game-with-haskell-and-apecs/">previous post</a>!</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode hs"><code class="sourceCode haskell"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true" tabindex="-1"></a><span class="ot">{-# OPTIONS -Wall #-}</span></span>
<span id="cb2-2"><a href="#cb2-2" aria-hidden="true" tabindex="-1"></a><span class="ot">{-# LANGUAGE FlexibleInstances #-}</span></span>
<span id="cb2-3"><a href="#cb2-3" aria-hidden="true" tabindex="-1"></a><span class="ot">{-# LANGUAGE MultiParamTypeClasses #-}</span></span>
<span id="cb2-4"><a href="#cb2-4" aria-hidden="true" tabindex="-1"></a><span class="ot">{-# LANGUAGE TemplateHaskell #-}</span></span>
<span id="cb2-5"><a href="#cb2-5" aria-hidden="true" tabindex="-1"></a><span class="ot">{-# LANGUAGE TypeFamilies #-}</span></span>
<span id="cb2-6"><a href="#cb2-6" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb2-7"><a href="#cb2-7" aria-hidden="true" tabindex="-1"></a><span class="kw">module</span> <span class="dt">Lib</span> (main) <span class="kw">where</span></span>
<span id="cb2-8"><a href="#cb2-8" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb2-9"><a href="#cb2-9" aria-hidden="true" tabindex="-1"></a><span class="kw">import</span> <span class="dt">Control.Monad</span> (unless)</span>
<span id="cb2-10"><a href="#cb2-10" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb2-11"><a href="#cb2-11" aria-hidden="true" tabindex="-1"></a><span class="kw">import</span> <span class="dt">Apecs</span></span>
<span id="cb2-12"><a href="#cb2-12" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb2-13"><a href="#cb2-13" aria-hidden="true" tabindex="-1"></a><span class="kw">import</span> <span class="kw">qualified</span> <span class="dt">Raylib</span> <span class="kw">as</span> <span class="dt">RL</span></span>
<span id="cb2-14"><a href="#cb2-14" aria-hidden="true" tabindex="-1"></a><span class="kw">import</span> <span class="kw">qualified</span> <span class="dt">Raylib.Colors</span> <span class="kw">as</span> <span class="dt">RL</span></span>
<span id="cb2-15"><a href="#cb2-15" aria-hidden="true" tabindex="-1"></a><span class="kw">import</span> <span class="kw">qualified</span> <span class="dt">Raylib.Constants</span> <span class="kw">as</span> <span class="dt">RL</span></span>
<span id="cb2-16"><a href="#cb2-16" aria-hidden="true" tabindex="-1"></a><span class="kw">import</span> <span class="kw">qualified</span> <span class="dt">Raylib.Types</span> <span class="kw">as</span> <span class="dt">RL</span></span>
<span id="cb2-17"><a href="#cb2-17" aria-hidden="true" tabindex="-1"></a><span class="kw">import</span> <span class="dt">Raylib.Types</span> (<span class="dt">Vector3</span> (..))</span></code></pre></div>
<p>Here is how our <code>Lib</code> module is setup now. We’re still working in one file to keep it simple, so it’s okay for things to be messy.</p>
<ul>
<li>I use the <code>-Wall</code> language option just to make sure we’re ironing out warnings we go — personal prefence.</li>
<li>The language extensions you see are all used by Apecs (or at least, the example made use of them). I know for a fact that <code>TemplateHaskell</code> is used as an easy way of building a <code>World</code> type for use throughout the application.</li>
<li><code>Lib</code> only needs to export <code>main</code> for now, but if we ever want to export a configuration data type that our client can provide then this is where we’d put it.</li>
<li>I try to structure my includes with my ‘Haskell libraries’ at the top (i.e. things that aren’t specific to my project), followed by blocks of imports for my dependencies:
<ul>
<li>Apecs has quite a nice API; it doesn’t get messy if you just import it in its entirety and it almost feels like it’s part of the language.</li>
<li>Raylib has a <em>lot</em> of things going on (again, refer to the <a href="https://www.raylib.com/cheatsheet/cheatsheet.html">cheatsheet</a>, so I’ve <code>qualified</code> it. Normally I’d explicitly write every function I use, however for this tutorial I’m going to use qualifications so that you can easily tell when something is a Raylib thing and when it’s something else.
<ul>
<li>I made an exception for <code>Raylib.Types</code> — certain types are quite commonly used throughout the project and so rather than typing <code>RL.Vector3</code> constantly I instead explicitly imported it so that we can use it without restraint.</li>
</ul></li>
</ul></li>
</ul>
</section>
<section id="creating-and-initialising-a-world" class="article-section">
<h3><span>Creating and initialising a World</span><a href="#creating-and-initialising-a-world" class="anchor las la-link" title="creating-and-initialising-a-world"></a></h3>
<p>Next up is creating our <code>World</code>. In Apecs, the <code>World</code> is a type built specifically for your components to live in; that’s why <code>TemplateHaskell</code> is used to automatically write the code that glues your components together. The <code>initWorld</code> function is also a result of this template, which is why you might find it hard to find the <code>World</code> type and <code>initWorld</code> in the <a href="https://hackage.haskell.org/package/apecs"><code>apecs</code> documentation</a>.</p>
<div class="sourceCode" id="cb3"><pre class="sourceCode hs"><code class="sourceCode haskell"><span id="cb3-1"><a href="#cb3-1" aria-hidden="true" tabindex="-1"></a><span class="co">-- Define a component, a Camera</span></span>
<span id="cb3-2"><a href="#cb3-2" aria-hidden="true" tabindex="-1"></a><span class="kw">newtype</span> <span class="dt">Camera</span> <span class="ot">=</span> <span class="dt">Camera</span> <span class="dt">RL.Camera3D</span></span>
<span id="cb3-3"><a href="#cb3-3" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb3-4"><a href="#cb3-4" aria-hidden="true" tabindex="-1"></a><span class="co">-- Create a world featuring the lonely Camera component</span></span>
<span id="cb3-5"><a href="#cb3-5" aria-hidden="true" tabindex="-1"></a>makeWorldAndComponents <span class="st">&quot;World&quot;</span> [&#39;<span class="dt">&#39;Camera</span>]</span>
<span id="cb3-6"><a href="#cb3-6" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb3-7"><a href="#cb3-7" aria-hidden="true" tabindex="-1"></a><span class="co">-- Initialise our world in the main function, and give it to our game&#39;s systems</span></span>
<span id="cb3-8"><a href="#cb3-8" aria-hidden="true" tabindex="-1"></a><span class="ot">main ::</span> <span class="dt">IO</span> ()</span>
<span id="cb3-9"><a href="#cb3-9" aria-hidden="true" tabindex="-1"></a>main <span class="ot">=</span> initWorld <span class="op">&gt;&gt;=</span> runSystem (initialise <span class="op">&gt;&gt;</span> run <span class="op">&gt;&gt;</span> terminate)</span></code></pre></div>
<p>The big important function here is <code>makeWorldAndComponents</code>. In Apecs, there are multiple template-Haskell functions you can use to create your <code>World</code> and associated components:</p>
<ul>
<li><code>makeWorld</code> takes your components and constructs your <code>World</code> and component associations, but it doesn’t assume anything about your component’s storage mechanisms.</li>
<li><code>makeWorldAndComponents</code> calls <code>makeWorld</code>, but then also calls <code>makeMapComponents</code> which takes all of your components and defines <code>Component</code> instances with a <code>Map</code> store. In simple terms, it sets up your components with the most common storage mechanism, <code>Map</code>.</li>
</ul>
<p>In this tutorial, I’ll be using <code>makeWorldAndComponents</code> to keep things simple, but if you ever want components that have specific constraints you might want to consider <code>makeWorld</code> and defining your mechanisms manually like I did <a href="/blog/making-a-game-with-haskell-and-apecs/#creating-components">in my previous post</a>.</p>
<div class="note infobox fill-horizontal">
<div class="header">
<span class="las la-info-circle mr-3"></span>Note - Manual storage definitions
</div>
<p>You probably want to use <code>makeWorld</code> if you want to be cool so that you have full control. Here’s how components would look if you want things to be done manually:</p>
<div class="sourceCode" id="cb4"><pre class="sourceCode hs"><code class="sourceCode haskell"><span id="cb4-1"><a href="#cb4-1" aria-hidden="true" tabindex="-1"></a><span class="co">-- &#39;Map&#39; storage: standard storage where any entity can have one</span></span>
<span id="cb4-2"><a href="#cb4-2" aria-hidden="true" tabindex="-1"></a><span class="co">-- e.g. Every entity may have a name</span></span>
<span id="cb4-3"><a href="#cb4-3" aria-hidden="true" tabindex="-1"></a><span class="kw">newtype</span> <span class="dt">Name</span> <span class="ot">=</span> <span class="dt">Name</span> <span class="dt">String</span> <span class="kw">deriving</span> <span class="dt">Show</span></span>
<span id="cb4-4"><a href="#cb4-4" aria-hidden="true" tabindex="-1"></a><span class="kw">instance</span> <span class="dt">Component</span> <span class="dt">Name</span> <span class="kw">where</span> <span class="kw">type</span> <span class="dt">Storage</span> <span class="dt">Name</span> <span class="ot">=</span> <span class="dt">Map</span> <span class="dt">Name</span></span>
<span id="cb4-5"><a href="#cb4-5" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb4-6"><a href="#cb4-6" aria-hidden="true" tabindex="-1"></a><span class="co">-- &#39;Unique&#39; storage: only one entity can have this component at maximum</span></span>
<span id="cb4-7"><a href="#cb4-7" aria-hidden="true" tabindex="-1"></a><span class="co">-- e.g. Only zero or one entities can be marked as a player at any given time</span></span>
<span id="cb4-8"><a href="#cb4-8" aria-hidden="true" tabindex="-1"></a><span class="kw">data</span> <span class="dt">Player</span> <span class="ot">=</span> <span class="dt">Player</span></span>
<span id="cb4-9"><a href="#cb4-9" aria-hidden="true" tabindex="-1"></a><span class="kw">instance</span> <span class="dt">Component</span> <span class="dt">Player</span> <span class="kw">where</span> <span class="kw">type</span> <span class="dt">Storage</span> <span class="dt">Player</span> <span class="ot">=</span> <span class="dt">Unique</span> <span class="dt">Player</span></span>
<span id="cb4-10"><a href="#cb4-10" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb4-11"><a href="#cb4-11" aria-hidden="true" tabindex="-1"></a><span class="co">-- &#39;Global&#39; storage: exactly one component exists for the lifetime of the game</span></span>
<span id="cb4-12"><a href="#cb4-12" aria-hidden="true" tabindex="-1"></a><span class="co">-- e.g. There only needs to be one definition of the game&#39;s configuration</span></span>
<span id="cb4-13"><a href="#cb4-13" aria-hidden="true" tabindex="-1"></a><span class="co">-- Note that querying for this on ANY entity will yield the global one,</span></span>
<span id="cb4-14"><a href="#cb4-14" aria-hidden="true" tabindex="-1"></a><span class="co">-- effectively sharing the component between all entities</span></span>
<span id="cb4-15"><a href="#cb4-15" aria-hidden="true" tabindex="-1"></a><span class="co">-- Also note that globals need instances for Monoid and Semigroup</span></span>
<span id="cb4-16"><a href="#cb4-16" aria-hidden="true" tabindex="-1"></a><span class="kw">data</span> <span class="dt">Config</span> <span class="ot">=</span> <span class="dt">Config</span> <span class="dt">String</span> <span class="dt">Int</span></span>
<span id="cb4-17"><a href="#cb4-17" aria-hidden="true" tabindex="-1"></a><span class="kw">instance</span> <span class="dt">Monoid</span> <span class="dt">Config</span> <span class="kw">where</span> <span class="fu">mempty</span> <span class="ot">=</span> <span class="dt">Config</span> <span class="st">&quot;Foo&quot;</span> <span class="dv">0</span></span>
<span id="cb4-18"><a href="#cb4-18" aria-hidden="true" tabindex="-1"></a><span class="kw">instance</span> <span class="dt">Semigroup</span> <span class="dt">Config</span> <span class="kw">where</span> (<span class="op">&lt;&gt;</span>) <span class="ot">=</span> <span class="fu">mappend</span></span>
<span id="cb4-19"><a href="#cb4-19" aria-hidden="true" tabindex="-1"></a><span class="kw">instance</span> <span class="dt">Component</span> <span class="dt">Config</span> <span class="kw">where</span> <span class="kw">type</span> <span class="dt">Storage</span> <span class="dt">Config</span> <span class="ot">=</span> <span class="dt">Global</span> <span class="dt">Config</span></span></code></pre></div>
<p>So even though I’m going to be lazy on this post so I can say ‘make a new component’, I really do encourage people reading this to <strong>try and use <code>makeWorld</code> instead</strong>.</p>
<div class="caption">
<p>For more information, <a href="https://hackage.haskell.org/package/apecs-0.9.4/docs/Apecs-Stores.html">check out the documentation</a> and maybe even <a href="/blog/making-a-game-with-haskell-and-apecs/#creating-components">my previous post</a>.</p>
</div>
</div>
<p>So, what are the <code>initialise</code>, <code>run</code> and <code>terminate</code> systems? Well, they are just functions with the type <code>System World ()</code>!</p>
<ul>
<li><code>System</code> is an Apecs type defining a system, one of the parts of the ECS pattern. Note that <code>System w a</code> is mapped to <code>SystemT w IO a</code> under the hood; it’s just a convenience type.</li>
<li><code>World</code> is our world type created by template haskell in the above snippet.</li>
<li><code>()</code> is the absence of type; we aren’t expecting these systems to return anything, so these particular functions are only for executing side effects.</li>
</ul>
<p>Let’s first look at <code>initialise</code>:</p>
<div class="sourceCode" id="cb5"><pre class="sourceCode hs"><code class="sourceCode haskell"><span id="cb5-1"><a href="#cb5-1" aria-hidden="true" tabindex="-1"></a><span class="co">-- Simple system, doesn&#39;t return anything</span></span>
<span id="cb5-2"><a href="#cb5-2" aria-hidden="true" tabindex="-1"></a><span class="ot">initialise ::</span> <span class="dt">System</span> <span class="dt">World</span> ()</span>
<span id="cb5-3"><a href="#cb5-3" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb5-4"><a href="#cb5-4" aria-hidden="true" tabindex="-1"></a><span class="co">-- We&#39;re in the &#39;System&#39; monad, use &#39;do&#39; to compose side effects</span></span>
<span id="cb5-5"><a href="#cb5-5" aria-hidden="true" tabindex="-1"></a>initialise <span class="ot">=</span> <span class="kw">do</span></span>
<span id="cb5-6"><a href="#cb5-6" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb5-7"><a href="#cb5-7" aria-hidden="true" tabindex="-1"></a>  <span class="co">-- Define a Raylib 3D perspective camera and name it &#39;camera&#39;</span></span>
<span id="cb5-8"><a href="#cb5-8" aria-hidden="true" tabindex="-1"></a>  <span class="kw">let</span> camera <span class="ot">=</span> <span class="dt">RL.Camera3D</span> (<span class="dt">Vector3</span> <span class="dv">0</span> <span class="dv">1</span> <span class="dv">0</span>) (<span class="dt">Vector3</span> <span class="dv">2</span> <span class="dv">1</span> <span class="dv">1</span>) (<span class="dt">Vector3</span> <span class="dv">0</span> <span class="dv">1</span> <span class="dv">0</span>) <span class="dv">70</span></span>
<span id="cb5-9"><a href="#cb5-9" aria-hidden="true" tabindex="-1"></a>        RL.cameraProjection&#39;perspective</span>
<span id="cb5-10"><a href="#cb5-10" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb5-11"><a href="#cb5-11" aria-hidden="true" tabindex="-1"></a>  <span class="co">-- Create a global entity with our camera component</span></span>
<span id="cb5-12"><a href="#cb5-12" aria-hidden="true" tabindex="-1"></a>  <span class="co">-- &#39;set&#39; is an apecs function for setting a component&#39;s state on a given entity</span></span>
<span id="cb5-13"><a href="#cb5-13" aria-hidden="true" tabindex="-1"></a>  <span class="co">-- &#39;global&#39; refers to the singular and unique global entity of the game</span></span>
<span id="cb5-14"><a href="#cb5-14" aria-hidden="true" tabindex="-1"></a>  <span class="co">-- &#39;Camera&#39; refers to the constructor for our component which contains a RL.3DCamera</span></span>
<span id="cb5-15"><a href="#cb5-15" aria-hidden="true" tabindex="-1"></a>  set global <span class="op">$</span> <span class="dt">Camera</span> camera</span>
<span id="cb5-16"><a href="#cb5-16" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb5-17"><a href="#cb5-17" aria-hidden="true" tabindex="-1"></a>  <span class="co">-- The &#39;System&#39; monad has IO, remember &#39;System w a = SystemT w IO a&#39;!</span></span>
<span id="cb5-18"><a href="#cb5-18" aria-hidden="true" tabindex="-1"></a>  liftIO <span class="op">$</span> <span class="kw">do</span></span>
<span id="cb5-19"><a href="#cb5-19" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb5-20"><a href="#cb5-20" aria-hidden="true" tabindex="-1"></a>    <span class="co">-- Now we can compose side effects for IO, which is what h-raylib uses</span></span>
<span id="cb5-21"><a href="#cb5-21" aria-hidden="true" tabindex="-1"></a>    RL.initWindow <span class="dv">1920</span> <span class="dv">1080</span> <span class="st">&quot;App&quot;</span></span>
<span id="cb5-22"><a href="#cb5-22" aria-hidden="true" tabindex="-1"></a>    RL.setTargetFPS <span class="dv">60</span></span>
<span id="cb5-23"><a href="#cb5-23" aria-hidden="true" tabindex="-1"></a>    RL.setCameraMode camera RL.cameraMode&#39;firstPerson</span></code></pre></div>
<p>The biggest takeaway from the above snippet is to remember that just because we’re in Apecs-land doesn’t mean that we’re constrained to only using Apecs functions. <code>System</code> is a <code>type</code> constructor for <code>SystemT</code>, which <code>apecs</code> documentation explains:</p>
<blockquote>
<p>A <code>SystemT</code> is a newtype around <code>ReaderT w m a</code>, where <code>w</code> is the game world variable. Systems serve to:</p>
<ul>
<li>Allow type-based lookup of a component’s store through <code>getStore</code>.</li>
<li>Lift side effects into their host Monad.</li>
</ul>
</blockquote>
<p>We can do <code>IO</code> 🎉 Before we continue though, let’s look into <code>terminate</code>, since it’s good practice to always write in programming to always write <code>delete</code> where there’s <code>new</code>, or a <em>destructor</em> whenever you write a <em>constructor</em>. We have made our window, so let’s handle closing it before we forget:</p>
<div class="sourceCode" id="cb6"><pre class="sourceCode hs"><code class="sourceCode haskell"><span id="cb6-1"><a href="#cb6-1" aria-hidden="true" tabindex="-1"></a><span class="co">-- When terminate is called, just close the window</span></span>
<span id="cb6-2"><a href="#cb6-2" aria-hidden="true" tabindex="-1"></a><span class="ot">terminate ::</span> <span class="dt">System</span> <span class="dt">World</span> ()</span>
<span id="cb6-3"><a href="#cb6-3" aria-hidden="true" tabindex="-1"></a>terminate <span class="ot">=</span> liftIO RL.closeWindow</span></code></pre></div>
<p>This is a short and sweet one!</p>
<div class="help infobox fill-horizontal">
<div class="header">
<span class="las la-question-circle mr-3"></span>Why didn't we just manage the window in main?
</div>
<p>The question on your mind might be <em>“why did we need to do this in a <code>System</code>?”</em> The answer to that lies in the names: <code>initialise</code> and <code>terminate</code>. Yes, the Raylib specific stuff could be done purely in <code>IO</code> without Apecs getting involved, but this is constraining.</p>
<p>What if we want to store the want to load and save data using a file when the application opens and closes? What if we need to correct the state of the game before we enter the game loop, or after it’s concluded? So long as we’re in a <code>System</code>, we have access to all the components in the <code>World</code>; exiting back into <code>IO</code> removes this ability and so I prefer to use <code>liftIO</code> within <code>System</code> to get the best of both worlds.</p>
</div>
</section>
<section id="updating-and-rendering" class="article-section">
<h3><span>Updating and rendering</span><a href="#updating-and-rendering" class="anchor las la-link" title="updating-and-rendering"></a></h3>
<p>We aren’t quite done with our single-file example since we have one remaining undefined function: <code>run</code>. Let’s dive in:</p>
<div class="sourceCode" id="cb7"><pre class="sourceCode hs"><code class="sourceCode haskell"><span id="cb7-1"><a href="#cb7-1" aria-hidden="true" tabindex="-1"></a><span class="ot">run ::</span> <span class="dt">System</span> <span class="dt">World</span> ()</span>
<span id="cb7-2"><a href="#cb7-2" aria-hidden="true" tabindex="-1"></a>run <span class="ot">=</span> <span class="kw">do</span></span>
<span id="cb7-3"><a href="#cb7-3" aria-hidden="true" tabindex="-1"></a>  update</span>
<span id="cb7-4"><a href="#cb7-4" aria-hidden="true" tabindex="-1"></a>  render</span>
<span id="cb7-5"><a href="#cb7-5" aria-hidden="true" tabindex="-1"></a>  shouldClose <span class="ot">&lt;-</span> liftIO RL.windowShouldClose</span>
<span id="cb7-6"><a href="#cb7-6" aria-hidden="true" tabindex="-1"></a>  unless shouldClose run</span></code></pre></div>
<p>Hang on a moment, this is a <strong>game loop</strong>! So in <code>main</code>, we had <code>initialise &gt;&gt; run &gt;&gt; terminate</code>, you can now see that the reason the program doesn’t terminate immediately is because <code>run</code> is hogging the thread and infinitely looping until told otherwise!</p>
<p>So what are <code>update</code> and <code>render</code>? Well, when you are in a monad be it <code>IO</code> or <code>System</code>, you can easily call functions of the same monadic type to compose side effects. You could pretty much substitute <code>update</code> and <code>render</code> for their contents and everything will work the same; this is a way of breaking things up. I like updating the game and then rendering the result. We can split these two steps into as many more steps as we need, but for our single file example they are singular systems that just handle the entire game.</p>
<div class="sourceCode" id="cb8"><pre class="sourceCode hs"><code class="sourceCode haskell"><span id="cb8-1"><a href="#cb8-1" aria-hidden="true" tabindex="-1"></a><span class="co">-- Simple system</span></span>
<span id="cb8-2"><a href="#cb8-2" aria-hidden="true" tabindex="-1"></a><span class="ot">update ::</span> <span class="dt">System</span> <span class="dt">World</span> ()</span>
<span id="cb8-3"><a href="#cb8-3" aria-hidden="true" tabindex="-1"></a>update <span class="ot">=</span> <span class="kw">do</span></span>
<span id="cb8-4"><a href="#cb8-4" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb8-5"><a href="#cb8-5" aria-hidden="true" tabindex="-1"></a>  <span class="co">-- Retrieve the camera component from the global entity (c is a RL.Camera3D)</span></span>
<span id="cb8-6"><a href="#cb8-6" aria-hidden="true" tabindex="-1"></a>  <span class="dt">Camera</span> c <span class="ot">&lt;-</span> get global</span>
<span id="cb8-7"><a href="#cb8-7" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb8-8"><a href="#cb8-8" aria-hidden="true" tabindex="-1"></a>  <span class="co">-- Update the camera and store the updated version in c&#39;</span></span>
<span id="cb8-9"><a href="#cb8-9" aria-hidden="true" tabindex="-1"></a>  <span class="co">-- Also note the use of liftIO to dip into the IO monad to allow the use of raylib</span></span>
<span id="cb8-10"><a href="#cb8-10" aria-hidden="true" tabindex="-1"></a>  c&#39; <span class="ot">&lt;-</span> liftIO <span class="op">$</span> RL.updateCamera c</span>
<span id="cb8-11"><a href="#cb8-11" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb8-12"><a href="#cb8-12" aria-hidden="true" tabindex="-1"></a>  <span class="co">-- Replace the global entity&#39;s Camera with a new one containing the updated camera</span></span>
<span id="cb8-13"><a href="#cb8-13" aria-hidden="true" tabindex="-1"></a>  set global <span class="op">$</span> <span class="dt">Camera</span> c&#39;</span></code></pre></div>
<p>I was a bit alarmed at first at how small this function is — where is the input handling? Where’s the movement speed definitions and all the other things we expect to see in a first-person game? Well it looks like Raylib is has some very plug-and-play style functions, which is nice to see when playing around. I’m sure anyone looking to make an FPS will be able to roll their own movement system, but for us we’ll be removing this pretty quickly since funnily enough Notakto is not a competitor to <a href="https://www.callofduty.com/uk/en/">Call of Duty</a>.</p>
<div class="sourceCode" id="cb9"><pre class="sourceCode hs"><code class="sourceCode haskell"><span id="cb9-1"><a href="#cb9-1" aria-hidden="true" tabindex="-1"></a><span class="ot">render ::</span> <span class="dt">System</span> <span class="dt">World</span> ()</span>
<span id="cb9-2"><a href="#cb9-2" aria-hidden="true" tabindex="-1"></a>render <span class="ot">=</span> <span class="kw">do</span></span>
<span id="cb9-3"><a href="#cb9-3" aria-hidden="true" tabindex="-1"></a>  <span class="dt">Camera</span> camera <span class="ot">&lt;-</span> get global</span>
<span id="cb9-4"><a href="#cb9-4" aria-hidden="true" tabindex="-1"></a>  liftIO <span class="op">$</span> <span class="kw">do</span></span>
<span id="cb9-5"><a href="#cb9-5" aria-hidden="true" tabindex="-1"></a>    RL.beginDrawing</span>
<span id="cb9-6"><a href="#cb9-6" aria-hidden="true" tabindex="-1"></a>    RL.clearBackground RL.black</span>
<span id="cb9-7"><a href="#cb9-7" aria-hidden="true" tabindex="-1"></a>    RL.drawFPS <span class="dv">10</span> <span class="dv">20</span></span>
<span id="cb9-8"><a href="#cb9-8" aria-hidden="true" tabindex="-1"></a>    RL.beginMode3D camera</span>
<span id="cb9-9"><a href="#cb9-9" aria-hidden="true" tabindex="-1"></a>    RL.drawGrid <span class="dv">10</span> <span class="dv">1</span></span>
<span id="cb9-10"><a href="#cb9-10" aria-hidden="true" tabindex="-1"></a>    RL.drawCircle3D (<span class="dt">Vector3</span> <span class="dv">2</span> <span class="dv">1</span> <span class="dv">1</span>) <span class="dv">2</span> (<span class="dt">Vector3</span> <span class="dv">0</span> <span class="dv">1</span> <span class="dv">0</span>) <span class="dv">0</span> RL.white</span>
<span id="cb9-11"><a href="#cb9-11" aria-hidden="true" tabindex="-1"></a>    RL.drawLine3D (<span class="dt">Vector3</span> <span class="dv">3</span> <span class="dv">0</span> <span class="dv">1</span>) (<span class="dt">Vector3</span> <span class="dv">1</span> <span class="dv">2</span> <span class="dv">1</span>) RL.white</span>
<span id="cb9-12"><a href="#cb9-12" aria-hidden="true" tabindex="-1"></a>    RL.drawLine3D (<span class="dt">Vector3</span> <span class="dv">3</span> <span class="dv">2</span> <span class="dv">1</span>) (<span class="dt">Vector3</span> <span class="dv">1</span> <span class="dv">0</span> <span class="dv">1</span>) RL.white</span>
<span id="cb9-13"><a href="#cb9-13" aria-hidden="true" tabindex="-1"></a>    RL.drawCubeWiresV (<span class="dt">Vector3</span> (<span class="op">-</span><span class="dv">2</span>) <span class="dv">1</span> <span class="dv">0</span>) (<span class="dt">Vector3</span> <span class="dv">1</span> <span class="dv">2</span> <span class="dv">1</span>) RL.white</span>
<span id="cb9-14"><a href="#cb9-14" aria-hidden="true" tabindex="-1"></a>    RL.endMode3D</span>
<span id="cb9-15"><a href="#cb9-15" aria-hidden="true" tabindex="-1"></a>    RL.endDrawing</span></code></pre></div>
<p>The <code>render</code> system is very straightforward. We grab our camera out of our Apecs <code>World</code> and then use it in the <code>IO</code> monad to help Raylib render the world. I won’t go into much detail here.</p>
<p>After what feels like an eternity (it has taken me 2 hours to write this!), here’s our single file example up and running! Time for a toilet break and a glass of water!</p>
<div class="caption-frame apply-shadow">
<img src="https://res.cloudinary.com/aas-sh/image/upload/v1668335749/blog/2022/11/13-11-2022_10_35_33_e1xmdy.png" title="Screenshot of the single file example running." class="w-full object-cover" alt="Screenshot of the single file example running." />
<div class="caption">
<p>Screenshot of the single file example running.</p>
<div class="caption-source">
<a href="https://github.com/Ashe/Notakto/tree/dd26d756904358cc907a8db11ae66392f45bfa96" title="Notakto">Notakto</a>
</div>
</div>
</div>
<div class="gitrepo infobox fill-horizontal">
<div class="header">
<span class="lab la-github mr-3"></span>Repository - Notakto
</div>
<p>A link to the corresponding commit for the previous section can be found <a href="https://github.com/Ashe/Notakto/tree/0852350c18071b6332899639055d3c38c1976963">here</a>.</p>
</div>
</section>
</section>
</section>
<section id="visualising-the-state-of-the-game" class="article-section">
<h1><span>Visualising the state of the game</span><a href="#visualising-the-state-of-the-game" class="anchor las la-link" title="visualising-the-state-of-the-game"></a></h1>
<section id="what-should-be-an-entity" class="article-section">
<h2><span>What should be an entity?</span><a href="#what-should-be-an-entity" class="anchor las la-link" title="what-should-be-an-entity"></a></h2>
<p>I believe that the next step of this project is to visualise the boards and the marks placed upon them. In terms of priority, I want to get the visuals set up first otherwise testing the game is going to be a pain, but in order to get that done we need to create a basic representation of state!</p>
<p>So, representations of state — <code>data</code> types! Let’s make some new types to represent things we’ll need in our game! But wait.. Do you hear alarm bells?</p>
<div class="danger infobox fill-horizontal">
<div class="header">
<span class="las la-exclamation-circle mr-3"></span>Danger - Don't rush!
</div>
<p>While it’s all fun and games to get experimental and start playing around with Haskell’s wonderful type system, sometimes we can get bogged down in actually using these types and trying to make them work.</p>
<p>Let’s take a moment to appreciate the blank slate we have right now and come up with at least a hypothesis for how things should be laid out.</p>
</div>
<p>After heeding that warning, let’s create an action plan. What should consist of an entity in our game? More specifically, should the boards themselves be entities? Should the marks that players place be entities? One could argue that both the board itself and the crosses placed could be entities. I disagree; I believe that the crosses don’t really make sense without the context of a board, and so there’d be little use in having an entity representing each cross in isolation (it might even make things more confusing trying to figure out which board each cross is on).</p>
<div class="caption-frame apply-shadow">
<table>
<colgroup>
<col style="width: 14%" />
<col style="width: 14%" />
<col style="width: 71%" />
</colgroup>
<thead>
<tr class="header">
<th style="text-align: center;">Thing</th>
<th style="text-align: center;">Is Entity?</th>
<th style="text-align: center;">Reasoning</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: center;">Player</td>
<td style="text-align: center;">Maybe</td>
<td style="text-align: center;">The player won’t have much data of their own; they can be represented elsewhere. If it turns out we want things like customisable player names and colours then they could become entities.</td>
</tr>
<tr class="even">
<td style="text-align: center;">‘Game’</td>
<td style="text-align: center;">Global</td>
<td style="text-align: center;">The global entity can contain a component with the information for who’s turn it is (either player one or player two).</td>
</tr>
<tr class="odd">
<td style="text-align: center;">Cross</td>
<td style="text-align: center;">No</td>
<td style="text-align: center;">Crosses don’t have much of their own data other than their location, which is dependent on the board. Standard Haskell data types will suffice. If they were their own entity, we could potentially have more than nine crosses assigned to a signle board.</td>
</tr>
<tr class="even">
<td style="text-align: center;">Board</td>
<td style="text-align: center;">Yes</td>
<td style="text-align: center;">Boards contain the state of crosses placed on them, as well as whether they are ‘dead’ or not. Their state will need to be rendered.</td>
</tr>
</tbody>
</table>
<div class="caption">
<p>A table describing my plan for entities in Notakto.</p>
<div class="caption-source">
<a href="https://github.com/Ashe/Notakto/tree/e71210405272674b49929c70cca0e2006df3888e" title="Notakto">Notakto</a>
</div>
</div>
</div>
<p>I believe that’s all we need to think about to get started; let’s do some programming.</p>
</section>
<section id="the-types-module" class="article-section">
<h2><span>The Types module</span><a href="#the-types-module" class="anchor las la-link" title="the-types-module"></a></h2>
<p>A single-file example is nice, but is only going to impede us going forward; let’s make a new module containing all of our components and miscellaneous types: <code>Types.hs</code>!</p>
<div class="sourceCode" id="cb10"><pre class="sourceCode hs"><code class="sourceCode haskell"><span id="cb10-1"><a href="#cb10-1" aria-hidden="true" tabindex="-1"></a><span class="ot">{-# OPTIONS -Wall #-}</span></span>
<span id="cb10-2"><a href="#cb10-2" aria-hidden="true" tabindex="-1"></a><span class="ot">{-# LANGUAGE FlexibleInstances #-}</span></span>
<span id="cb10-3"><a href="#cb10-3" aria-hidden="true" tabindex="-1"></a><span class="ot">{-# LANGUAGE MultiParamTypeClasses #-}</span></span>
<span id="cb10-4"><a href="#cb10-4" aria-hidden="true" tabindex="-1"></a><span class="ot">{-# LANGUAGE TemplateHaskell #-}</span></span>
<span id="cb10-5"><a href="#cb10-5" aria-hidden="true" tabindex="-1"></a><span class="ot">{-# LANGUAGE TypeFamilies #-}</span></span>
<span id="cb10-6"><a href="#cb10-6" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb10-7"><a href="#cb10-7" aria-hidden="true" tabindex="-1"></a><span class="kw">module</span> <span class="dt">Types</span> (</span>
<span id="cb10-8"><a href="#cb10-8" aria-hidden="true" tabindex="-1"></a>  <span class="dt">World</span>,</span>
<span id="cb10-9"><a href="#cb10-9" aria-hidden="true" tabindex="-1"></a>  initWorld,</span>
<span id="cb10-10"><a href="#cb10-10" aria-hidden="true" tabindex="-1"></a>  <span class="dt">Camera</span> (<span class="op">..</span>),</span>
<span id="cb10-11"><a href="#cb10-11" aria-hidden="true" tabindex="-1"></a>) <span class="kw">where</span></span>
<span id="cb10-12"><a href="#cb10-12" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb10-13"><a href="#cb10-13" aria-hidden="true" tabindex="-1"></a><span class="kw">import</span> <span class="dt">Apecs</span></span>
<span id="cb10-14"><a href="#cb10-14" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb10-15"><a href="#cb10-15" aria-hidden="true" tabindex="-1"></a><span class="kw">import</span> <span class="kw">qualified</span> <span class="dt">Raylib.Types</span> <span class="kw">as</span> <span class="dt">RL</span></span>
<span id="cb10-16"><a href="#cb10-16" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb10-17"><a href="#cb10-17" aria-hidden="true" tabindex="-1"></a><span class="kw">newtype</span> <span class="dt">Camera</span> <span class="ot">=</span> <span class="dt">Camera</span> <span class="dt">RL.Camera3D</span></span>
<span id="cb10-18"><a href="#cb10-18" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb10-19"><a href="#cb10-19" aria-hidden="true" tabindex="-1"></a>makeWorldAndComponents <span class="st">&quot;World&quot;</span> [&#39;<span class="dt">&#39;Camera</span>]</span></code></pre></div>
<p>So I’ve moved all language extensions into this new file, since they’re only relevant for the <code>World</code> initialisation code. We now have a cleaner space to declare new data types, and since components <em>should</em> be simple, we should be fine to place them all in here for the duration of this project.</p>
</section>
<section id="the-boardcomponent" class="article-section">
<h2><span>The BoardComponent</span><a href="#the-boardcomponent" class="anchor las la-link" title="the-boardcomponent"></a></h2>
<p>In the previous section, we asked the question “what should be an entity?” Now that we know of some certain entities, we now need to think about what components we might like to attach. The one I’m most interested in right now is a representation of a board, the standard tic-tac-toe battle ground.</p>
<div class="sourceCode" id="cb11"><pre class="sourceCode hs"><code class="sourceCode haskell"><span id="cb11-1"><a href="#cb11-1" aria-hidden="true" tabindex="-1"></a><span class="co">-----------</span></span>
<span id="cb11-2"><a href="#cb11-2" aria-hidden="true" tabindex="-1"></a><span class="co">-- Types --</span></span>
<span id="cb11-3"><a href="#cb11-3" aria-hidden="true" tabindex="-1"></a><span class="co">-----------</span></span>
<span id="cb11-4"><a href="#cb11-4" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb11-5"><a href="#cb11-5" aria-hidden="true" tabindex="-1"></a><span class="kw">data</span> <span class="dt">Cell</span> <span class="ot">=</span> <span class="dt">Empty</span> <span class="op">|</span> <span class="dt">Filled</span> <span class="kw">deriving</span> (<span class="dt">Show</span>, <span class="dt">Eq</span>)</span>
<span id="cb11-6"><a href="#cb11-6" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb11-7"><a href="#cb11-7" aria-hidden="true" tabindex="-1"></a><span class="co">----------------</span></span>
<span id="cb11-8"><a href="#cb11-8" aria-hidden="true" tabindex="-1"></a><span class="co">-- Components --</span></span>
<span id="cb11-9"><a href="#cb11-9" aria-hidden="true" tabindex="-1"></a><span class="co">----------------</span></span>
<span id="cb11-10"><a href="#cb11-10" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb11-11"><a href="#cb11-11" aria-hidden="true" tabindex="-1"></a><span class="kw">newtype</span> <span class="dt">CameraComponent</span> <span class="ot">=</span> <span class="dt">Camera</span> <span class="dt">RL.Camera3D</span></span>
<span id="cb11-12"><a href="#cb11-12" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb11-13"><a href="#cb11-13" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb11-14"><a href="#cb11-14" aria-hidden="true" tabindex="-1"></a><span class="kw">data</span> <span class="dt">BoardComponent</span> <span class="ot">=</span> <span class="dt">Board</span> {</span>
<span id="cb11-15"><a href="#cb11-15" aria-hidden="true" tabindex="-1"></a><span class="ot">  _tl ::</span> <span class="dt">Cell</span>,<span class="ot"> _tc ::</span> <span class="dt">Cell</span>,<span class="ot"> _tr ::</span> <span class="dt">Cell</span>,</span>
<span id="cb11-16"><a href="#cb11-16" aria-hidden="true" tabindex="-1"></a><span class="ot">  _ml ::</span> <span class="dt">Cell</span>,<span class="ot"> _mc ::</span> <span class="dt">Cell</span>,<span class="ot"> _mr ::</span> <span class="dt">Cell</span>,</span>
<span id="cb11-17"><a href="#cb11-17" aria-hidden="true" tabindex="-1"></a><span class="ot">  _bl ::</span> <span class="dt">Cell</span>,<span class="ot"> _bc ::</span> <span class="dt">Cell</span>,<span class="ot"> _br ::</span> <span class="dt">Cell</span></span>
<span id="cb11-18"><a href="#cb11-18" aria-hidden="true" tabindex="-1"></a>} <span class="kw">deriving</span> (<span class="dt">Show</span>, <span class="dt">Eq</span>)</span>
<span id="cb11-19"><a href="#cb11-19" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb11-20"><a href="#cb11-20" aria-hidden="true" tabindex="-1"></a>makeWorldAndComponents <span class="st">&quot;World&quot;</span> [&#39;<span class="dt">&#39;CameraComponent</span>, &#39;<span class="dt">&#39;BoardComponent</span>]</span></code></pre></div>
<p>This will do for now I think, no need to get too fancy. One thing I’d like to draw your attention to is the separation of standard types and types that are used as components — components are the things you’ll be operating on when using Apecs, so try to organise your code in a way which makes sense to you. I’ve appended <code>Component</code> to my component types, but I’ve omitted it from my data constructors so I don’t have to type it out as much.</p>
<p>Now go back to <code>Lib.hs</code> and fix any errors we have and ensure things still run. Let’s also create an entity with <code>BoardComponent</code>s to represent a singular board while we’re at it!</p>
<div class="sourceCode" id="cb12"><pre class="sourceCode hs"><code class="sourceCode haskell"><span id="cb12-1"><a href="#cb12-1" aria-hidden="true" tabindex="-1"></a><span class="ot">initialise ::</span> <span class="dt">System</span> <span class="dt">World</span> ()</span>
<span id="cb12-2"><a href="#cb12-2" aria-hidden="true" tabindex="-1"></a>initialise <span class="ot">=</span> <span class="kw">do</span></span>
<span id="cb12-3"><a href="#cb12-3" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb12-4"><a href="#cb12-4" aria-hidden="true" tabindex="-1"></a>      <span class="co">-- Update location of camera so we can look at origin</span></span>
<span id="cb12-5"><a href="#cb12-5" aria-hidden="true" tabindex="-1"></a>  <span class="kw">let</span> camera <span class="ot">=</span> <span class="dt">RL.Camera3D</span> (<span class="dt">Vector3</span> <span class="dv">0</span> <span class="dv">1</span> <span class="dv">6</span>) (<span class="dt">Vector3</span> <span class="dv">0</span> <span class="dv">1</span> <span class="dv">0</span>) (<span class="dt">Vector3</span> <span class="dv">0</span> <span class="dv">1</span> <span class="dv">0</span>) <span class="dv">90</span></span>
<span id="cb12-6"><a href="#cb12-6" aria-hidden="true" tabindex="-1"></a>        RL.cameraProjection&#39;perspective</span>
<span id="cb12-7"><a href="#cb12-7" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb12-8"><a href="#cb12-8" aria-hidden="true" tabindex="-1"></a>      <span class="co">-- Define what a blank board looks like</span></span>
<span id="cb12-9"><a href="#cb12-9" aria-hidden="true" tabindex="-1"></a>      newBoard <span class="ot">=</span> <span class="dt">Board</span> <span class="dt">Empty</span> <span class="dt">Empty</span> <span class="dt">Empty</span> <span class="dt">Empty</span> <span class="dt">Empty</span> <span class="dt">Empty</span> <span class="dt">Empty</span> <span class="dt">Empty</span> <span class="dt">Empty</span></span>
<span id="cb12-10"><a href="#cb12-10" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb12-11"><a href="#cb12-11" aria-hidden="true" tabindex="-1"></a>  set global <span class="op">$</span> <span class="dt">Camera</span> camera</span>
<span id="cb12-12"><a href="#cb12-12" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb12-13"><a href="#cb12-13" aria-hidden="true" tabindex="-1"></a>  <span class="co">-- Create a new entity with a blank board</span></span>
<span id="cb12-14"><a href="#cb12-14" aria-hidden="true" tabindex="-1"></a>  <span class="co">-- Note: if you want the return value, omit &#39;_&#39;</span></span>
<span id="cb12-15"><a href="#cb12-15" aria-hidden="true" tabindex="-1"></a>  newEntity_ newBoard</span>
<span id="cb12-16"><a href="#cb12-16" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb12-17"><a href="#cb12-17" aria-hidden="true" tabindex="-1"></a>  liftIO <span class="op">$</span> <span class="kw">do</span></span>
<span id="cb12-18"><a href="#cb12-18" aria-hidden="true" tabindex="-1"></a>    RL.initWindow <span class="dv">1920</span> <span class="dv">1080</span> <span class="st">&quot;App&quot;</span></span>
<span id="cb12-19"><a href="#cb12-19" aria-hidden="true" tabindex="-1"></a>    RL.setTargetFPS <span class="dv">60</span></span>
<span id="cb12-20"><a href="#cb12-20" aria-hidden="true" tabindex="-1"></a>    RL.setCameraMode camera RL.cameraMode&#39;firstPerson</span></code></pre></div>
</section>
<section id="rendering" class="article-section">
<h2><span>Rendering</span><a href="#rendering" class="anchor las la-link" title="rendering"></a></h2>
<p>Now that we have some data floating around cyberspace it’s time to prove that we do indeed have some state by trying to visualise it. Now for the sake of fun, I’m going to <strong>continue to use the first-person camera</strong>. If this was any other project I’d throw it out the window, but it gives us an event handling system built as well as a great opportunity to experience Notakto in 3D! Throwing it away right now would just create a detour since we can use it in the short term to explore our world.</p>
<div class="help infobox fill-horizontal">
<div class="header">
<span class="las la-question-circle mr-3"></span>What if I want to do 2D?
</div>
<p>If you’re planning to use this project as a springboard for a 2D project, you might be thinking of splintering off here and doing some exploration with Raylib’s 2D camera. I have to say that it doesn’t look too scary, so maybe this would be a good point for you to take a break and play around with it. We will be using cubes and 3D shapes to represent our boards in 3D space, so you’ll have to translate things as you go. If you want to continue using 3D, I’m sure it wouldn’t take long to switch it out for 2D later down the line.</p>
<p>If you choose to split off now, good luck!</p>
</div>
<p>Once again, I’m going to make a new module: <code>Rendering.hs</code>. This module is going to import <code>Types</code> and be imported by our main <code>Lib</code> module. This module will house all the dirty Raylib rendering things so that our main file can be more gameplay-focused. I’ve also moved the <code>render</code> function into this module so that we only have to export a single function for the entire module.</p>
<div class="sourceCode" id="cb13"><pre class="sourceCode hs"><code class="sourceCode haskell"><span id="cb13-1"><a href="#cb13-1" aria-hidden="true" tabindex="-1"></a><span class="kw">module</span> <span class="dt">Rendering</span> (</span>
<span id="cb13-2"><a href="#cb13-2" aria-hidden="true" tabindex="-1"></a>  render</span>
<span id="cb13-3"><a href="#cb13-3" aria-hidden="true" tabindex="-1"></a>) <span class="kw">where</span></span>
<span id="cb13-4"><a href="#cb13-4" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb13-5"><a href="#cb13-5" aria-hidden="true" tabindex="-1"></a><span class="kw">import</span> <span class="dt">Apecs</span></span>
<span id="cb13-6"><a href="#cb13-6" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb13-7"><a href="#cb13-7" aria-hidden="true" tabindex="-1"></a><span class="kw">import</span> <span class="kw">qualified</span> <span class="dt">Raylib</span> <span class="kw">as</span> <span class="dt">RL</span></span>
<span id="cb13-8"><a href="#cb13-8" aria-hidden="true" tabindex="-1"></a><span class="kw">import</span> <span class="kw">qualified</span> <span class="dt">Raylib.Colors</span> <span class="kw">as</span> <span class="dt">RL</span></span>
<span id="cb13-9"><a href="#cb13-9" aria-hidden="true" tabindex="-1"></a><span class="kw">import</span> <span class="kw">qualified</span> <span class="dt">Raylib.Constants</span> <span class="kw">as</span> <span class="dt">RL</span></span>
<span id="cb13-10"><a href="#cb13-10" aria-hidden="true" tabindex="-1"></a><span class="kw">import</span> <span class="kw">qualified</span> <span class="dt">Raylib.Types</span> <span class="kw">as</span> <span class="dt">RL</span></span>
<span id="cb13-11"><a href="#cb13-11" aria-hidden="true" tabindex="-1"></a><span class="kw">import</span> <span class="dt">Raylib.Types</span> (<span class="dt">Vector3</span> (..))</span>
<span id="cb13-12"><a href="#cb13-12" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb13-13"><a href="#cb13-13" aria-hidden="true" tabindex="-1"></a><span class="kw">import</span> <span class="dt">Types</span></span>
<span id="cb13-14"><a href="#cb13-14" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb13-15"><a href="#cb13-15" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb13-16"><a href="#cb13-16" aria-hidden="true" tabindex="-1"></a><span class="ot">render ::</span> <span class="dt">System</span> <span class="dt">World</span> ()</span>
<span id="cb13-17"><a href="#cb13-17" aria-hidden="true" tabindex="-1"></a>render <span class="ot">=</span> <span class="kw">do</span></span>
<span id="cb13-18"><a href="#cb13-18" aria-hidden="true" tabindex="-1"></a>  <span class="dt">Camera</span> camera <span class="ot">&lt;-</span> get global</span>
<span id="cb13-19"><a href="#cb13-19" aria-hidden="true" tabindex="-1"></a>  liftIO <span class="op">$</span> <span class="kw">do</span></span>
<span id="cb13-20"><a href="#cb13-20" aria-hidden="true" tabindex="-1"></a>    RL.beginDrawing</span>
<span id="cb13-21"><a href="#cb13-21" aria-hidden="true" tabindex="-1"></a>    RL.clearBackground RL.black</span>
<span id="cb13-22"><a href="#cb13-22" aria-hidden="true" tabindex="-1"></a>    RL.drawFPS <span class="dv">10</span> <span class="dv">20</span></span>
<span id="cb13-23"><a href="#cb13-23" aria-hidden="true" tabindex="-1"></a>    RL.beginMode3D camera</span>
<span id="cb13-24"><a href="#cb13-24" aria-hidden="true" tabindex="-1"></a>    RL.drawGrid <span class="dv">10</span> <span class="dv">1</span></span>
<span id="cb13-25"><a href="#cb13-25" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb13-26"><a href="#cb13-26" aria-hidden="true" tabindex="-1"></a>  <span class="co">-- Our systems are sandwiched between the &#39;begin&#39; and &#39;end&#39; functions</span></span>
<span id="cb13-27"><a href="#cb13-27" aria-hidden="true" tabindex="-1"></a>  renderBoards</span>
<span id="cb13-28"><a href="#cb13-28" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb13-29"><a href="#cb13-29" aria-hidden="true" tabindex="-1"></a>  liftIO <span class="op">$</span> <span class="kw">do</span></span>
<span id="cb13-30"><a href="#cb13-30" aria-hidden="true" tabindex="-1"></a>    RL.endMode3D</span>
<span id="cb13-31"><a href="#cb13-31" aria-hidden="true" tabindex="-1"></a>    RL.endDrawing</span>
<span id="cb13-32"><a href="#cb13-32" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb13-33"><a href="#cb13-33" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb13-34"><a href="#cb13-34" aria-hidden="true" tabindex="-1"></a><span class="ot">renderBoards ::</span> <span class="dt">System</span> <span class="dt">World</span> ()</span>
<span id="cb13-35"><a href="#cb13-35" aria-hidden="true" tabindex="-1"></a>renderBoards <span class="ot">=</span> <span class="fu">undefined</span></span></code></pre></div>
<p>Time to get creative! We need to draw some array of cubes and shapes to visualise the board! Our use of <code>RL.drawGrid</code> means we can visualise the units of the world — the grid is spaced such that each cell is 1 unit by 1 unit. Now we just need to draw 4 cuboids to mock out a hash symbol.</p>
<div class="sourceCode" id="cb14"><pre class="sourceCode hs"><code class="sourceCode haskell"><span id="cb14-1"><a href="#cb14-1" aria-hidden="true" tabindex="-1"></a><span class="co">-- Those experienced with monads can probably guess what cmapM_ does</span></span>
<span id="cb14-2"><a href="#cb14-2" aria-hidden="true" tabindex="-1"></a><span class="ot">renderBoards ::</span> <span class="dt">System</span> <span class="dt">World</span> ()</span>
<span id="cb14-3"><a href="#cb14-3" aria-hidden="true" tabindex="-1"></a>renderBoards <span class="ot">=</span> cmapM_ renderBoard</span>
<span id="cb14-4"><a href="#cb14-4" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb14-5"><a href="#cb14-5" aria-hidden="true" tabindex="-1"></a><span class="co">-- The signature of this function also qualifies as a condition, only the</span></span>
<span id="cb14-6"><a href="#cb14-6" aria-hidden="true" tabindex="-1"></a><span class="co">-- entities that satisfy said condition will have this function mapped onto them</span></span>
<span id="cb14-7"><a href="#cb14-7" aria-hidden="true" tabindex="-1"></a><span class="co">-- In short, only entities with a BoardComponent get rendered via this function</span></span>
<span id="cb14-8"><a href="#cb14-8" aria-hidden="true" tabindex="-1"></a><span class="ot">renderBoard ::</span> <span class="dt">BoardComponent</span> <span class="ot">-&gt;</span> <span class="dt">System</span> <span class="dt">World</span> ()</span>
<span id="cb14-9"><a href="#cb14-9" aria-hidden="true" tabindex="-1"></a>renderBoard b <span class="ot">=</span> liftIO <span class="op">$</span> <span class="kw">do</span></span>
<span id="cb14-10"><a href="#cb14-10" aria-hidden="true" tabindex="-1"></a>  RL.drawCube (<span class="dt">Vector3</span> <span class="fl">0.5</span>    <span class="fl">1.5</span> <span class="dv">0</span>) t <span class="dv">3</span> t RL.white</span>
<span id="cb14-11"><a href="#cb14-11" aria-hidden="true" tabindex="-1"></a>  RL.drawCube (<span class="dt">Vector3</span> (<span class="op">-</span><span class="fl">0.5</span>) <span class="fl">1.5</span> <span class="dv">0</span>) t <span class="dv">3</span> t RL.white</span>
<span id="cb14-12"><a href="#cb14-12" aria-hidden="true" tabindex="-1"></a>  RL.drawCube (<span class="dt">Vector3</span> <span class="dv">0</span> <span class="dv">1</span> <span class="dv">0</span>) <span class="dv">3</span> t t RL.white</span>
<span id="cb14-13"><a href="#cb14-13" aria-hidden="true" tabindex="-1"></a>  RL.drawCube (<span class="dt">Vector3</span> <span class="dv">0</span> <span class="dv">2</span> <span class="dv">0</span>) <span class="dv">3</span> t t RL.white</span>
<span id="cb14-14"><a href="#cb14-14" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb14-15"><a href="#cb14-15" aria-hidden="true" tabindex="-1"></a>  <span class="co">-- &#39;t&#39; is the thickness here</span></span>
<span id="cb14-16"><a href="#cb14-16" aria-hidden="true" tabindex="-1"></a>  <span class="kw">where</span> t <span class="ot">=</span> <span class="fl">0.05</span></span></code></pre></div>
<p>The key takeaway here is <code>cmapM_</code>. Let’s quickly recap the other variants so that we can deduce what this does (I’m going to shorten the type signatures a bit here):</p>
<blockquote>
<div class="sourceCode" id="cb15"><pre class="sourceCode hs"><code class="sourceCode haskell"><span id="cb15-1"><a href="#cb15-1" aria-hidden="true" tabindex="-1"></a><span class="ot">cmap ::</span> (cx <span class="ot">-&gt;</span> cy) <span class="ot">-&gt;</span> <span class="dt">System</span> w ()</span></code></pre></div>
</blockquote>
<p>This function maps a standard, non-monadic function onto all entities with <code>cx</code>. What is <code>cx</code> you might ask? Well I shortened the type signature for the blog (sorry) but it’s a polymorphic parameter representing a bundle of components. Apecs leverages Haskell’s type system to intelligently select all entities that meet the criteria for <code>cx</code>. A singular type is one of the simplest forms of using this function; notice how our <code>renderBoard</code> function <em>requires</em> a parameter of <code>BoardComponent</code>. We can actually specify more than just a single component, and Apecs will use that group as <code>cx</code>. Similarly, <code>cy</code> is a group of components to be output.</p>
<blockquote>
<div class="sourceCode" id="cb16"><pre class="sourceCode hs"><code class="sourceCode haskell"><span id="cb16-1"><a href="#cb16-1" aria-hidden="true" tabindex="-1"></a><span class="ot">cmapM ::</span> (cx <span class="ot">-&gt;</span> <span class="dt">System</span> w cy) <span class="ot">-&gt;</span> <span class="dt">System</span> w ()</span></code></pre></div>
</blockquote>
<p>This function is very similar to <code>cmap</code> with one exception — the function mapped onto entities returns a composable side-effect of the <code>System</code> monad, which also means <em>access to <code>IO</code></em> as well as other Apecs functions. You will typically use <code>pure &lt;your components&gt;</code> to return things. Appending <code>M</code> to a function to denote the presence of a monad is very common in Haskell.</p>
<blockquote>
<div class="sourceCode" id="cb17"><pre class="sourceCode hs"><code class="sourceCode haskell"><span id="cb17-1"><a href="#cb17-1" aria-hidden="true" tabindex="-1"></a><span class="ot">cmapM_ ::</span> (cx <span class="ot">-&gt;</span> <span class="dt">System</span> w ()) <span class="ot">-&gt;</span> <span class="dt">System</span> w ()</span></code></pre></div>
</blockquote>
<p>Once again, very similar, except this time to <code>cmapM</code>. We still have access to monads, except the function we map onto entities no longer produces a <code>cy</code>. This means that the function you’re mapping onto your entities is there to only produce side-effects. In the case of <code>renderBoards</code>, we want to map a monad function to our entities, but we don’t need to return anything, so <code>cmapM_</code> is used.</p>
<p>After all of that, we have our first board rendered!</p>
<div class="caption-frame apply-shadow">
<img src="https://res.cloudinary.com/aas-sh/image/upload/v1668352718/blog/2022/11/13-11-2022_15_18_24_lfwnkh.png" title="Screenshot of our first board being rendered in 3D space." class="w-full object-cover" alt="Screenshot of our first board being rendered in 3D space." />
<div class="caption">
<p>Screenshot of our first board being rendered in 3D space.</p>
<div class="caption-source">
<a href="https://github.com/Ashe/Notakto/tree/e71210405272674b49929c70cca0e2006df3888e" title="Notakto">Notakto</a>
</div>
</div>
</div>
<p>What does this tell us? Well, if we had no entities in the game that contained a <code>BoardComponent</code>, this arrangement of sticks wouldn’t appear in the world at all! We have correctly defined, initialised, stored, read and visualised state, even on a very basic level!</p>
<p>There are some things however that this doesn’t tell us:</p>
<ul>
<li>It won’t tell us <strong>how many</strong> boards there are, they all render on top of each other.</li>
<li>It won’t show us <strong>the state of the board</strong>, since we aren’t rendering crosses yet.</li>
<li>It won’t help us realise <strong>why we should love the game of Notakto</strong>.</li>
</ul>
</section>
<section id="multiple-boards" class="article-section">
<h2><span>Multiple boards</span><a href="#multiple-boards" class="anchor las la-link" title="multiple-boards"></a></h2>
<p>Let’s address this issue of not being able to see multiple boards. There’s two ways I can think of for going about this:</p>
<ul>
<li>We could create a new component representing the origin of the board in 3D space.</li>
<li>We could count the number of boards and distribute them evenly along the x-axis.</li>
</ul>
<p>Honestly, we’ll probably end up doing option one eventually, but because I like the idea of boards being automatically arranged I’m going to go with option 2 for now. I think the end game is a mixture of both approaches, where we automatically generate positions for each board, for instance in a circle or something.</p>
<div class="sourceCode" id="cb18"><pre class="sourceCode hs"><code class="sourceCode haskell"><span id="cb18-1"><a href="#cb18-1" aria-hidden="true" tabindex="-1"></a><span class="ot">renderBoards ::</span> <span class="dt">System</span> <span class="dt">World</span> ()</span>
<span id="cb18-2"><a href="#cb18-2" aria-hidden="true" tabindex="-1"></a>renderBoards <span class="ot">=</span> <span class="kw">do</span></span>
<span id="cb18-3"><a href="#cb18-3" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb18-4"><a href="#cb18-4" aria-hidden="true" tabindex="-1"></a>  <span class="co">-- Now we count how many entities have a BoardComponent using cfold</span></span>
<span id="cb18-5"><a href="#cb18-5" aria-hidden="true" tabindex="-1"></a>  numBoards <span class="ot">&lt;-</span> cfold (\c (<span class="dt">Board</span>{}) <span class="ot">-&gt;</span> c <span class="op">+</span> <span class="dv">1</span>) <span class="dv">0</span></span>
<span id="cb18-6"><a href="#cb18-6" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb18-7"><a href="#cb18-7" aria-hidden="true" tabindex="-1"></a>  <span class="co">-- We provide the count to renderBoard</span></span>
<span id="cb18-8"><a href="#cb18-8" aria-hidden="true" tabindex="-1"></a>  <span class="co">-- Also, we want to FOLD now, since we&#39;re iterating through boards</span></span>
<span id="cb18-9"><a href="#cb18-9" aria-hidden="true" tabindex="-1"></a>  cfoldM_ (renderBoard numBoards) <span class="dv">0</span></span>
<span id="cb18-10"><a href="#cb18-10" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb18-11"><a href="#cb18-11" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb18-12"><a href="#cb18-12" aria-hidden="true" tabindex="-1"></a><span class="co">-- We now know the total number of boards as well as the current board</span></span>
<span id="cb18-13"><a href="#cb18-13" aria-hidden="true" tabindex="-1"></a><span class="ot">renderBoard ::</span> <span class="dt">Int</span> <span class="ot">-&gt;</span> <span class="dt">Int</span> <span class="ot">-&gt;</span> <span class="dt">BoardComponent</span> <span class="ot">-&gt;</span> <span class="dt">System</span> <span class="dt">World</span> <span class="dt">Int</span></span>
<span id="cb18-14"><a href="#cb18-14" aria-hidden="true" tabindex="-1"></a>renderBoard total i b <span class="ot">=</span> liftIO <span class="op">$</span> <span class="kw">do</span></span>
<span id="cb18-15"><a href="#cb18-15" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb18-16"><a href="#cb18-16" aria-hidden="true" tabindex="-1"></a>  <span class="co">-- Each of our cubes are now offset using a function we define below</span></span>
<span id="cb18-17"><a href="#cb18-17" aria-hidden="true" tabindex="-1"></a>  RL.drawCube (addVectors origin <span class="op">$</span> <span class="dt">Vector3</span> <span class="fl">0.5</span>    <span class="dv">0</span> <span class="dv">0</span>) t <span class="dv">3</span> t RL.white</span>
<span id="cb18-18"><a href="#cb18-18" aria-hidden="true" tabindex="-1"></a>  RL.drawCube (addVectors origin <span class="op">$</span> <span class="dt">Vector3</span> (<span class="op">-</span><span class="fl">0.5</span>) <span class="dv">0</span> <span class="dv">0</span>) t <span class="dv">3</span> t RL.white</span>
<span id="cb18-19"><a href="#cb18-19" aria-hidden="true" tabindex="-1"></a>  RL.drawCube (addVectors origin <span class="op">$</span> <span class="dt">Vector3</span> <span class="dv">0</span> <span class="fl">0.5</span> <span class="dv">0</span>) <span class="dv">3</span> t t RL.white</span>
<span id="cb18-20"><a href="#cb18-20" aria-hidden="true" tabindex="-1"></a>  RL.drawCube (addVectors origin <span class="op">$</span> <span class="dt">Vector3</span> <span class="dv">0</span> (<span class="op">-</span><span class="fl">0.5</span>) <span class="dv">0</span>) <span class="dv">3</span> t t RL.white</span>
<span id="cb18-21"><a href="#cb18-21" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb18-22"><a href="#cb18-22" aria-hidden="true" tabindex="-1"></a>  <span class="co">-- Return the next index (so we can track progress through iteration)</span></span>
<span id="cb18-23"><a href="#cb18-23" aria-hidden="true" tabindex="-1"></a>  <span class="fu">pure</span> <span class="op">$</span> i <span class="op">+</span> <span class="dv">1</span></span>
<span id="cb18-24"><a href="#cb18-24" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb18-25"><a href="#cb18-25" aria-hidden="true" tabindex="-1"></a>  <span class="co">-- Determine the origin of the board (4.5 = length of board (3) + padding (1.5))</span></span>
<span id="cb18-26"><a href="#cb18-26" aria-hidden="true" tabindex="-1"></a>  <span class="kw">where</span> offset <span class="ot">=</span> <span class="fu">fromIntegral</span> (total <span class="op">-</span> <span class="dv">1</span>) <span class="op">*</span> <span class="fl">0.5</span></span>
<span id="cb18-27"><a href="#cb18-27" aria-hidden="true" tabindex="-1"></a>        origin <span class="ot">=</span> <span class="dt">Vector3</span> (<span class="dt">CFloat</span> (<span class="fu">fromIntegral</span> i <span class="op">-</span> offset) <span class="op">*</span> <span class="fl">4.5</span>) <span class="fl">1.5</span> <span class="dv">0</span></span>
<span id="cb18-28"><a href="#cb18-28" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb18-29"><a href="#cb18-29" aria-hidden="true" tabindex="-1"></a>        <span class="co">-- Convenience function for adding a vector to the origin, used above</span></span>
<span id="cb18-30"><a href="#cb18-30" aria-hidden="true" tabindex="-1"></a>        offset p <span class="ot">=</span> addVectors p <span class="op">$</span> <span class="dt">Vector3</span> (<span class="dt">CFloat</span> origin) <span class="dv">0</span> <span class="dv">0</span></span>
<span id="cb18-31"><a href="#cb18-31" aria-hidden="true" tabindex="-1"></a>        t <span class="ot">=</span> <span class="fl">0.05</span></span>
<span id="cb18-32"><a href="#cb18-32" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb18-33"><a href="#cb18-33" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb18-34"><a href="#cb18-34" aria-hidden="true" tabindex="-1"></a><span class="co">-- Raylib bindings need love; we need to make a function for adding vectors</span></span>
<span id="cb18-35"><a href="#cb18-35" aria-hidden="true" tabindex="-1"></a><span class="ot">addVectors ::</span> <span class="dt">Vector3</span> <span class="ot">-&gt;</span> <span class="dt">Vector3</span> <span class="ot">-&gt;</span> <span class="dt">Vector3</span></span>
<span id="cb18-36"><a href="#cb18-36" aria-hidden="true" tabindex="-1"></a>addVectors a b <span class="ot">=</span> <span class="dt">Vector3</span></span>
<span id="cb18-37"><a href="#cb18-37" aria-hidden="true" tabindex="-1"></a>    (vector3&#39;x a <span class="op">+</span> vector3&#39;x b)</span>
<span id="cb18-38"><a href="#cb18-38" aria-hidden="true" tabindex="-1"></a>    (vector3&#39;y a <span class="op">+</span> vector3&#39;y b)</span>
<span id="cb18-39"><a href="#cb18-39" aria-hidden="true" tabindex="-1"></a>    (vector3&#39;z a <span class="op">+</span> vector3&#39;z b)</span></code></pre></div>
<p>The biggest change we’ve made here is the use of <code>cfold</code> and <code>cfoldM_</code>. Our first use of <code>cfold</code> is given a pure function that doesn’t use monads, therefore we use <code>cfold</code>. The second one does use monads, and since we don’t care about a return value we use <code>cfoldM_</code>. Folding is a generic way of doing things like accumulation or filtering; you iterate through the list as well as another parameter, be it a ‘count’, ‘total’ or an entirely different list. In this case, we used folds to firstly count the number of entities satisfying a condition (whether they had a <code>BoardComponent</code>), then we used another fold to iterate through the same set of entities, except this time we used the iteration value (<code>index</code>) as a way of knowing how far through we are, kind of like a <code>for</code> loop in imperative languages.</p>
<div class="warning infobox fill-horizontal">
<div class="header">
<span class="las la-exclamation-circle mr-3"></span>Warning - Using the entity ID
</div>
<p>An entity is just a wrapper for an integer value; in theory you could just use the entity’s ID itself to work out where the boards need to go. However, this will become problematic if you initialise other entities before or in the middle of your boards, as now your boards’ IDs won’t be sequential in the way you expect!</p>
</div>
<p>With that out of the way, let’s instantiate more entities!</p>
<div class="sourceCode" id="cb19"><pre class="sourceCode hs"><code class="sourceCode haskell"><span id="cb19-1"><a href="#cb19-1" aria-hidden="true" tabindex="-1"></a><span class="co">-- Let&#39;s make 3 boards!</span></span>
<span id="cb19-2"><a href="#cb19-2" aria-hidden="true" tabindex="-1"></a>newEntity_ newBoard</span>
<span id="cb19-3"><a href="#cb19-3" aria-hidden="true" tabindex="-1"></a>newEntity_ newBoard</span>
<span id="cb19-4"><a href="#cb19-4" aria-hidden="true" tabindex="-1"></a>newEntity_ newBoard</span></code></pre></div>
<p>Objective complete! Even though the components of each of these boards have the exact same state, the fact that there are multiple entities now reveals itself visually!</p>
<div class="caption-frame apply-shadow">
<img src="https://res.cloudinary.com/aas-sh/image/upload/v1668357984/blog/2022/11/13-11-2022_16_46_16_g6uf5j.png" title="Now we can render as many boards as we like, distributed along the x-axis." class="w-full object-cover" alt="Now we can render as many boards as we like, distributed along the x-axis." />
<div class="caption">
<p>Now we can render as many boards as we like, distributed along the x-axis.</p>
<div class="caption-source">
<a href="https://github.com/Ashe/Notakto/tree/e71210405272674b49929c70cca0e2006df3888e" title="Notakto">Notakto</a>
</div>
</div>
</div>
</section>
<section id="board-state" class="article-section">
<h2><span>Board state</span><a href="#board-state" class="anchor las la-link" title="board-state"></a></h2>
<p>Time for the final piece of the puzzle: rendering a representation of what marks have been placed on each board! We’re almost there, I promise. This is more of the same kind of stuff.</p>
<div class="sourceCode" id="cb20"><pre class="sourceCode hs"><code class="sourceCode haskell"><span id="cb20-1"><a href="#cb20-1" aria-hidden="true" tabindex="-1"></a><span class="ot">renderBoard ::</span> <span class="dt">Int</span> <span class="ot">-&gt;</span> <span class="dt">Int</span> <span class="ot">-&gt;</span> <span class="dt">BoardComponent</span> <span class="ot">-&gt;</span> <span class="dt">System</span> <span class="dt">World</span> <span class="dt">Int</span></span>
<span id="cb20-2"><a href="#cb20-2" aria-hidden="true" tabindex="-1"></a>renderBoard total i b <span class="ot">=</span> <span class="kw">do</span></span>
<span id="cb20-3"><a href="#cb20-3" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb20-4"><a href="#cb20-4" aria-hidden="true" tabindex="-1"></a>  <span class="co">-- Render crosses as part of renderBoard</span></span>
<span id="cb20-5"><a href="#cb20-5" aria-hidden="true" tabindex="-1"></a>  <span class="co">-- We provide the origin value as well as the component</span></span>
<span id="cb20-6"><a href="#cb20-6" aria-hidden="true" tabindex="-1"></a>  renderCrosses origin b</span>
<span id="cb20-7"><a href="#cb20-7" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb20-8"><a href="#cb20-8" aria-hidden="true" tabindex="-1"></a>  liftIO <span class="op">$</span> <span class="kw">do</span></span>
<span id="cb20-9"><a href="#cb20-9" aria-hidden="true" tabindex="-1"></a>    RL.drawCube (addVectors origin <span class="op">$</span> <span class="dt">Vector3</span> <span class="fl">0.5</span>    <span class="dv">0</span> <span class="dv">0</span>) t <span class="dv">3</span> t RL.white</span>
<span id="cb20-10"><a href="#cb20-10" aria-hidden="true" tabindex="-1"></a>    <span class="co">-- &lt;...&gt;</span></span>
<span id="cb20-11"><a href="#cb20-11" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb20-12"><a href="#cb20-12" aria-hidden="true" tabindex="-1"></a><span class="co">-- Given an origin, render a cross for each cell</span></span>
<span id="cb20-13"><a href="#cb20-13" aria-hidden="true" tabindex="-1"></a><span class="ot">renderCrosses ::</span> <span class="dt">Vector3</span> <span class="ot">-&gt;</span> <span class="dt">BoardComponent</span> <span class="ot">-&gt;</span> <span class="dt">System</span> <span class="dt">World</span> ()</span>
<span id="cb20-14"><a href="#cb20-14" aria-hidden="true" tabindex="-1"></a>renderCrosses origin b <span class="ot">=</span> <span class="kw">do</span></span>
<span id="cb20-15"><a href="#cb20-15" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb20-16"><a href="#cb20-16" aria-hidden="true" tabindex="-1"></a>  <span class="co">-- This function&#39;s job is to geometrically define what &#39;top left&#39; etc means</span></span>
<span id="cb20-17"><a href="#cb20-17" aria-hidden="true" tabindex="-1"></a>  renderCross origin (<span class="op">-</span><span class="dv">1</span>)   <span class="dv">1</span>  (_tl b)</span>
<span id="cb20-18"><a href="#cb20-18" aria-hidden="true" tabindex="-1"></a>  renderCross origin   <span class="dv">0</span>    <span class="dv">1</span>  (_tc b)</span>
<span id="cb20-19"><a href="#cb20-19" aria-hidden="true" tabindex="-1"></a>  renderCross origin   <span class="dv">1</span>    <span class="dv">1</span>  (_tr b)</span>
<span id="cb20-20"><a href="#cb20-20" aria-hidden="true" tabindex="-1"></a>  renderCross origin (<span class="op">-</span><span class="dv">1</span>)   <span class="dv">0</span>  (_ml b)</span>
<span id="cb20-21"><a href="#cb20-21" aria-hidden="true" tabindex="-1"></a>  renderCross origin   <span class="dv">0</span>    <span class="dv">0</span>  (_mc b)</span>
<span id="cb20-22"><a href="#cb20-22" aria-hidden="true" tabindex="-1"></a>  renderCross origin   <span class="dv">1</span>    <span class="dv">0</span>  (_mr b)</span>
<span id="cb20-23"><a href="#cb20-23" aria-hidden="true" tabindex="-1"></a>  renderCross origin (<span class="op">-</span><span class="dv">1</span>) (<span class="op">-</span><span class="dv">1</span>) (_bl b)</span>
<span id="cb20-24"><a href="#cb20-24" aria-hidden="true" tabindex="-1"></a>  renderCross origin   <span class="dv">0</span>  (<span class="op">-</span><span class="dv">1</span>) (_bc b)</span>
<span id="cb20-25"><a href="#cb20-25" aria-hidden="true" tabindex="-1"></a>  renderCross origin   <span class="dv">1</span>  (<span class="op">-</span><span class="dv">1</span>) (_br b)</span>
<span id="cb20-26"><a href="#cb20-26" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb20-27"><a href="#cb20-27" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb20-28"><a href="#cb20-28" aria-hidden="true" tabindex="-1"></a><span class="co">-- Now we have an origin as well as a horizontal + vertical offset and a cell</span></span>
<span id="cb20-29"><a href="#cb20-29" aria-hidden="true" tabindex="-1"></a><span class="ot">renderCross ::</span> <span class="dt">Vector3</span> <span class="ot">-&gt;</span> <span class="dt">Float</span> <span class="ot">-&gt;</span> <span class="dt">Float</span> <span class="ot">-&gt;</span> <span class="dt">Cell</span> <span class="ot">-&gt;</span> <span class="dt">System</span> <span class="dt">World</span> ()</span>
<span id="cb20-30"><a href="#cb20-30" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb20-31"><a href="#cb20-31" aria-hidden="true" tabindex="-1"></a><span class="co">-- If the cell is empty, we just do nothing (pure nothingness, pretty metal!)</span></span>
<span id="cb20-32"><a href="#cb20-32" aria-hidden="true" tabindex="-1"></a>renderCross _ _ _ <span class="dt">Empty</span> <span class="ot">=</span> <span class="fu">pure</span> ()</span>
<span id="cb20-33"><a href="#cb20-33" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb20-34"><a href="#cb20-34" aria-hidden="true" tabindex="-1"></a><span class="co">-- If the cell is filled, we render a cross</span></span>
<span id="cb20-35"><a href="#cb20-35" aria-hidden="true" tabindex="-1"></a>renderCross origin i j <span class="dt">Filled</span> <span class="ot">=</span> liftIO <span class="op">$</span> <span class="kw">do</span></span>
<span id="cb20-36"><a href="#cb20-36" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb20-37"><a href="#cb20-37" aria-hidden="true" tabindex="-1"></a>  <span class="co">-- We simply draw 2 lines, bottom left to top right...</span></span>
<span id="cb20-38"><a href="#cb20-38" aria-hidden="true" tabindex="-1"></a>  RL.drawLine3D (f (<span class="op">-</span><span class="fl">0.4</span>) (<span class="op">-</span><span class="fl">0.4</span>)) (f <span class="fl">0.4</span> <span class="fl">0.4</span>) RL.red</span>
<span id="cb20-39"><a href="#cb20-39" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb20-40"><a href="#cb20-40" aria-hidden="true" tabindex="-1"></a>  <span class="co">-- ... and then bottom right to top left</span></span>
<span id="cb20-41"><a href="#cb20-41" aria-hidden="true" tabindex="-1"></a>  RL.drawLine3D (f <span class="fl">0.4</span> (<span class="op">-</span><span class="fl">0.4</span>)) (f (<span class="op">-</span><span class="fl">0.4</span>) <span class="fl">0.4</span>) RL.red</span>
<span id="cb20-42"><a href="#cb20-42" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb20-43"><a href="#cb20-43" aria-hidden="true" tabindex="-1"></a>  <span class="co">-- We have some helper values here, center being the center of the cell</span></span>
<span id="cb20-44"><a href="#cb20-44" aria-hidden="true" tabindex="-1"></a>  <span class="co">-- calculated using the origin and offsets</span></span>
<span id="cb20-45"><a href="#cb20-45" aria-hidden="true" tabindex="-1"></a>  <span class="kw">where</span> center <span class="ot">=</span> addVectors origin <span class="op">$</span> <span class="dt">Vector3</span> (<span class="dt">CFloat</span> i) (<span class="dt">CFloat</span> j) <span class="dv">0</span></span>
<span id="cb20-46"><a href="#cb20-46" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb20-47"><a href="#cb20-47" aria-hidden="true" tabindex="-1"></a>        <span class="co">-- As well as a helper function to create start and end points</span></span>
<span id="cb20-48"><a href="#cb20-48" aria-hidden="true" tabindex="-1"></a>        f x y <span class="ot">=</span> addVectors center <span class="op">$</span> <span class="dt">Vector3</span> x y <span class="dv">0</span></span></code></pre></div>
<p>Ready to test it out? Let’s ammend our initialisation for one of the boards:</p>
<div class="sourceCode" id="cb21"><pre class="sourceCode hs"><code class="sourceCode haskell"><span id="cb21-1"><a href="#cb21-1" aria-hidden="true" tabindex="-1"></a>  newEntity_ <span class="op">$</span> <span class="dt">Board</span></span>
<span id="cb21-2"><a href="#cb21-2" aria-hidden="true" tabindex="-1"></a>    <span class="dt">Filled</span> <span class="dt">Empty</span> <span class="dt">Empty</span></span>
<span id="cb21-3"><a href="#cb21-3" aria-hidden="true" tabindex="-1"></a>    <span class="dt">Empty</span> <span class="dt">Empty</span> <span class="dt">Empty</span></span>
<span id="cb21-4"><a href="#cb21-4" aria-hidden="true" tabindex="-1"></a>    <span class="dt">Empty</span> <span class="dt">Empty</span> <span class="dt">Empty</span></span>
<span id="cb21-5"><a href="#cb21-5" aria-hidden="true" tabindex="-1"></a>  newEntity_ newBoard</span>
<span id="cb21-6"><a href="#cb21-6" aria-hidden="true" tabindex="-1"></a>  newEntity_ newBoard</span></code></pre></div>
<p>And now we see that the first board has the top-left cell filled! We can now visualise both the amount of boards and the content of each one! Chapter over!</p>
<div class="caption-frame apply-shadow">
<img src="https://res.cloudinary.com/aas-sh/image/upload/v1668362726/blog/2022/11/13-11-2022_18_05_04_kqweul.png" title="We can now visualise the state of each board." class="w-full object-cover" alt="We can now visualise the state of each board." />
<div class="caption">
<p>We can now visualise the state of each board.</p>
<div class="caption-source">
<a href="https://github.com/Ashe/Notakto/tree/e71210405272674b49929c70cca0e2006df3888e" title="Notakto">Notakto</a>
</div>
</div>
</div>
<div class="gitrepo infobox fill-horizontal">
<div class="header">
<span class="lab la-github mr-3"></span>Repository - Notakto
</div>
<p>A link to the corresponding commit for the previous section can be found <a href="https://github.com/Ashe/Notakto/tree/e71210405272674b49929c70cca0e2006df3888e">here</a>.</p>
</div>
</section>
</section>
<section id="making-moves" class="article-section">
<h1><span>Making moves</span><a href="#making-moves" class="anchor las la-link" title="making-moves"></a></h1>
<section id="preparing-the-raycast" class="article-section">
<h2><span>Preparing the raycast</span><a href="#preparing-the-raycast" class="anchor las la-link" title="preparing-the-raycast"></a></h2>
<p>Okay, it’s time to speed up and do some gameplay code. In order to make moves, players will need to shoot a ray out from the camera into the boards so that they can precisely specify where they want to place their cross. Let’s start by adding a new component responsible for storing the player’s current aim. We don’t have to give it a default value as it’ll be written during our update frame anyway.</p>
<div class="sourceCode" id="cb22"><pre class="sourceCode hs"><code class="sourceCode haskell"><span id="cb22-1"><a href="#cb22-1" aria-hidden="true" tabindex="-1"></a><span class="co">-- New component to add (Types.hs) and add to World</span></span>
<span id="cb22-2"><a href="#cb22-2" aria-hidden="true" tabindex="-1"></a><span class="kw">newtype</span> <span class="dt">PlayerAimComponent</span> <span class="ot">=</span> <span class="dt">Aim</span> <span class="dt">RL.Ray</span></span>
<span id="cb22-3"><a href="#cb22-3" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb22-4"><a href="#cb22-4" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb22-5"><a href="#cb22-5" aria-hidden="true" tabindex="-1"></a><span class="co">-- New update system to add (Lib.hs) and be called from update system</span></span>
<span id="cb22-6"><a href="#cb22-6" aria-hidden="true" tabindex="-1"></a><span class="ot">handlePlayerAim ::</span> <span class="dt">System</span> <span class="dt">World</span> ()</span>
<span id="cb22-7"><a href="#cb22-7" aria-hidden="true" tabindex="-1"></a>handlePlayerAim <span class="ot">=</span> <span class="kw">do</span></span>
<span id="cb22-8"><a href="#cb22-8" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb22-9"><a href="#cb22-9" aria-hidden="true" tabindex="-1"></a>  <span class="co">-- Determine window size so that we can cast from center of screen</span></span>
<span id="cb22-10"><a href="#cb22-10" aria-hidden="true" tabindex="-1"></a>  windowWidth <span class="ot">&lt;-</span> liftIO RL.getScreenWidth</span>
<span id="cb22-11"><a href="#cb22-11" aria-hidden="true" tabindex="-1"></a>  windowHeight <span class="ot">&lt;-</span> liftIO RL.getScreenHeight</span>
<span id="cb22-12"><a href="#cb22-12" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb22-13"><a href="#cb22-13" aria-hidden="true" tabindex="-1"></a>  <span class="op">-</span> <span class="dt">Retrieve</span> the camera (will have just been updated)</span>
<span id="cb22-14"><a href="#cb22-14" aria-hidden="true" tabindex="-1"></a>  <span class="dt">Camera</span> camera <span class="ot">&lt;-</span> get global</span>
<span id="cb22-15"><a href="#cb22-15" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb22-16"><a href="#cb22-16" aria-hidden="true" tabindex="-1"></a>  <span class="co">-- Create a ray to be cast later</span></span>
<span id="cb22-17"><a href="#cb22-17" aria-hidden="true" tabindex="-1"></a>  ray <span class="ot">&lt;-</span> liftIO <span class="op">$</span> RL.getMouseRay (<span class="dt">RL.Vector2</span></span>
<span id="cb22-18"><a href="#cb22-18" aria-hidden="true" tabindex="-1"></a>    (<span class="dt">CFloat</span> <span class="op">$</span> <span class="fu">fromIntegral</span> windowWidth <span class="op">/</span> <span class="dv">2</span>)</span>
<span id="cb22-19"><a href="#cb22-19" aria-hidden="true" tabindex="-1"></a>    (<span class="dt">CFloat</span> <span class="op">$</span> <span class="fu">fromIntegral</span> windowHeight <span class="op">/</span> <span class="dv">2</span>)) camera</span>
<span id="cb22-20"><a href="#cb22-20" aria-hidden="true" tabindex="-1"></a>  set global <span class="op">$</span> <span class="dt">Aim</span> ray</span>
<span id="cb22-21"><a href="#cb22-21" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb22-22"><a href="#cb22-22" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb22-23"><a href="#cb22-23" aria-hidden="true" tabindex="-1"></a><span class="co">-- New render system to add (Rendering.hs) and be called from render system</span></span>
<span id="cb22-24"><a href="#cb22-24" aria-hidden="true" tabindex="-1"></a><span class="ot">renderAimRay ::</span> <span class="dt">System</span> <span class="dt">World</span> ()</span>
<span id="cb22-25"><a href="#cb22-25" aria-hidden="true" tabindex="-1"></a>renderAimRay <span class="ot">=</span> <span class="kw">do</span></span>
<span id="cb22-26"><a href="#cb22-26" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb22-27"><a href="#cb22-27" aria-hidden="true" tabindex="-1"></a>  <span class="co">-- Retrieve player aim component</span></span>
<span id="cb22-28"><a href="#cb22-28" aria-hidden="true" tabindex="-1"></a>  <span class="dt">Aim</span> ray <span class="ot">&lt;-</span> get global</span>
<span id="cb22-29"><a href="#cb22-29" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb22-30"><a href="#cb22-30" aria-hidden="true" tabindex="-1"></a>  <span class="co">-- Determine endpoints of a line to draw</span></span>
<span id="cb22-31"><a href="#cb22-31" aria-hidden="true" tabindex="-1"></a>  <span class="co">-- Note that we slightly offset the start location since we are drawing</span></span>
<span id="cb22-32"><a href="#cb22-32" aria-hidden="true" tabindex="-1"></a>  <span class="co">-- from the camera, and if we didn&#39;t offset then the line would appear</span></span>
<span id="cb22-33"><a href="#cb22-33" aria-hidden="true" tabindex="-1"></a>  <span class="co">-- as a dot!</span></span>
<span id="cb22-34"><a href="#cb22-34" aria-hidden="true" tabindex="-1"></a>  <span class="kw">let</span> lineStart <span class="ot">=</span> addVectors (RL.ray&#39;position ray) (<span class="dt">Vector3</span> <span class="dv">0</span> (<span class="op">-</span><span class="fl">0.05</span>) <span class="dv">0</span>)</span>
<span id="cb22-35"><a href="#cb22-35" aria-hidden="true" tabindex="-1"></a>      lineEnd <span class="ot">=</span> addVectors (RL.ray&#39;position ray) <span class="op">$</span></span>
<span id="cb22-36"><a href="#cb22-36" aria-hidden="true" tabindex="-1"></a>        multiplyVector (RL.ray&#39;direction ray) <span class="dv">10</span></span>
<span id="cb22-37"><a href="#cb22-37" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb22-38"><a href="#cb22-38" aria-hidden="true" tabindex="-1"></a>  <span class="co">-- Render the line</span></span>
<span id="cb22-39"><a href="#cb22-39" aria-hidden="true" tabindex="-1"></a>  liftIO <span class="op">$</span> RL.drawLine3D lineStart lineEnd RL.yellow</span>
<span id="cb22-40"><a href="#cb22-40" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb22-41"><a href="#cb22-41" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb22-42"><a href="#cb22-42" aria-hidden="true" tabindex="-1"></a><span class="co">-- New utility function</span></span>
<span id="cb22-43"><a href="#cb22-43" aria-hidden="true" tabindex="-1"></a><span class="ot">multiplyVector ::</span> <span class="dt">Vector3</span> <span class="ot">-&gt;</span> <span class="dt">Float</span> <span class="ot">-&gt;</span> <span class="dt">Vector3</span></span>
<span id="cb22-44"><a href="#cb22-44" aria-hidden="true" tabindex="-1"></a>multiplyVector a b <span class="ot">=</span> <span class="kw">let</span> b&#39; <span class="ot">=</span> <span class="dt">CFloat</span> b <span class="kw">in</span> <span class="dt">Vector3</span></span>
<span id="cb22-45"><a href="#cb22-45" aria-hidden="true" tabindex="-1"></a>  (vector3&#39;x a <span class="op">*</span> b&#39;)</span>
<span id="cb22-46"><a href="#cb22-46" aria-hidden="true" tabindex="-1"></a>  (vector3&#39;y a <span class="op">*</span> b&#39;)</span>
<span id="cb22-47"><a href="#cb22-47" aria-hidden="true" tabindex="-1"></a>  (vector3&#39;z a <span class="op">*</span> b&#39;)</span></code></pre></div>
<p>We have momentum now! We haven’t done anything gameplay related really yet, but we’re blasting through the basics and now we’re ready to try and cherry-pick a cell from a board. This yellow line will be really helpful for making sure that the selected cell we’re going to calculate is in the approximate area of the ray.</p>
<p>This is where having each cross as its own entity has a benefit; each cross could easily check if it the raycast strikes it and our picking system would be done in a matter of minutes. However, the drawbacks of this is the task of connecting it back to the board and making changes to the game state. Instead, we’re going to see if the raycast collides with the board, and use the position it strikes the board to determine which cell the player is aiming at.</p>
<div class="gitrepo infobox fill-horizontal">
<div class="header">
<span class="lab la-github mr-3"></span>Repository - Notakto
</div>
<p>A link to the corresponding commit for the previous section can be found <a href="https://github.com/Ashe/Notakto/tree/d85cd87ad2ebe77e14c572f1db43fec0c9120059">here</a>.</p>
</div>
</section>
<section id="identifying-the-looked-at-cell" class="article-section">
<h2><span>Identifying the looked-at cell</span><a href="#identifying-the-looked-at-cell" class="anchor las la-link" title="identifying-the-looked-at-cell"></a></h2>
<p>I knew it was coming; the problem with writing the blog post as I go means that I get stuff wrong. I initially thought it would be a good idea to simply count the entities and render the board in a position dependent on it’s index, however this is just going to be so annoying to calculate each time. That’s okay though, as both Haskell and Apecs are really easy to experiment with and try new things. Here’s a quick correction to our project:</p>
<div class="sourceCode" id="cb23"><pre class="sourceCode hs"><code class="sourceCode haskell"><span id="cb23-1"><a href="#cb23-1" aria-hidden="true" tabindex="-1"></a><span class="co">-- New component for tracking positions in 3D space</span></span>
<span id="cb23-2"><a href="#cb23-2" aria-hidden="true" tabindex="-1"></a><span class="kw">newtype</span> <span class="dt">PositionComponent</span> <span class="ot">=</span> <span class="dt">Position</span> <span class="dt">RL.Vector3</span> <span class="kw">deriving</span> (<span class="dt">Show</span>, <span class="dt">Eq</span>)</span>
<span id="cb23-3"><a href="#cb23-3" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb23-4"><a href="#cb23-4" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb23-5"><a href="#cb23-5" aria-hidden="true" tabindex="-1"></a><span class="co">-- Initialisation system for automatically creating n boards across the x axis</span></span>
<span id="cb23-6"><a href="#cb23-6" aria-hidden="true" tabindex="-1"></a><span class="co">-- Note: Thanks to our position component, you could create all sorts of patterns!</span></span>
<span id="cb23-7"><a href="#cb23-7" aria-hidden="true" tabindex="-1"></a><span class="ot">createBoards ::</span> <span class="dt">Int</span> <span class="ot">-&gt;</span> <span class="dt">System</span> <span class="dt">World</span> ()</span>
<span id="cb23-8"><a href="#cb23-8" aria-hidden="true" tabindex="-1"></a>createBoards n <span class="ot">=</span> <span class="kw">do</span></span>
<span id="cb23-9"><a href="#cb23-9" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb23-10"><a href="#cb23-10" aria-hidden="true" tabindex="-1"></a>  <span class="co">-- forM_ is standard library, it&#39;s equivalent to flip mapM</span></span>
<span id="cb23-11"><a href="#cb23-11" aria-hidden="true" tabindex="-1"></a>  <span class="co">-- Also notice that to create an entity with multiple components we use a tuple</span></span>
<span id="cb23-12"><a href="#cb23-12" aria-hidden="true" tabindex="-1"></a>  forM_ positions <span class="op">$</span> \p <span class="ot">-&gt;</span> newEntity_ (newBoard, <span class="dt">Position</span> p)</span>
<span id="cb23-13"><a href="#cb23-13" aria-hidden="true" tabindex="-1"></a>  <span class="kw">where</span> newBoard <span class="ot">=</span> <span class="dt">Board</span> <span class="dt">Empty</span> <span class="dt">Empty</span> <span class="dt">Empty</span> <span class="dt">Empty</span> <span class="dt">Empty</span> <span class="dt">Empty</span> <span class="dt">Empty</span> <span class="dt">Empty</span> <span class="dt">Empty</span></span>
<span id="cb23-14"><a href="#cb23-14" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb23-15"><a href="#cb23-15" aria-hidden="true" tabindex="-1"></a>        <span class="co">-- List comprehension to dynamically generate a list of x coordinates</span></span>
<span id="cb23-16"><a href="#cb23-16" aria-hidden="true" tabindex="-1"></a>        positions <span class="ot">=</span> [<span class="dt">Vector3</span> x&#39; <span class="fl">1.5</span> <span class="dv">0</span> <span class="op">|</span> x <span class="ot">&lt;-</span> [<span class="dv">0</span><span class="op">..</span>n <span class="op">-</span> <span class="dv">1</span>],</span>
<span id="cb23-17"><a href="#cb23-17" aria-hidden="true" tabindex="-1"></a>          <span class="kw">let</span> x&#39; <span class="ot">=</span> (<span class="fu">fromIntegral</span> x <span class="op">-</span> (<span class="fu">fromIntegral</span> (n <span class="op">-</span> <span class="dv">1</span>) <span class="op">/</span> <span class="dv">2</span>)) <span class="op">*</span> <span class="fl">4.5</span>]</span>
<span id="cb23-18"><a href="#cb23-18" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb23-19"><a href="#cb23-19" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb23-20"><a href="#cb23-20" aria-hidden="true" tabindex="-1"></a><span class="co">-- Forget cfoldM_, we&#39;re back to cmapM_</span></span>
<span id="cb23-21"><a href="#cb23-21" aria-hidden="true" tabindex="-1"></a><span class="ot">renderBoards ::</span> <span class="dt">System</span> <span class="dt">World</span> ()</span>
<span id="cb23-22"><a href="#cb23-22" aria-hidden="true" tabindex="-1"></a>renderBoards <span class="ot">=</span> cmapM_ renderBoard</span>
<span id="cb23-23"><a href="#cb23-23" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb23-24"><a href="#cb23-24" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb23-25"><a href="#cb23-25" aria-hidden="true" tabindex="-1"></a><span class="co">-- Notice the tuple - this is how you select entities that contain both components</span></span>
<span id="cb23-26"><a href="#cb23-26" aria-hidden="true" tabindex="-1"></a><span class="co">-- Note: You can use the &#39;Not&#39; type to ensure the entity DOES NOT have that type</span></span>
<span id="cb23-27"><a href="#cb23-27" aria-hidden="true" tabindex="-1"></a><span class="ot">renderBoard ::</span> (<span class="dt">BoardComponent</span>, <span class="dt">PositionComponent</span>) <span class="ot">-&gt;</span> <span class="dt">System</span> <span class="dt">World</span> ()</span>
<span id="cb23-28"><a href="#cb23-28" aria-hidden="true" tabindex="-1"></a>renderBoard (b, <span class="dt">Position</span> p) <span class="ot">=</span> <span class="kw">do</span></span>
<span id="cb23-29"><a href="#cb23-29" aria-hidden="true" tabindex="-1"></a>  renderCrosses p b</span>
<span id="cb23-30"><a href="#cb23-30" aria-hidden="true" tabindex="-1"></a>  liftIO <span class="op">$</span> <span class="kw">do</span></span>
<span id="cb23-31"><a href="#cb23-31" aria-hidden="true" tabindex="-1"></a>    RL.drawCube (addVectors p <span class="op">$</span> <span class="dt">Vector3</span> <span class="fl">0.5</span>    <span class="dv">0</span> <span class="dv">0</span>) t <span class="dv">3</span> t RL.white</span>
<span id="cb23-32"><a href="#cb23-32" aria-hidden="true" tabindex="-1"></a>    RL.drawCube (addVectors p <span class="op">$</span> <span class="dt">Vector3</span> (<span class="op">-</span><span class="fl">0.5</span>) <span class="dv">0</span> <span class="dv">0</span>) t <span class="dv">3</span> t RL.white</span>
<span id="cb23-33"><a href="#cb23-33" aria-hidden="true" tabindex="-1"></a>    RL.drawCube (addVectors p <span class="op">$</span> <span class="dt">Vector3</span> <span class="dv">0</span> <span class="fl">0.5</span> <span class="dv">0</span>) <span class="dv">3</span> t t RL.white</span>
<span id="cb23-34"><a href="#cb23-34" aria-hidden="true" tabindex="-1"></a>    RL.drawCube (addVectors p <span class="op">$</span> <span class="dt">Vector3</span> <span class="dv">0</span> (<span class="op">-</span><span class="fl">0.5</span>) <span class="dv">0</span>) <span class="dv">3</span> t t RL.white</span>
<span id="cb23-35"><a href="#cb23-35" aria-hidden="true" tabindex="-1"></a>  <span class="kw">where</span> t <span class="ot">=</span> <span class="fl">0.05</span></span></code></pre></div>
<p>This is where things get tricky… I’ve actually had to file a <a href="https://github.com/Anut-py/h-raylib/issues/5">bug report</a> since the raycasting and collision of Raylib don’t seem to be working great. It seems that data that we’re receiving isn’t what we expect and is slightly unreliable unless we do some IO before accessing it. Raylib wasn’t written in Haskell, and so even though our programming can easily be reasoned about, there’s a bit of a grey area where bindings to libraries written in other languages are. For now though, I’m just going to pretend the bug doesn’t exist and try to implement more of the program.</p>
<p>Before we continue, we need to ask ourselves what we actually want to do. Right now, my goal is to make it so that when you aim at a cell, we see a ‘ghost’ of a cross that will appear if you hit the left mouse button. The biggest question is, how do we want to store this bit of state?</p>
<ol type="1">
<li>We could change our <code>Cell</code> type to be either <code>Empty | Filled | Chosen</code>, however that will require us to make sure that only one cell is chosen at most, which is more work.</li>
<li>We could specify a new variable on the <code>BoardComponent</code> to keep track on which cell is chosen, but that would mean that we could have multiple chosen cells across multiple boards.</li>
<li>We could update the <code>PlayerAimComponent</code> to contain both the ray and the looked-at cell — while this would work, it would be assuming that we’re only interested in players looking at cells, and wouldn’t be very good if your game had multiple things players could interact with.</li>
<li>We could try to avoid writing state altogether, but this would mean that every cell will need to crunch the numbers to work out if you’re looking at it <em>every rendering loop</em>. This would also mean that we have to test cells in isolation, meaning that there could be a situation where you’re technically looking at multiple cells at once.</li>
</ol>
<p>Isn’t gamedev fun? I believe that I’m going to go for <strong>option 3</strong>. Note that if you were doing a look-at system in a different type of game, you’d most likely just record which <code>Entity</code> you’re looking at. The only reason we are in this scenario is because we avoided making crosses be their own <code>Entity</code>.</p>
<div class="help infobox fill-horizontal">
<div class="header">
<span class="las la-question-circle mr-3"></span>Thinking of alternatives
</div>
<p>If you are looking to improve yourself as a programmer it’s always a good idea to think about all the different ways you could solve a problem <em>before</em> you get started. You (or your team) could begin to spot glaring issues before they manifest, and they also reassure you that if things go wrong you have other ways of solving things. Of course, don’t spend <em>ages</em> planning as you can’t always capture every potential problem without giving things a go.</p>
<p>If you’re struggling with thinking of approaches (and believe me, there are <em>always</em> better ways of writing things and numerous things that could be improved), try some of the following methods:</p>
<ul>
<li><p><strong>Start making a list —</strong> Sometimes, by simply writing ‘1.’ and arranging your thoughts into a list, you naturally start thinking of new entries to pad it out. I literally did this in the section above! Give yourself a space to prove to yourself you can do this!</p></li>
<li><p><strong>Take your initial approach and make small adjustments —</strong> Sometimes you can quickly create alternative approaches by simply taking your first idea and altering it slightly; option 2 could be the same as option 1 with an addition or exception. For example, if your idea was to add a new variable to something, maybe consider if it could also be added somewhere else or added in a different way such that it has multiple uses.</p></li>
<li><p><strong>Pretend to be a super-villain —</strong> Let’s say that it’s become your job to sabotage your code in some way, whether that’s by misusing the code or using the application in unintended ways. What would you do, and what kinds of things could you break? Now come back to reality and think about the likelihood of any of those scenarios, the risks they present and the cost of prevention.</p></li>
<li><p><strong>Consider not doing it —</strong> Lack of action is itself an action, and so questionning whether you need to implement your feature in the first place isn’t a bad question to ask. Sometimes it exposes how many drawbacks there are versus the benefits, and perhaps what you might consider a workaround turns into one of your alternative approaches. What is the requirement that is driving this decision? If there isn’t one, then maybe we need to understand our requirements first.</p></li>
</ul>
</div>
<p>Huzzah, after a few days that <a href="https://github.com/Anut-py/h-raylib/issues/5">bug</a> was fixed! Let’s get on with approach number three:</p>
<div class="sourceCode" id="cb24"><pre class="sourceCode hs"><code class="sourceCode haskell"><span id="cb24-1"><a href="#cb24-1" aria-hidden="true" tabindex="-1"></a><span class="co">-- New data type representing the player&#39;s current looked-at cell</span></span>
<span id="cb24-2"><a href="#cb24-2" aria-hidden="true" tabindex="-1"></a><span class="kw">data</span> <span class="dt">LookAtTarget</span> <span class="ot">=</span> <span class="dt">NoTarget</span> <span class="op">|</span> <span class="dt">Target</span> <span class="dt">Entity</span> <span class="dt">Int</span> <span class="kw">deriving</span> (<span class="dt">Show</span>, <span class="dt">Eq</span>)</span>
<span id="cb24-3"><a href="#cb24-3" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb24-4"><a href="#cb24-4" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb24-5"><a href="#cb24-5" aria-hidden="true" tabindex="-1"></a><span class="co">-- Update the aim component to make use of our new type</span></span>
<span id="cb24-6"><a href="#cb24-6" aria-hidden="true" tabindex="-1"></a><span class="kw">data</span> <span class="dt">PlayerAimComponent</span> <span class="ot">=</span> <span class="dt">Aim</span> <span class="dt">RL.Ray</span> <span class="dt">LookAtTarget</span> <span class="kw">deriving</span> (<span class="dt">Show</span>, <span class="dt">Eq</span>)</span>
<span id="cb24-7"><a href="#cb24-7" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb24-8"><a href="#cb24-8" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb24-9"><a href="#cb24-9" aria-hidden="true" tabindex="-1"></a><span class="co">-- Update the player aim function to calculate the currently looked-at cell</span></span>
<span id="cb24-10"><a href="#cb24-10" aria-hidden="true" tabindex="-1"></a><span class="ot">handlePlayerAim ::</span> <span class="dt">System</span> <span class="dt">World</span> ()</span>
<span id="cb24-11"><a href="#cb24-11" aria-hidden="true" tabindex="-1"></a>handlePlayerAim <span class="ot">=</span> <span class="kw">do</span></span>
<span id="cb24-12"><a href="#cb24-12" aria-hidden="true" tabindex="-1"></a>  windowWidth <span class="ot">&lt;-</span> liftIO RL.getScreenWidth</span>
<span id="cb24-13"><a href="#cb24-13" aria-hidden="true" tabindex="-1"></a>  windowHeight <span class="ot">&lt;-</span> liftIO RL.getScreenHeight</span>
<span id="cb24-14"><a href="#cb24-14" aria-hidden="true" tabindex="-1"></a>  <span class="dt">Camera</span> camera <span class="ot">&lt;-</span> get global</span>
<span id="cb24-15"><a href="#cb24-15" aria-hidden="true" tabindex="-1"></a>  ray <span class="ot">&lt;-</span> liftIO <span class="op">$</span> RL.getMouseRay (<span class="dt">RL.Vector2</span></span>
<span id="cb24-16"><a href="#cb24-16" aria-hidden="true" tabindex="-1"></a>    (<span class="dt">CFloat</span> <span class="op">$</span> <span class="fu">fromIntegral</span> windowWidth <span class="op">/</span> <span class="dv">2</span>)</span>
<span id="cb24-17"><a href="#cb24-17" aria-hidden="true" tabindex="-1"></a>    (<span class="dt">CFloat</span> <span class="op">$</span> <span class="fu">fromIntegral</span> windowHeight <span class="op">/</span> <span class="dv">2</span>)) camera</span>
<span id="cb24-18"><a href="#cb24-18" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb24-19"><a href="#cb24-19" aria-hidden="true" tabindex="-1"></a>  <span class="co">-- Use the ray we generated to find a target</span></span>
<span id="cb24-20"><a href="#cb24-20" aria-hidden="true" tabindex="-1"></a>  target <span class="ot">&lt;-</span> cfoldM (findLookAtTarget ray) <span class="dt">NoTarget</span></span>
<span id="cb24-21"><a href="#cb24-21" aria-hidden="true" tabindex="-1"></a>  set global <span class="op">$</span> <span class="dt">Aim</span> ray target</span>
<span id="cb24-22"><a href="#cb24-22" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb24-23"><a href="#cb24-23" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb24-24"><a href="#cb24-24" aria-hidden="true" tabindex="-1"></a><span class="co">-- Look for closest board that the player is looking at</span></span>
<span id="cb24-25"><a href="#cb24-25" aria-hidden="true" tabindex="-1"></a><span class="ot">findLookAtTarget ::</span> <span class="dt">RL.Ray</span> <span class="ot">-&gt;</span> <span class="dt">LookAtTarget</span> <span class="ot">-&gt;</span></span>
<span id="cb24-26"><a href="#cb24-26" aria-hidden="true" tabindex="-1"></a>                    (<span class="dt">BoardComponent</span>, <span class="dt">PositionComponent</span>, <span class="dt">Entity</span>) <span class="ot">-&gt;</span></span>
<span id="cb24-27"><a href="#cb24-27" aria-hidden="true" tabindex="-1"></a>                    <span class="dt">System</span> <span class="dt">World</span> <span class="dt">LookAtTarget</span></span>
<span id="cb24-28"><a href="#cb24-28" aria-hidden="true" tabindex="-1"></a>findLookAtTarget ray target (_, <span class="dt">Position</span> p, e) <span class="ot">=</span> <span class="kw">do</span></span>
<span id="cb24-29"><a href="#cb24-29" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb24-30"><a href="#cb24-30" aria-hidden="true" tabindex="-1"></a>  <span class="co">-- If our raycast hits the current board</span></span>
<span id="cb24-31"><a href="#cb24-31" aria-hidden="true" tabindex="-1"></a>  <span class="kw">if</span> RL.rayCollision&#39;hit hitInfo <span class="op">&gt;</span> <span class="dv">0</span> <span class="kw">then</span></span>
<span id="cb24-32"><a href="#cb24-32" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb24-33"><a href="#cb24-33" aria-hidden="true" tabindex="-1"></a>    <span class="co">-- Check if this new target is closer than our current target</span></span>
<span id="cb24-34"><a href="#cb24-34" aria-hidden="true" tabindex="-1"></a>    getClosestTarget ray target <span class="op">$</span> <span class="dt">Target</span> e (findCell hitPos)</span>
<span id="cb24-35"><a href="#cb24-35" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb24-36"><a href="#cb24-36" aria-hidden="true" tabindex="-1"></a>  <span class="co">-- Otherwise, use the current best target</span></span>
<span id="cb24-37"><a href="#cb24-37" aria-hidden="true" tabindex="-1"></a>  <span class="kw">else</span></span>
<span id="cb24-38"><a href="#cb24-38" aria-hidden="true" tabindex="-1"></a>    <span class="fu">pure</span> target</span>
<span id="cb24-39"><a href="#cb24-39" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb24-40"><a href="#cb24-40" aria-hidden="true" tabindex="-1"></a>  <span class="co">-- Determine where to place the hitbox for raycast, and check hit location</span></span>
<span id="cb24-41"><a href="#cb24-41" aria-hidden="true" tabindex="-1"></a>  <span class="kw">where</span> from <span class="ot">=</span> addVectors p <span class="op">$</span> <span class="dt">Vector3</span> (<span class="op">-</span><span class="fl">1.5</span>) (<span class="op">-</span><span class="fl">1.5</span>) (<span class="op">-</span><span class="fl">0.05</span>)</span>
<span id="cb24-42"><a href="#cb24-42" aria-hidden="true" tabindex="-1"></a>        to <span class="ot">=</span> addVectors p <span class="op">$</span> <span class="dt">Vector3</span> <span class="fl">1.5</span> <span class="fl">1.5</span> <span class="fl">0.05</span></span>
<span id="cb24-43"><a href="#cb24-43" aria-hidden="true" tabindex="-1"></a>        hitInfo <span class="ot">=</span> RL.getRayCollisionBox ray <span class="op">$</span> <span class="dt">RL.BoundingBox</span> from to</span>
<span id="cb24-44"><a href="#cb24-44" aria-hidden="true" tabindex="-1"></a>        hitPos <span class="ot">=</span> subtractVectors (RL.rayCollision&#39;point hitInfo) p</span>
<span id="cb24-45"><a href="#cb24-45" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb24-46"><a href="#cb24-46" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb24-47"><a href="#cb24-47" aria-hidden="true" tabindex="-1"></a><span class="co">-- Checks two targets and returns the closest one</span></span>
<span id="cb24-48"><a href="#cb24-48" aria-hidden="true" tabindex="-1"></a><span class="ot">getClosestTarget ::</span> <span class="dt">RL.Ray</span> <span class="ot">-&gt;</span> <span class="dt">LookAtTarget</span> <span class="ot">-&gt;</span> <span class="dt">LookAtTarget</span> <span class="ot">-&gt;</span></span>
<span id="cb24-49"><a href="#cb24-49" aria-hidden="true" tabindex="-1"></a>                    <span class="dt">System</span> <span class="dt">World</span> <span class="dt">LookAtTarget</span></span>
<span id="cb24-50"><a href="#cb24-50" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb24-51"><a href="#cb24-51" aria-hidden="true" tabindex="-1"></a><span class="co">-- If both variables are valid targets</span></span>
<span id="cb24-52"><a href="#cb24-52" aria-hidden="true" tabindex="-1"></a>getClosestTarget ray a<span class="op">@</span>(<span class="dt">Target</span> eA _) b<span class="op">@</span>(<span class="dt">Target</span> eB _) <span class="ot">=</span> <span class="kw">do</span></span>
<span id="cb24-53"><a href="#cb24-53" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb24-54"><a href="#cb24-54" aria-hidden="true" tabindex="-1"></a>  <span class="co">-- Note: We could have passed in the position of the prospective target,</span></span>
<span id="cb24-55"><a href="#cb24-55" aria-hidden="true" tabindex="-1"></a>  <span class="co">-- but felt a bit rubbish today and just thought I&#39;d keep it simple</span></span>
<span id="cb24-56"><a href="#cb24-56" aria-hidden="true" tabindex="-1"></a>  <span class="dt">Position</span> posA <span class="ot">&lt;-</span> get eA</span>
<span id="cb24-57"><a href="#cb24-57" aria-hidden="true" tabindex="-1"></a>  <span class="dt">Position</span> posB <span class="ot">&lt;-</span> get eB</span>
<span id="cb24-58"><a href="#cb24-58" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb24-59"><a href="#cb24-59" aria-hidden="true" tabindex="-1"></a>  <span class="co">-- Calculate distances to ray origin</span></span>
<span id="cb24-60"><a href="#cb24-60" aria-hidden="true" tabindex="-1"></a>  <span class="kw">let</span> p <span class="ot">=</span> RL.ray&#39;position ray</span>
<span id="cb24-61"><a href="#cb24-61" aria-hidden="true" tabindex="-1"></a>      distA <span class="ot">=</span> magnitudeVector <span class="op">$</span> subtractVectors posA p</span>
<span id="cb24-62"><a href="#cb24-62" aria-hidden="true" tabindex="-1"></a>      distB <span class="ot">=</span> magnitudeVector <span class="op">$</span> subtractVectors posB p</span>
<span id="cb24-63"><a href="#cb24-63" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb24-64"><a href="#cb24-64" aria-hidden="true" tabindex="-1"></a>  <span class="co">-- Return closest target</span></span>
<span id="cb24-65"><a href="#cb24-65" aria-hidden="true" tabindex="-1"></a>  <span class="fu">pure</span> <span class="op">$</span> <span class="kw">if</span> distA <span class="op">&lt;=</span> distB <span class="kw">then</span> a <span class="kw">else</span> b</span>
<span id="cb24-66"><a href="#cb24-66" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb24-67"><a href="#cb24-67" aria-hidden="true" tabindex="-1"></a><span class="co">-- Handle cases where invalid targets present</span></span>
<span id="cb24-68"><a href="#cb24-68" aria-hidden="true" tabindex="-1"></a>getClosestTarget _ a <span class="dt">NoTarget</span> <span class="ot">=</span> <span class="fu">pure</span> a</span>
<span id="cb24-69"><a href="#cb24-69" aria-hidden="true" tabindex="-1"></a>getClosestTarget _ <span class="dt">NoTarget</span> b <span class="ot">=</span> <span class="fu">pure</span> b</span>
<span id="cb24-70"><a href="#cb24-70" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb24-71"><a href="#cb24-71" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb24-72"><a href="#cb24-72" aria-hidden="true" tabindex="-1"></a><span class="co">-- Takes a hit position and determines the looked-at cell</span></span>
<span id="cb24-73"><a href="#cb24-73" aria-hidden="true" tabindex="-1"></a><span class="ot">findCell ::</span> <span class="dt">Vector3</span> <span class="ot">-&gt;</span> <span class="dt">Int</span></span>
<span id="cb24-74"><a href="#cb24-74" aria-hidden="true" tabindex="-1"></a>findCell (<span class="dt">Vector3</span> x y _)</span>
<span id="cb24-75"><a href="#cb24-75" aria-hidden="true" tabindex="-1"></a>  <span class="op">|</span> y <span class="op">&gt;</span> <span class="fl">0.5</span> <span class="ot">=</span> findCol <span class="dv">0</span> <span class="dv">1</span> <span class="dv">2</span></span>
<span id="cb24-76"><a href="#cb24-76" aria-hidden="true" tabindex="-1"></a>  <span class="op">|</span> y <span class="op">&lt;</span> <span class="op">-</span><span class="fl">0.5</span> <span class="ot">=</span> findCol <span class="dv">6</span> <span class="dv">7</span> <span class="dv">8</span></span>
<span id="cb24-77"><a href="#cb24-77" aria-hidden="true" tabindex="-1"></a>  <span class="op">|</span> <span class="fu">otherwise</span> <span class="ot">=</span> findCol <span class="dv">3</span> <span class="dv">4</span> <span class="dv">5</span></span>
<span id="cb24-78"><a href="#cb24-78" aria-hidden="true" tabindex="-1"></a>  <span class="kw">where</span> findCol left center right</span>
<span id="cb24-79"><a href="#cb24-79" aria-hidden="true" tabindex="-1"></a>          <span class="op">|</span> x <span class="op">&lt;</span> <span class="op">-</span><span class="fl">0.5</span> <span class="ot">=</span> left</span>
<span id="cb24-80"><a href="#cb24-80" aria-hidden="true" tabindex="-1"></a>          <span class="op">|</span> x <span class="op">&gt;</span> <span class="fl">0.5</span> <span class="ot">=</span> right</span>
<span id="cb24-81"><a href="#cb24-81" aria-hidden="true" tabindex="-1"></a>          <span class="op">|</span> <span class="fu">otherwise</span> <span class="ot">=</span> center</span>
<span id="cb24-82"><a href="#cb24-82" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb24-83"><a href="#cb24-83" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb24-84"><a href="#cb24-84" aria-hidden="true" tabindex="-1"></a><span class="co">-- Another utility function to get the length / magnitude of a vector3</span></span>
<span id="cb24-85"><a href="#cb24-85" aria-hidden="true" tabindex="-1"></a><span class="ot">magnitudeVector ::</span> <span class="dt">Vector3</span> <span class="ot">-&gt;</span> <span class="dt">Float</span></span>
<span id="cb24-86"><a href="#cb24-86" aria-hidden="true" tabindex="-1"></a>magnitudeVector (<span class="dt">Vector3</span> x y z) <span class="ot">=</span></span>
<span id="cb24-87"><a href="#cb24-87" aria-hidden="true" tabindex="-1"></a>  <span class="kw">let</span> <span class="dt">CFloat</span> f <span class="ot">=</span> <span class="fu">sqrt</span> <span class="op">$</span> (x <span class="op">*</span> x) <span class="op">+</span> (y <span class="op">*</span> y) <span class="op">+</span> (z <span class="op">*</span> z) <span class="kw">in</span> f</span></code></pre></div>
<p>Our <code>PlayerAimComponent</code> is now primed! Let’s render it to prove to ourselves that we’ve completed a major hurdle. As an extra spin, I only want to render these markings if the cell isn’t already filled. We’re going to be pretty much updating all of our rendering logic to accept the <code>LookAtTarget</code> as a new parameter:</p>
<div class="sourceCode" id="cb25"><pre class="sourceCode hs"><code class="sourceCode haskell"><span id="cb25-1"><a href="#cb25-1" aria-hidden="true" tabindex="-1"></a><span class="ot">renderBoards ::</span> <span class="dt">System</span> <span class="dt">World</span> ()</span>
<span id="cb25-2"><a href="#cb25-2" aria-hidden="true" tabindex="-1"></a>renderBoards <span class="ot">=</span> <span class="kw">do</span></span>
<span id="cb25-3"><a href="#cb25-3" aria-hidden="true" tabindex="-1"></a>  <span class="co">-- Give the target from our aim component to renderBoard</span></span>
<span id="cb25-4"><a href="#cb25-4" aria-hidden="true" tabindex="-1"></a>  <span class="dt">Aim</span> _ target <span class="ot">&lt;-</span> get global</span>
<span id="cb25-5"><a href="#cb25-5" aria-hidden="true" tabindex="-1"></a>  cmapM_ (renderBoard target)</span>
<span id="cb25-6"><a href="#cb25-6" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb25-7"><a href="#cb25-7" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb25-8"><a href="#cb25-8" aria-hidden="true" tabindex="-1"></a><span class="co">-- Accept a new parameter and forward it to renderCrosses</span></span>
<span id="cb25-9"><a href="#cb25-9" aria-hidden="true" tabindex="-1"></a><span class="ot">renderBoard ::</span> <span class="dt">LookAtTarget</span> <span class="ot">-&gt;</span> (<span class="dt">BoardComponent</span>, <span class="dt">PositionComponent</span>, <span class="dt">Entity</span>) <span class="ot">-&gt;</span></span>
<span id="cb25-10"><a href="#cb25-10" aria-hidden="true" tabindex="-1"></a>               <span class="dt">System</span> <span class="dt">World</span> ()</span>
<span id="cb25-11"><a href="#cb25-11" aria-hidden="true" tabindex="-1"></a>renderBoard target (b, <span class="dt">Position</span> p, e) <span class="ot">=</span> <span class="kw">do</span></span>
<span id="cb25-12"><a href="#cb25-12" aria-hidden="true" tabindex="-1"></a>  renderCrosses p (b, e) target</span>
<span id="cb25-13"><a href="#cb25-13" aria-hidden="true" tabindex="-1"></a>  <span class="co">-- ...</span></span>
<span id="cb25-14"><a href="#cb25-14" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb25-15"><a href="#cb25-15" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb25-16"><a href="#cb25-16" aria-hidden="true" tabindex="-1"></a><span class="co">-- Each cross now has an index - we need to check if each cross is being</span></span>
<span id="cb25-17"><a href="#cb25-17" aria-hidden="true" tabindex="-1"></a><span class="co">-- aimed at and pass that to renderCross. We have a new function to handle</span></span>
<span id="cb25-18"><a href="#cb25-18" aria-hidden="true" tabindex="-1"></a><span class="co">-- that: isAimingAtCell</span></span>
<span id="cb25-19"><a href="#cb25-19" aria-hidden="true" tabindex="-1"></a><span class="ot">renderCrosses ::</span> <span class="dt">Vector3</span> <span class="ot">-&gt;</span> (<span class="dt">BoardComponent</span>, <span class="dt">Entity</span>) <span class="ot">-&gt;</span> <span class="dt">LookAtTarget</span> <span class="ot">-&gt;</span></span>
<span id="cb25-20"><a href="#cb25-20" aria-hidden="true" tabindex="-1"></a>                 <span class="dt">System</span> <span class="dt">World</span> ()</span>
<span id="cb25-21"><a href="#cb25-21" aria-hidden="true" tabindex="-1"></a>renderCrosses origin (b, e) target <span class="ot">=</span> <span class="kw">do</span></span>
<span id="cb25-22"><a href="#cb25-22" aria-hidden="true" tabindex="-1"></a>  renderCross origin (<span class="op">-</span><span class="dv">1</span>)   <span class="dv">1</span>  (_tl b) (isAimingAtCell e <span class="dv">0</span> target)</span>
<span id="cb25-23"><a href="#cb25-23" aria-hidden="true" tabindex="-1"></a>  renderCross origin   <span class="dv">0</span>    <span class="dv">1</span>  (_tc b) (isAimingAtCell e <span class="dv">1</span> target)</span>
<span id="cb25-24"><a href="#cb25-24" aria-hidden="true" tabindex="-1"></a>  <span class="co">-- ...</span></span>
<span id="cb25-25"><a href="#cb25-25" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb25-26"><a href="#cb25-26" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb25-27"><a href="#cb25-27" aria-hidden="true" tabindex="-1"></a><span class="co">-- Checks if the target is valid, and returns true if entity and cell matches</span></span>
<span id="cb25-28"><a href="#cb25-28" aria-hidden="true" tabindex="-1"></a><span class="ot">isAimingAtCell ::</span> <span class="dt">Entity</span> <span class="ot">-&gt;</span> <span class="dt">Int</span> <span class="ot">-&gt;</span> <span class="dt">LookAtTarget</span> <span class="ot">-&gt;</span> <span class="dt">Bool</span></span>
<span id="cb25-29"><a href="#cb25-29" aria-hidden="true" tabindex="-1"></a>isAimingAtCell (<span class="dt">Entity</span> e) i (<span class="dt">Target</span> (<span class="dt">Entity</span> e&#39;) i&#39;) <span class="ot">=</span> e <span class="op">==</span> e&#39; <span class="op">&amp;&amp;</span> i <span class="op">==</span> i&#39;</span>
<span id="cb25-30"><a href="#cb25-30" aria-hidden="true" tabindex="-1"></a>isAimingAtCell _ _ _ <span class="ot">=</span> <span class="dt">False</span></span>
<span id="cb25-31"><a href="#cb25-31" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb25-32"><a href="#cb25-32" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb25-33"><a href="#cb25-33" aria-hidden="true" tabindex="-1"></a><span class="co">-- This function has another pattern to it depending on whether its aimed at</span></span>
<span id="cb25-34"><a href="#cb25-34" aria-hidden="true" tabindex="-1"></a><span class="ot">renderCross ::</span> <span class="dt">Vector3</span> <span class="ot">-&gt;</span> <span class="dt">Float</span> <span class="ot">-&gt;</span> <span class="dt">Float</span> <span class="ot">-&gt;</span> <span class="dt">Cell</span> <span class="ot">-&gt;</span> <span class="dt">Bool</span> <span class="ot">-&gt;</span> <span class="dt">System</span> <span class="dt">World</span> ()</span>
<span id="cb25-35"><a href="#cb25-35" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb25-36"><a href="#cb25-36" aria-hidden="true" tabindex="-1"></a><span class="co">-- Empty, non-aimed at cells have nothing rendered</span></span>
<span id="cb25-37"><a href="#cb25-37" aria-hidden="true" tabindex="-1"></a>renderCross _ _ _ <span class="dt">Empty</span> <span class="dt">False</span> <span class="ot">=</span> <span class="fu">pure</span> ()</span>
<span id="cb25-38"><a href="#cb25-38" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb25-39"><a href="#cb25-39" aria-hidden="true" tabindex="-1"></a><span class="co">-- Filled cells are rendered as crosses, regardless of aim</span></span>
<span id="cb25-40"><a href="#cb25-40" aria-hidden="true" tabindex="-1"></a>renderCross origin i j <span class="dt">Filled</span> _ <span class="ot">=</span> liftIO <span class="op">$</span> <span class="kw">do</span></span>
<span id="cb25-41"><a href="#cb25-41" aria-hidden="true" tabindex="-1"></a>  RL.drawLine3D (f (<span class="op">-</span><span class="fl">0.4</span>) (<span class="op">-</span><span class="fl">0.4</span>)) (f <span class="fl">0.4</span> <span class="fl">0.4</span>) RL.red</span>
<span id="cb25-42"><a href="#cb25-42" aria-hidden="true" tabindex="-1"></a>  RL.drawLine3D (f <span class="fl">0.4</span> (<span class="op">-</span><span class="fl">0.4</span>)) (f (<span class="op">-</span><span class="fl">0.4</span>) <span class="fl">0.4</span>) RL.red</span>
<span id="cb25-43"><a href="#cb25-43" aria-hidden="true" tabindex="-1"></a>  <span class="kw">where</span> center <span class="ot">=</span> addVectors origin <span class="op">$</span> <span class="dt">Vector3</span> (<span class="dt">CFloat</span> i) (<span class="dt">CFloat</span> j) <span class="dv">0</span></span>
<span id="cb25-44"><a href="#cb25-44" aria-hidden="true" tabindex="-1"></a>        f x y <span class="ot">=</span> addVectors center <span class="op">$</span> <span class="dt">Vector3</span> x y <span class="dv">0</span></span>
<span id="cb25-45"><a href="#cb25-45" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb25-46"><a href="#cb25-46" aria-hidden="true" tabindex="-1"></a><span class="co">-- Otherwise, if we have an empty cell that&#39;s aimed at, render a circle</span></span>
<span id="cb25-47"><a href="#cb25-47" aria-hidden="true" tabindex="-1"></a>renderCross origin i j <span class="dt">Empty</span> <span class="dt">True</span> <span class="ot">=</span> liftIO <span class="op">$</span> <span class="kw">do</span></span>
<span id="cb25-48"><a href="#cb25-48" aria-hidden="true" tabindex="-1"></a>    RL.drawCircle3D center <span class="fl">0.4</span> (<span class="dt">Vector3</span> <span class="dv">0</span> <span class="dv">1</span> <span class="dv">0</span>) <span class="dv">0</span> RL.yellow</span>
<span id="cb25-49"><a href="#cb25-49" aria-hidden="true" tabindex="-1"></a>  <span class="kw">where</span> center <span class="ot">=</span> addVectors origin <span class="op">$</span> <span class="dt">Vector3</span> (<span class="dt">CFloat</span> i) (<span class="dt">CFloat</span> j) <span class="dv">0</span></span></code></pre></div>
<p>And with this, it’s game over! From now on it’s mostly gameplay code, and hopefully everything we do can is reflected by our rendering! Well done if you’ve made it this far; like with most games, the rendering can easily eat up a lot of our time. I’m sure the only rendering we’ll do from now on will be trivial.</p>
<div class="caption-frame apply-shadow">
<img src="https://res.cloudinary.com/aas-sh/image/upload/v1668959570/blog/2022/11/20-11-2022_15_52_00_njlrim.png" title="We can now aim at cells, rendering the game is pretty much complete!" class="w-full object-cover" alt="We can now aim at cells, rendering the game is pretty much complete!" />
<div class="caption">
<p>We can now aim at cells, rendering the game is pretty much complete!</p>
<div class="caption-source">
<a href="https://github.com/Ashe/Notakto/tree/38d84524d96e21050e8dca6f1ec944f675d966d4" title="Notakto">Notakto</a>
</div>
</div>
</div>
<div class="gitrepo infobox fill-horizontal">
<div class="header">
<span class="lab la-github mr-3"></span>Repository - Notakto
</div>
<p>A link to the corresponding commit for the previous section can be found <a href="https://github.com/Ashe/Notakto/tree/38d84524d96e21050e8dca6f1ec944f675d966d4">here</a>.</p>
</div>
</section>
<section id="placing-crosses-dynamically" class="article-section">
<h2><span>Placing crosses dynamically</span><a href="#placing-crosses-dynamically" class="anchor las la-link" title="placing-crosses-dynamically"></a></h2>
<p>I don’t know about you, but I really hate the fact that this blog post so far has been mostly rendering! Isn’t this meant to be a blog about <a href="https://hackage.haskell.org/package/apecs">Apecs</a>?! Well, let’s fix that by finishing our game and coming up with more entities, components and systems! First up are a set of systems to handle playing the game.</p>
<p>So far, our game has been doing all of our systems every single frame — we need to have some logic ran conditionally:</p>
<ul>
<li><strong>Obviously, we need to place crosses when we click:</strong> We wouldn’t want this running every frame as the game would be unplayable!</li>
<li><strong>When we get three-in-a-row we need to kill the board:</strong> The state of the game only changes when moves are made, so this can also be ran on left click; it would be redundant otherwise!</li>
<li><strong>We need to check for game-over when a board is killed:</strong> When there are no boards remaining, the current player is the loser and the winner is decided. Again, this relies on state being changed, so we’re slowly moving away from frames to turns.</li>
<li><strong>We need to switch players:</strong> We have no concept of players yet, but when we do, we will be switching who’s turn it is as well as incrementing stats of whatever sort after checking for game-over and it being decided that play should be continued.</li>
</ul>
<div class="sourceCode" id="cb26"><pre class="sourceCode hs"><code class="sourceCode haskell"><span id="cb26-1"><a href="#cb26-1" aria-hidden="true" tabindex="-1"></a><span class="ot">update ::</span> <span class="dt">System</span> <span class="dt">World</span> ()</span>
<span id="cb26-2"><a href="#cb26-2" aria-hidden="true" tabindex="-1"></a>update <span class="ot">=</span> <span class="kw">do</span></span>
<span id="cb26-3"><a href="#cb26-3" aria-hidden="true" tabindex="-1"></a>  updateCamera</span>
<span id="cb26-4"><a href="#cb26-4" aria-hidden="true" tabindex="-1"></a>  handlePlayerAim</span>
<span id="cb26-5"><a href="#cb26-5" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb26-6"><a href="#cb26-6" aria-hidden="true" tabindex="-1"></a>  <span class="co">-- After aiming, we want to handle clicking</span></span>
<span id="cb26-7"><a href="#cb26-7" aria-hidden="true" tabindex="-1"></a>  clicked <span class="ot">&lt;-</span> liftIO <span class="op">$</span> RL.isMouseButtonPressed <span class="dv">0</span></span>
<span id="cb26-8"><a href="#cb26-8" aria-hidden="true" tabindex="-1"></a>  when clicked <span class="op">$</span> <span class="kw">do</span></span>
<span id="cb26-9"><a href="#cb26-9" aria-hidden="true" tabindex="-1"></a>    handleLeftClick</span>
<span id="cb26-10"><a href="#cb26-10" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb26-11"><a href="#cb26-11" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb26-12"><a href="#cb26-12" aria-hidden="true" tabindex="-1"></a><span class="co">-- Handles everything that may happen following a left-click</span></span>
<span id="cb26-13"><a href="#cb26-13" aria-hidden="true" tabindex="-1"></a><span class="ot">handleLeftClick ::</span> <span class="dt">System</span> <span class="dt">World</span> ()</span>
<span id="cb26-14"><a href="#cb26-14" aria-hidden="true" tabindex="-1"></a>handleLeftClick <span class="ot">=</span> <span class="kw">do</span></span>
<span id="cb26-15"><a href="#cb26-15" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb26-16"><a href="#cb26-16" aria-hidden="true" tabindex="-1"></a>  <span class="co">-- Try and place a cross, and print a message when successful</span></span>
<span id="cb26-17"><a href="#cb26-17" aria-hidden="true" tabindex="-1"></a>  moveMade <span class="ot">&lt;-</span> tryPlaceCross</span>
<span id="cb26-18"><a href="#cb26-18" aria-hidden="true" tabindex="-1"></a>  when moveMade <span class="op">$</span> <span class="kw">do</span></span>
<span id="cb26-19"><a href="#cb26-19" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb26-20"><a href="#cb26-20" aria-hidden="true" tabindex="-1"></a>    <span class="co">-- Note: This is where we&#39;ll check for game-over later</span></span>
<span id="cb26-21"><a href="#cb26-21" aria-hidden="true" tabindex="-1"></a>    liftIO <span class="op">$</span> <span class="fu">putStrLn</span> <span class="st">&quot;Move Made!&quot;</span></span>
<span id="cb26-22"><a href="#cb26-22" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb26-23"><a href="#cb26-23" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb26-24"><a href="#cb26-24" aria-hidden="true" tabindex="-1"></a><span class="co">-- This system returns true if a new cross is placed on the board</span></span>
<span id="cb26-25"><a href="#cb26-25" aria-hidden="true" tabindex="-1"></a><span class="ot">tryPlaceCross ::</span> <span class="dt">System</span> <span class="dt">World</span> <span class="dt">Bool</span></span>
<span id="cb26-26"><a href="#cb26-26" aria-hidden="true" tabindex="-1"></a>tryPlaceCross <span class="ot">=</span> <span class="kw">do</span></span>
<span id="cb26-27"><a href="#cb26-27" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb26-28"><a href="#cb26-28" aria-hidden="true" tabindex="-1"></a>  <span class="co">-- Get the player&#39;s target</span></span>
<span id="cb26-29"><a href="#cb26-29" aria-hidden="true" tabindex="-1"></a>  <span class="dt">Aim</span> _ target <span class="ot">&lt;-</span> get global</span>
<span id="cb26-30"><a href="#cb26-30" aria-hidden="true" tabindex="-1"></a>  <span class="kw">case</span> target <span class="kw">of</span></span>
<span id="cb26-31"><a href="#cb26-31" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb26-32"><a href="#cb26-32" aria-hidden="true" tabindex="-1"></a>    <span class="co">-- Do nothing if there is no target</span></span>
<span id="cb26-33"><a href="#cb26-33" aria-hidden="true" tabindex="-1"></a>    <span class="dt">NoTarget</span> <span class="ot">-&gt;</span> <span class="fu">pure</span> <span class="dt">False</span></span>
<span id="cb26-34"><a href="#cb26-34" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb26-35"><a href="#cb26-35" aria-hidden="true" tabindex="-1"></a>    <span class="co">-- If there is a target, try to mutate the state of the board</span></span>
<span id="cb26-36"><a href="#cb26-36" aria-hidden="true" tabindex="-1"></a>    <span class="dt">Target</span> e i <span class="ot">-&gt;</span> <span class="kw">do</span></span>
<span id="cb26-37"><a href="#cb26-37" aria-hidden="true" tabindex="-1"></a>      board <span class="ot">&lt;-</span> get e</span>
<span id="cb26-38"><a href="#cb26-38" aria-hidden="true" tabindex="-1"></a>      <span class="kw">if</span> getCell board i <span class="op">==</span> <span class="dt">Empty</span> <span class="kw">then</span> <span class="kw">do</span></span>
<span id="cb26-39"><a href="#cb26-39" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb26-40"><a href="#cb26-40" aria-hidden="true" tabindex="-1"></a>        <span class="co">-- We set the component on the entity here directly,</span></span>
<span id="cb26-41"><a href="#cb26-41" aria-hidden="true" tabindex="-1"></a>        <span class="co">-- if you&#39;re doing this on lots of entities you should be using cmap</span></span>
<span id="cb26-42"><a href="#cb26-42" aria-hidden="true" tabindex="-1"></a>        set e <span class="op">$</span> setCell board i <span class="dt">Filled</span></span>
<span id="cb26-43"><a href="#cb26-43" aria-hidden="true" tabindex="-1"></a>        <span class="fu">pure</span> <span class="dt">True</span></span>
<span id="cb26-44"><a href="#cb26-44" aria-hidden="true" tabindex="-1"></a>      <span class="kw">else</span></span>
<span id="cb26-45"><a href="#cb26-45" aria-hidden="true" tabindex="-1"></a>        <span class="fu">pure</span> <span class="dt">False</span></span>
<span id="cb26-46"><a href="#cb26-46" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb26-47"><a href="#cb26-47" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb26-48"><a href="#cb26-48" aria-hidden="true" tabindex="-1"></a><span class="co">-- Convenience function for retrieving a cell by-index</span></span>
<span id="cb26-49"><a href="#cb26-49" aria-hidden="true" tabindex="-1"></a><span class="ot">getCell ::</span> <span class="dt">BoardComponent</span> <span class="ot">-&gt;</span> <span class="dt">Int</span> <span class="ot">-&gt;</span> <span class="dt">Cell</span></span>
<span id="cb26-50"><a href="#cb26-50" aria-hidden="true" tabindex="-1"></a>getCell b <span class="dv">0</span> <span class="ot">=</span>_tl b</span>
<span id="cb26-51"><a href="#cb26-51" aria-hidden="true" tabindex="-1"></a>getCell b <span class="dv">1</span> <span class="ot">=</span>_tc b</span>
<span id="cb26-52"><a href="#cb26-52" aria-hidden="true" tabindex="-1"></a>getCell b <span class="dv">2</span> <span class="ot">=</span>_tr b</span>
<span id="cb26-53"><a href="#cb26-53" aria-hidden="true" tabindex="-1"></a><span class="co">-- ...</span></span>
<span id="cb26-54"><a href="#cb26-54" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb26-55"><a href="#cb26-55" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb26-56"><a href="#cb26-56" aria-hidden="true" tabindex="-1"></a><span class="co">-- Convenience function for setting a cell by-index</span></span>
<span id="cb26-57"><a href="#cb26-57" aria-hidden="true" tabindex="-1"></a><span class="ot">setCell ::</span> <span class="dt">BoardComponent</span> <span class="ot">-&gt;</span> <span class="dt">Int</span> <span class="ot">-&gt;</span> <span class="dt">Cell</span> <span class="ot">-&gt;</span> <span class="dt">BoardComponent</span></span>
<span id="cb26-58"><a href="#cb26-58" aria-hidden="true" tabindex="-1"></a>setCell b <span class="dv">0</span> c <span class="ot">=</span> b { _tl <span class="ot">=</span> c }</span>
<span id="cb26-59"><a href="#cb26-59" aria-hidden="true" tabindex="-1"></a>setCell b <span class="dv">1</span> c <span class="ot">=</span> b { _tc <span class="ot">=</span> c }</span>
<span id="cb26-60"><a href="#cb26-60" aria-hidden="true" tabindex="-1"></a>setCell b <span class="dv">2</span> c <span class="ot">=</span> b { _tr <span class="ot">=</span> c }</span>
<span id="cb26-61"><a href="#cb26-61" aria-hidden="true" tabindex="-1"></a><span class="co">-- ...</span></span></code></pre></div>
<p>If you give the game a try now, you’ll be happy to see that, as expected, we can now place crosses when we click the mouse button. We have a lot of momentum now, let’s not stop here and move onto finishing the game loop itself!</p>
<div class="gitrepo infobox fill-horizontal">
<div class="header">
<span class="lab la-github mr-3"></span>Repository - Notakto
</div>
<p>A link to the corresponding commit for the previous section can be found <a href="https://github.com/Ashe/Notakto/tree/c740a55ee514d1d7d93dda38f4cdfd9a2a079fcb">here</a>.</p>
</div>
</section>
<section id="killing-boards" class="article-section">
<h2><span>Killing boards</span><a href="#killing-boards" class="anchor las la-link" title="killing-boards"></a></h2>
<p>The rules of Notakto state that when a three-in-a-row is detected, a board is declared ‘dead’ and can no longer be played on; when there are no boards remaining, the game is over and the current player loses. Killing boards is just as important as making moves on a single board, however fortunately for us this won’t be difficult at all to pull off with the tools we have.</p>
<ol type="1">
<li><strong>We will create a new component that we attach to boards to render them dead:</strong> We <em>could</em> calculate if a board is dead every time we need to know, but this will add up especially if we want to render this somehow. If we use a component, we can trivially iterate through alive and dead boards.</li>
<li><strong>We will count the dead boards:</strong> We will use <code>cfold</code> to count the number of boards that are alive, and if this number is 0 we will declare the game to be over.</li>
<li><strong>We will <em>not</em> render dead boards:</strong> I’m stick of doing rendering in this tutorial. I’m going to force the players to manually check the state of the board for whether they’re playable — it’s not a <em>missing feature</em>, it’s a <strong><em>skill check</em></strong>.</li>
</ol>
<div class="sourceCode" id="cb27"><pre class="sourceCode hs"><code class="sourceCode haskell"><span id="cb27-1"><a href="#cb27-1" aria-hidden="true" tabindex="-1"></a><span class="co">-- New component with a unary data constructor</span></span>
<span id="cb27-2"><a href="#cb27-2" aria-hidden="true" tabindex="-1"></a><span class="co">-- Note: To test for absense, we will be using the type Not DeathComponent</span></span>
<span id="cb27-3"><a href="#cb27-3" aria-hidden="true" tabindex="-1"></a><span class="kw">data</span> <span class="dt">DeathComponent</span> <span class="ot">=</span> <span class="dt">Dead</span> <span class="kw">deriving</span> (<span class="dt">Show</span>, <span class="dt">Eq</span>)</span>
<span id="cb27-4"><a href="#cb27-4" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb27-5"><a href="#cb27-5" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb27-6"><a href="#cb27-6" aria-hidden="true" tabindex="-1"></a><span class="co">-- New system that will kill any boards with three-in-a-row and</span></span>
<span id="cb27-7"><a href="#cb27-7" aria-hidden="true" tabindex="-1"></a><span class="co">-- then return if there&#39;s a game-over</span></span>
<span id="cb27-8"><a href="#cb27-8" aria-hidden="true" tabindex="-1"></a><span class="ot">checkForGameOver ::</span> <span class="dt">System</span> <span class="dt">World</span> <span class="dt">Bool</span></span>
<span id="cb27-9"><a href="#cb27-9" aria-hidden="true" tabindex="-1"></a>checkForGameOver <span class="ot">=</span> <span class="kw">do</span></span>
<span id="cb27-10"><a href="#cb27-10" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb27-11"><a href="#cb27-11" aria-hidden="true" tabindex="-1"></a>  <span class="co">-- Map a function onto all entities with boards, killing them if possible</span></span>
<span id="cb27-12"><a href="#cb27-12" aria-hidden="true" tabindex="-1"></a>  cmap tryKillBoard</span>
<span id="cb27-13"><a href="#cb27-13" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb27-14"><a href="#cb27-14" aria-hidden="true" tabindex="-1"></a>  <span class="co">-- Count the number of boards that are alive (lack of death component)</span></span>
<span id="cb27-15"><a href="#cb27-15" aria-hidden="true" tabindex="-1"></a>  <span class="kw">let</span><span class="ot"> countAlive ::</span> <span class="dt">Int</span> <span class="ot">-&gt;</span> (<span class="dt">BoardComponent</span>, <span class="dt">Not</span> <span class="dt">DeathComponent</span>) <span class="ot">-&gt;</span> <span class="dt">Int</span></span>
<span id="cb27-16"><a href="#cb27-16" aria-hidden="true" tabindex="-1"></a>      countAlive c (_, _) <span class="ot">=</span> c <span class="op">+</span> <span class="dv">1</span></span>
<span id="cb27-17"><a href="#cb27-17" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb27-18"><a href="#cb27-18" aria-hidden="true" tabindex="-1"></a>  <span class="co">-- Perform the counting and return true if all boards dead</span></span>
<span id="cb27-19"><a href="#cb27-19" aria-hidden="true" tabindex="-1"></a>  count <span class="ot">&lt;-</span> cfold countAlive <span class="dv">0</span></span>
<span id="cb27-20"><a href="#cb27-20" aria-hidden="true" tabindex="-1"></a>  <span class="fu">pure</span> <span class="op">$</span> count <span class="op">&lt;=</span> <span class="dv">0</span></span>
<span id="cb27-21"><a href="#cb27-21" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb27-22"><a href="#cb27-22" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb27-23"><a href="#cb27-23" aria-hidden="true" tabindex="-1"></a><span class="co">-- Note the type signature; we use &#39;Not&#39; to exclude dead boards</span></span>
<span id="cb27-24"><a href="#cb27-24" aria-hidden="true" tabindex="-1"></a><span class="co">-- Another thing to note is that we return &#39;Maybe DeathComponent&#39;,</span></span>
<span id="cb27-25"><a href="#cb27-25" aria-hidden="true" tabindex="-1"></a><span class="co">-- this hints that we may or may not be adding a component to the entity</span></span>
<span id="cb27-26"><a href="#cb27-26" aria-hidden="true" tabindex="-1"></a><span class="ot">tryKillBoard ::</span> (<span class="dt">BoardComponent</span>, <span class="dt">Not</span> <span class="dt">DeathComponent</span>) <span class="ot">-&gt;</span> <span class="dt">Maybe</span> <span class="dt">DeathComponent</span></span>
<span id="cb27-27"><a href="#cb27-27" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb27-28"><a href="#cb27-28" aria-hidden="true" tabindex="-1"></a><span class="co">-- Just Dead will add the DeathComponent, Nothing will add nothing</span></span>
<span id="cb27-29"><a href="#cb27-29" aria-hidden="true" tabindex="-1"></a>tryKillBoard (bc, _) <span class="ot">=</span> <span class="kw">if</span> check cellCombos <span class="kw">then</span> <span class="dt">Just</span> <span class="dt">Dead</span> <span class="kw">else</span> <span class="dt">Nothing</span></span>
<span id="cb27-30"><a href="#cb27-30" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb27-31"><a href="#cb27-31" aria-hidden="true" tabindex="-1"></a>  <span class="co">-- Fold through a list of combos and check if any are threes-in-a-row</span></span>
<span id="cb27-32"><a href="#cb27-32" aria-hidden="true" tabindex="-1"></a>  <span class="kw">where</span> check <span class="ot">=</span> <span class="fu">foldl</span> (\dead (a, b, c) <span class="ot">-&gt;</span> dead <span class="op">||</span> checkCombo a b c) <span class="dt">False</span></span>
<span id="cb27-33"><a href="#cb27-33" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb27-34"><a href="#cb27-34" aria-hidden="true" tabindex="-1"></a>        <span class="co">-- Check if all cells in a combination are filled, meaning a win</span></span>
<span id="cb27-35"><a href="#cb27-35" aria-hidden="true" tabindex="-1"></a>        checkCombo a b c <span class="ot">=</span> checkCell a <span class="op">&amp;&amp;</span> checkCell b <span class="op">&amp;&amp;</span> checkCell c</span>
<span id="cb27-36"><a href="#cb27-36" aria-hidden="true" tabindex="-1"></a>        checkCell c <span class="ot">=</span> getCell bc c <span class="op">==</span> <span class="dt">Filled</span></span>
<span id="cb27-37"><a href="#cb27-37" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb27-38"><a href="#cb27-38" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb27-39"><a href="#cb27-39" aria-hidden="true" tabindex="-1"></a><span class="co">-- A list of all cell combinations in index form (to be used with getCell)</span></span>
<span id="cb27-40"><a href="#cb27-40" aria-hidden="true" tabindex="-1"></a><span class="ot">cellCombos ::</span> [(<span class="dt">Int</span>, <span class="dt">Int</span>, <span class="dt">Int</span>)]</span>
<span id="cb27-41"><a href="#cb27-41" aria-hidden="true" tabindex="-1"></a>cellCombos <span class="ot">=</span> [</span>
<span id="cb27-42"><a href="#cb27-42" aria-hidden="true" tabindex="-1"></a>  <span class="co">-- Horizontal</span></span>
<span id="cb27-43"><a href="#cb27-43" aria-hidden="true" tabindex="-1"></a>  (<span class="dv">0</span>, <span class="dv">1</span>, <span class="dv">2</span>),</span>
<span id="cb27-44"><a href="#cb27-44" aria-hidden="true" tabindex="-1"></a>  (<span class="dv">3</span>, <span class="dv">4</span>, <span class="dv">5</span>),</span>
<span id="cb27-45"><a href="#cb27-45" aria-hidden="true" tabindex="-1"></a>  (<span class="dv">6</span>, <span class="dv">7</span>, <span class="dv">8</span>),</span>
<span id="cb27-46"><a href="#cb27-46" aria-hidden="true" tabindex="-1"></a>  <span class="co">-- Vertical</span></span>
<span id="cb27-47"><a href="#cb27-47" aria-hidden="true" tabindex="-1"></a>  (<span class="dv">0</span>, <span class="dv">3</span>, <span class="dv">6</span>),</span>
<span id="cb27-48"><a href="#cb27-48" aria-hidden="true" tabindex="-1"></a>  (<span class="dv">1</span>, <span class="dv">4</span>, <span class="dv">7</span>),</span>
<span id="cb27-49"><a href="#cb27-49" aria-hidden="true" tabindex="-1"></a>  (<span class="dv">2</span>, <span class="dv">5</span>, <span class="dv">8</span>),</span>
<span id="cb27-50"><a href="#cb27-50" aria-hidden="true" tabindex="-1"></a>  <span class="co">-- Diagonal</span></span>
<span id="cb27-51"><a href="#cb27-51" aria-hidden="true" tabindex="-1"></a>  (<span class="dv">0</span>, <span class="dv">4</span>, <span class="dv">8</span>),</span>
<span id="cb27-52"><a href="#cb27-52" aria-hidden="true" tabindex="-1"></a>  (<span class="dv">2</span>, <span class="dv">4</span>, <span class="dv">6</span>)</span>
<span id="cb27-53"><a href="#cb27-53" aria-hidden="true" tabindex="-1"></a>  ]</span></code></pre></div>
<p>You may think that’s it, but now we need to sprinkle mention of the <code>DeathComponent</code> to places where we don’t want interactions with dead boards. After looking through the code, I can only think of one place, but you might have more:</p>
<div class="sourceCode" id="cb28"><pre class="sourceCode hs"><code class="sourceCode haskell"><span id="cb28-1"><a href="#cb28-1" aria-hidden="true" tabindex="-1"></a><span class="ot">findLookAtTarget ::</span> <span class="dt">RL.Ray</span> <span class="ot">-&gt;</span> <span class="dt">LookAtTarget</span> <span class="ot">-&gt;</span> (<span class="dt">BoardComponent</span>,</span>
<span id="cb28-2"><a href="#cb28-2" aria-hidden="true" tabindex="-1"></a>                    <span class="dt">PositionComponent</span>, <span class="dt">Not</span> <span class="dt">DeathComponent</span>, <span class="dt">Entity</span>) <span class="ot">-&gt;</span></span>
<span id="cb28-3"><a href="#cb28-3" aria-hidden="true" tabindex="-1"></a>                    <span class="dt">System</span> <span class="dt">World</span> <span class="dt">LookAtTarget</span></span></code></pre></div>
<p>If you want to special rendering for dead boards, now is the time! You might even want to update the death component to contain data regarding the winning combination for easy access!</p>
<p>Let’s now use our new system in the game and print a message if the game is over:</p>
<div class="sourceCode" id="cb29"><pre class="sourceCode hs"><code class="sourceCode haskell"><span id="cb29-1"><a href="#cb29-1" aria-hidden="true" tabindex="-1"></a><span class="ot">handleLeftClick ::</span> <span class="dt">System</span> <span class="dt">World</span> ()</span>
<span id="cb29-2"><a href="#cb29-2" aria-hidden="true" tabindex="-1"></a>handleLeftClick <span class="ot">=</span> <span class="kw">do</span></span>
<span id="cb29-3"><a href="#cb29-3" aria-hidden="true" tabindex="-1"></a>  moveMade <span class="ot">&lt;-</span> tryPlaceCross</span>
<span id="cb29-4"><a href="#cb29-4" aria-hidden="true" tabindex="-1"></a>  when moveMade <span class="op">$</span> <span class="kw">do</span></span>
<span id="cb29-5"><a href="#cb29-5" aria-hidden="true" tabindex="-1"></a>    isGameOver <span class="ot">&lt;-</span> checkForGameOver</span>
<span id="cb29-6"><a href="#cb29-6" aria-hidden="true" tabindex="-1"></a>    <span class="kw">if</span> isGameOver <span class="kw">then</span></span>
<span id="cb29-7"><a href="#cb29-7" aria-hidden="true" tabindex="-1"></a>      liftIO <span class="op">$</span> <span class="fu">putStrLn</span> <span class="st">&quot;Game over!&quot;</span></span>
<span id="cb29-8"><a href="#cb29-8" aria-hidden="true" tabindex="-1"></a>    <span class="kw">else</span></span>
<span id="cb29-9"><a href="#cb29-9" aria-hidden="true" tabindex="-1"></a>      liftIO <span class="op">$</span> <span class="fu">putStrLn</span> <span class="st">&quot;Next turn!&quot;</span></span></code></pre></div>
<div class="caption-frame apply-shadow">
<img src="https://res.cloudinary.com/aas-sh/image/upload/v1668969610/blog/2022/11/20-11-2022_18_39_47_svchfm.png" title="We can now detect a game over --- it&#39;s all coming together!" class="w-full object-cover" alt="We can now detect a game over --- it&#39;s all coming together!" />
<div class="caption">
<p>We can now detect a game over — it’s all coming together!</p>
<div class="caption-source">
<a href="https://github.com/Ashe/Notakto/tree/e6f589f3661fd8070ef977021174edb3ca808188" title="Notakto">Notakto</a>
</div>
</div>
</div>
</section>
<section id="restarting-the-game" class="article-section">
<h2><span>Restarting the game</span><a href="#restarting-the-game" class="anchor las la-link" title="restarting-the-game"></a></h2>
<p>Before we finish this chapter, let’s handle restarting the game as it’s very related to the previous section! Firstly, even though we named the function <code>checkForGameOver</code>, this function is also responsible for killing boards. Let’s do this elsewhere so that this function is purely a check, this way we can reuse it without worry!</p>
<div class="sourceCode" id="cb30"><pre class="sourceCode hs"><code class="sourceCode haskell"><span id="cb30-1"><a href="#cb30-1" aria-hidden="true" tabindex="-1"></a><span class="ot">handleLeftClick ::</span> <span class="dt">System</span> <span class="dt">World</span> ()</span>
<span id="cb30-2"><a href="#cb30-2" aria-hidden="true" tabindex="-1"></a>handleLeftClick <span class="ot">=</span> <span class="kw">do</span></span>
<span id="cb30-3"><a href="#cb30-3" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb30-4"><a href="#cb30-4" aria-hidden="true" tabindex="-1"></a>  <span class="co">-- Check if the game is already over before making a move</span></span>
<span id="cb30-5"><a href="#cb30-5" aria-hidden="true" tabindex="-1"></a>  needsRestart <span class="ot">&lt;-</span> checkForGameOver</span>
<span id="cb30-6"><a href="#cb30-6" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb30-7"><a href="#cb30-7" aria-hidden="true" tabindex="-1"></a>  <span class="co">-- Only make moves if the game isn&#39;t over</span></span>
<span id="cb30-8"><a href="#cb30-8" aria-hidden="true" tabindex="-1"></a>  <span class="kw">if</span> <span class="fu">not</span> needsRestart <span class="kw">then</span> <span class="kw">do</span></span>
<span id="cb30-9"><a href="#cb30-9" aria-hidden="true" tabindex="-1"></a>    moveMade <span class="ot">&lt;-</span> tryPlaceCross</span>
<span id="cb30-10"><a href="#cb30-10" aria-hidden="true" tabindex="-1"></a>    when moveMade <span class="op">$</span> <span class="kw">do</span></span>
<span id="cb30-11"><a href="#cb30-11" aria-hidden="true" tabindex="-1"></a>      cmap tryKillBoard</span>
<span id="cb30-12"><a href="#cb30-12" aria-hidden="true" tabindex="-1"></a>      isGameOver <span class="ot">&lt;-</span> checkForGameOver</span>
<span id="cb30-13"><a href="#cb30-13" aria-hidden="true" tabindex="-1"></a>      <span class="kw">if</span> isGameOver <span class="kw">then</span></span>
<span id="cb30-14"><a href="#cb30-14" aria-hidden="true" tabindex="-1"></a>        liftIO <span class="op">$</span> <span class="fu">putStrLn</span> <span class="st">&quot;Game over!&quot;</span></span>
<span id="cb30-15"><a href="#cb30-15" aria-hidden="true" tabindex="-1"></a>      <span class="kw">else</span></span>
<span id="cb30-16"><a href="#cb30-16" aria-hidden="true" tabindex="-1"></a>        liftIO <span class="op">$</span> <span class="fu">putStrLn</span> <span class="st">&quot;Next turn!&quot;</span></span>
<span id="cb30-17"><a href="#cb30-17" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb30-18"><a href="#cb30-18" aria-hidden="true" tabindex="-1"></a>  <span class="co">-- Otherwise, restart the game</span></span>
<span id="cb30-19"><a href="#cb30-19" aria-hidden="true" tabindex="-1"></a>  <span class="kw">else</span> <span class="kw">do</span></span>
<span id="cb30-20"><a href="#cb30-20" aria-hidden="true" tabindex="-1"></a>    newGame</span>
<span id="cb30-21"><a href="#cb30-21" aria-hidden="true" tabindex="-1"></a>    liftIO <span class="op">$</span> <span class="fu">putStrLn</span> <span class="st">&quot;Restarted game!&quot;</span></span>
<span id="cb30-22"><a href="#cb30-22" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb30-23"><a href="#cb30-23" aria-hidden="true" tabindex="-1"></a><span class="co">-- New initialisation function that deletes all entities</span></span>
<span id="cb30-24"><a href="#cb30-24" aria-hidden="true" tabindex="-1"></a><span class="ot">newGame ::</span> <span class="dt">System</span> <span class="dt">World</span> ()</span>
<span id="cb30-25"><a href="#cb30-25" aria-hidden="true" tabindex="-1"></a>newGame <span class="ot">=</span> <span class="kw">do</span></span>
<span id="cb30-26"><a href="#cb30-26" aria-hidden="true" tabindex="-1"></a>  cmapM_ deleteBoard</span>
<span id="cb30-27"><a href="#cb30-27" aria-hidden="true" tabindex="-1"></a>  createBoards <span class="dv">3</span></span>
<span id="cb30-28"><a href="#cb30-28" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb30-29"><a href="#cb30-29" aria-hidden="true" tabindex="-1"></a>  <span class="co">-- You can&#39;t really &#39;delete&#39; entities in Apecs since entities are just ints;</span></span>
<span id="cb30-30"><a href="#cb30-30" aria-hidden="true" tabindex="-1"></a>  <span class="co">-- you have to delete their components. We use a convenience function.</span></span>
<span id="cb30-31"><a href="#cb30-31" aria-hidden="true" tabindex="-1"></a>  <span class="kw">where</span> deleteBoard (<span class="dt">Board</span>{}, e) <span class="ot">=</span> destroyEntity e</span>
<span id="cb30-32"><a href="#cb30-32" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb30-33"><a href="#cb30-33" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb30-34"><a href="#cb30-34" aria-hidden="true" tabindex="-1"></a><span class="co">-- We make a type combining all types for miscellaneous use</span></span>
<span id="cb30-35"><a href="#cb30-35" aria-hidden="true" tabindex="-1"></a><span class="kw">type</span> <span class="dt">AllComponents</span> <span class="ot">=</span> (<span class="dt">PositionComponent</span>, <span class="dt">CameraComponent</span>, <span class="dt">BoardComponent</span>,</span>
<span id="cb30-36"><a href="#cb30-36" aria-hidden="true" tabindex="-1"></a>  <span class="dt">DeathComponent</span>, <span class="dt">PlayerAimComponent</span>)</span>
<span id="cb30-37"><a href="#cb30-37" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb30-38"><a href="#cb30-38" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb30-39"><a href="#cb30-39" aria-hidden="true" tabindex="-1"></a><span class="co">-- Trivial deletion function</span></span>
<span id="cb30-40"><a href="#cb30-40" aria-hidden="true" tabindex="-1"></a><span class="ot">destroyEntity ::</span> <span class="dt">Entity</span> <span class="ot">-&gt;</span> <span class="dt">System</span> <span class="dt">World</span> ()</span>
<span id="cb30-41"><a href="#cb30-41" aria-hidden="true" tabindex="-1"></a>destroyEntity e <span class="ot">=</span> destroy e (<span class="dt">Proxy</span><span class="ot"> ::</span> <span class="dt">Proxy</span> <span class="dt">AllComponents</span>)</span></code></pre></div>
<p>Deletion in Apecs can be a little tricky, but as the author writes in <a href="https://github.com/jonascarpay/apecs/issues/13#issuecomment-392630286">this comment</a>, as long as we obliterate any components on an entity it will stop having any effect on the application!</p>
<div class="caption-frame apply-shadow">
<blockquote>
<p>You can’t destroy an entity, you can only destroy each of its components. An Entity is just an integer that may or may not some components associated with it. There is currently no way to destroy all components for a given entity.</p>
<p>I might add some support for this in the future, but if you use type synonyms for common tuples, it shouldn’t be an issue.</p>
</blockquote>
<div class="caption">
<p>Apecs author Jonascarpay talking about deletion in Apecs.</p>
<div class="caption-source">
<a href="https://github.com/jonascarpay/apecs/issues/13#issuecomment-392630286" title="Github">Github</a>
</div>
</div>
</div>
<p>Well done, you can now play, complete and restart games! If you were to track turns and play with a friend, you could call this the end and enjoy it! There’s one final thing I want to do before I call quits and leave the rest up to you: creating the notion of players!</p>
<div class="gitrepo infobox fill-horizontal">
<div class="header">
<span class="lab la-github mr-3"></span>Repository - Notakto
</div>
<p>A link to the corresponding commit for the previous section can be found <a href="https://github.com/Ashe/Notakto/tree/63f686a4ae9fcba150c04b0605c2b4d781af2012">here</a>.</p>
</div>
</section>
<section id="making-players-take-turns" class="article-section">
<h2><span>Making players take turns</span><a href="#making-players-take-turns" class="anchor las la-link" title="making-players-take-turns"></a></h2>
<p>The game is essentially complete, but we don’t really track the current player anywhere! I’m going to leave out the rendering and purely focus on the components and systems as I’m sure anyone reading this can fill in the gaps.</p>
<div class="sourceCode" id="cb31"><pre class="sourceCode hs"><code class="sourceCode haskell"><span id="cb31-1"><a href="#cb31-1" aria-hidden="true" tabindex="-1"></a><span class="co">-- New component for tracking the current player</span></span>
<span id="cb31-2"><a href="#cb31-2" aria-hidden="true" tabindex="-1"></a><span class="kw">data</span> <span class="dt">PlayerComponent</span> <span class="ot">=</span> <span class="dt">Red</span> <span class="op">|</span> <span class="dt">Blue</span> <span class="kw">deriving</span> (<span class="dt">Show</span>, <span class="dt">Eq</span>)</span>
<span id="cb31-3"><a href="#cb31-3" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb31-4"><a href="#cb31-4" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb31-5"><a href="#cb31-5" aria-hidden="true" tabindex="-1"></a><span class="co">-- Initialise the current player when we initialise the camera</span></span>
<span id="cb31-6"><a href="#cb31-6" aria-hidden="true" tabindex="-1"></a>set global <span class="op">$</span> (<span class="dt">Camera</span> camera, <span class="dt">Red</span>)</span>
<span id="cb31-7"><a href="#cb31-7" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb31-8"><a href="#cb31-8" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb31-9"><a href="#cb31-9" aria-hidden="true" tabindex="-1"></a><span class="co">-- Switch players when a non-winning move is made</span></span>
<span id="cb31-10"><a href="#cb31-10" aria-hidden="true" tabindex="-1"></a><span class="ot">handleLeftClick ::</span> <span class="dt">System</span> <span class="dt">World</span> ()</span>
<span id="cb31-11"><a href="#cb31-11" aria-hidden="true" tabindex="-1"></a>handleLeftClick <span class="ot">=</span> <span class="kw">do</span></span>
<span id="cb31-12"><a href="#cb31-12" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb31-13"><a href="#cb31-13" aria-hidden="true" tabindex="-1"></a>  <span class="co">-- Grab current player</span></span>
<span id="cb31-14"><a href="#cb31-14" aria-hidden="true" tabindex="-1"></a>  player <span class="ot">&lt;-</span> get global</span>
<span id="cb31-15"><a href="#cb31-15" aria-hidden="true" tabindex="-1"></a>  needsRestart <span class="ot">&lt;-</span> checkForGameOver</span>
<span id="cb31-16"><a href="#cb31-16" aria-hidden="true" tabindex="-1"></a>  <span class="kw">if</span> <span class="fu">not</span> needsRestart <span class="kw">then</span> <span class="kw">do</span></span>
<span id="cb31-17"><a href="#cb31-17" aria-hidden="true" tabindex="-1"></a>    moveMade <span class="ot">&lt;-</span> tryPlaceCross</span>
<span id="cb31-18"><a href="#cb31-18" aria-hidden="true" tabindex="-1"></a>    when moveMade <span class="op">$</span> <span class="kw">do</span></span>
<span id="cb31-19"><a href="#cb31-19" aria-hidden="true" tabindex="-1"></a>      cmap tryKillBoard</span>
<span id="cb31-20"><a href="#cb31-20" aria-hidden="true" tabindex="-1"></a>      isGameOver <span class="ot">&lt;-</span> checkForGameOver</span>
<span id="cb31-21"><a href="#cb31-21" aria-hidden="true" tabindex="-1"></a>      <span class="kw">if</span> isGameOver <span class="kw">then</span></span>
<span id="cb31-22"><a href="#cb31-22" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb31-23"><a href="#cb31-23" aria-hidden="true" tabindex="-1"></a>        <span class="co">-- Print that the current player lost</span></span>
<span id="cb31-24"><a href="#cb31-24" aria-hidden="true" tabindex="-1"></a>        liftIO <span class="op">$</span> <span class="fu">putStrLn</span> <span class="op">$</span> <span class="st">&quot;Game over! &quot;</span> <span class="op">++</span> <span class="fu">show</span> player <span class="op">++</span> <span class="st">&quot; loses!&quot;</span></span>
<span id="cb31-25"><a href="#cb31-25" aria-hidden="true" tabindex="-1"></a>      <span class="kw">else</span> <span class="kw">do</span></span>
<span id="cb31-26"><a href="#cb31-26" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb31-27"><a href="#cb31-27" aria-hidden="true" tabindex="-1"></a>        <span class="co">-- Swap players and print who&#39;s turn it is</span></span>
<span id="cb31-28"><a href="#cb31-28" aria-hidden="true" tabindex="-1"></a>        <span class="kw">let</span> nextPlayer <span class="ot">=</span> <span class="kw">if</span> player <span class="op">==</span> <span class="dt">Red</span> <span class="kw">then</span> <span class="dt">Blue</span> <span class="kw">else</span> <span class="dt">Red</span></span>
<span id="cb31-29"><a href="#cb31-29" aria-hidden="true" tabindex="-1"></a>        set global nextPlayer</span>
<span id="cb31-30"><a href="#cb31-30" aria-hidden="true" tabindex="-1"></a>        liftIO <span class="op">$</span> <span class="fu">putStrLn</span> <span class="op">$</span> <span class="st">&quot;It&#39;s &quot;</span> <span class="op">++</span> <span class="fu">show</span> nextPlayer <span class="op">++</span> <span class="st">&quot;&#39;s turn!&quot;</span></span>
<span id="cb31-31"><a href="#cb31-31" aria-hidden="true" tabindex="-1"></a>  <span class="kw">else</span> <span class="kw">do</span></span>
<span id="cb31-32"><a href="#cb31-32" aria-hidden="true" tabindex="-1"></a>    newGame</span>
<span id="cb31-33"><a href="#cb31-33" aria-hidden="true" tabindex="-1"></a>    liftIO <span class="op">$</span> <span class="fu">putStrLn</span> <span class="op">$</span> <span class="st">&quot;Restarted game! It&#39;s &quot;</span> <span class="op">++</span> <span class="fu">show</span> player <span class="op">++</span> <span class="st">&quot;&#39;s turn!&quot;</span></span>
<span id="cb31-34"><a href="#cb31-34" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb31-35"><a href="#cb31-35" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb31-36"><a href="#cb31-36" aria-hidden="true" tabindex="-1"></a><span class="co">-- Change colour of things for different players</span></span>
<span id="cb31-37"><a href="#cb31-37" aria-hidden="true" tabindex="-1"></a><span class="ot">playerColour ::</span> <span class="dt">PlayerComponent</span> <span class="ot">-&gt;</span> <span class="dt">RL.Color</span></span>
<span id="cb31-38"><a href="#cb31-38" aria-hidden="true" tabindex="-1"></a>playerColour <span class="dt">Red</span> <span class="ot">=</span> RL.red</span>
<span id="cb31-39"><a href="#cb31-39" aria-hidden="true" tabindex="-1"></a>playerColour <span class="dt">Blue</span> <span class="ot">=</span> RL.skyBlue</span>
<span id="cb31-40"><a href="#cb31-40" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb31-41"><a href="#cb31-41" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb31-42"><a href="#cb31-42" aria-hidden="true" tabindex="-1"></a><span class="co">-- Example of changing colour of ray to suit player</span></span>
<span id="cb31-43"><a href="#cb31-43" aria-hidden="true" tabindex="-1"></a><span class="ot">renderAimRay ::</span> <span class="dt">System</span> <span class="dt">World</span> ()</span>
<span id="cb31-44"><a href="#cb31-44" aria-hidden="true" tabindex="-1"></a>renderAimRay <span class="ot">=</span> <span class="kw">do</span></span>
<span id="cb31-45"><a href="#cb31-45" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb31-46"><a href="#cb31-46" aria-hidden="true" tabindex="-1"></a>  <span class="co">-- Notice that we aren&#39;t annotating the type for player; we infer it!</span></span>
<span id="cb31-47"><a href="#cb31-47" aria-hidden="true" tabindex="-1"></a>  (<span class="dt">Aim</span> ray _, player) <span class="ot">&lt;-</span> get global</span>
<span id="cb31-48"><a href="#cb31-48" aria-hidden="true" tabindex="-1"></a>  <span class="kw">let</span> lineStart <span class="ot">=</span> addVectors (RL.ray&#39;position ray) (<span class="dt">Vector3</span> <span class="dv">0</span> (<span class="op">-</span><span class="fl">0.05</span>) <span class="dv">0</span>)</span>
<span id="cb31-49"><a href="#cb31-49" aria-hidden="true" tabindex="-1"></a>      lineEnd <span class="ot">=</span> addVectors (RL.ray&#39;position ray) <span class="op">$</span></span>
<span id="cb31-50"><a href="#cb31-50" aria-hidden="true" tabindex="-1"></a>        multiplyVector (RL.ray&#39;direction ray) <span class="dv">10</span></span>
<span id="cb31-51"><a href="#cb31-51" aria-hidden="true" tabindex="-1"></a>  liftIO <span class="op">$</span> RL.drawLine3D lineStart lineEnd <span class="op">$</span> playerColour player</span></code></pre></div>
<p>Firstly, how cool is it that we can add features to the game this easily when using both Haskell and Apecs? It’s really during the iterations on your project where Haskell shines, and Apecs complements it perfectly. Secondly, notice that <strong>we didn’t annotate</strong> the type for <code>player</code> — again, thanks to Haskell, we can infer the types of components from their <em>usage</em>, so as long as you use your components for things you typically don’t have to be explicit with what the result of <code>get</code> needs to be. We’ve been mostly explicit up until now as we wanted to pattern match, but the <code>PlayerComponent</code> is very simple.</p>
<p>Here is where I set my first <strong>challenge</strong> — this blog post is becoming way too long, and so I’m going to make a change and show you how cool the result is, and you’ll have to make the changes yourself! Of course, the repository can be found at the end of the section with a link to the commit, so if you get stuck you can look up how I managed it. These changes are small and numerous; too boring to put write up. Have fun and see you in the next section!</p>
<div class="sourceCode" id="cb32"><pre class="sourceCode hs"><code class="sourceCode haskell"><span id="cb32-1"><a href="#cb32-1" aria-hidden="true" tabindex="-1"></a><span class="co">-- We are going to annotate each cell with the player who placed the cross</span></span>
<span id="cb32-2"><a href="#cb32-2" aria-hidden="true" tabindex="-1"></a><span class="kw">data</span> <span class="dt">Cell</span> <span class="ot">=</span> <span class="dt">Empty</span> <span class="op">|</span> <span class="dt">Filled</span> <span class="dt">PlayerComponent</span> <span class="kw">deriving</span> (<span class="dt">Show</span>, <span class="dt">Eq</span>)</span>
<span id="cb32-3"><a href="#cb32-3" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb32-4"><a href="#cb32-4" aria-hidden="true" tabindex="-1"></a><span class="co">-- CHALLENGE:</span></span>
<span id="cb32-5"><a href="#cb32-5" aria-hidden="true" tabindex="-1"></a><span class="co">-- 1. Change colour of crosses to be dependent on player</span></span>
<span id="cb32-6"><a href="#cb32-6" aria-hidden="true" tabindex="-1"></a><span class="co">-- 2. Change circular &#39;aim&#39; indicator to match player colour</span></span>
<span id="cb32-7"><a href="#cb32-7" aria-hidden="true" tabindex="-1"></a><span class="co">-- 3. Have fun!</span></span></code></pre></div>
<div class="caption-frame apply-shadow">
<img src="https://res.cloudinary.com/aas-sh/image/upload/v1668977503/blog/2022/11/20-11-2022_20_51_32_keas6a.png" title="It&#39;s heating up; it&#39;s *red* vs *blue*!" class="w-full object-cover" alt="It&#39;s heating up; it&#39;s *red* vs *blue*!" />
<div class="caption">
<p>It’s heating up; it’s <em>red</em> vs <em>blue</em>!</p>
<div class="caption-source">
<a href="https://github.com/Ashe/Notakto/tree/f6b41756cf4f2e166d087b0b9c4487da6f996dff" title="Notakto">Notakto</a>
</div>
</div>
</div>
<div class="gitrepo infobox fill-horizontal">
<div class="header">
<span class="lab la-github mr-3"></span>Repository - Notakto
</div>
<p>A link to the final section can be found <a href="https://github.com/Ashe/Notakto/tree/f6b41756cf4f2e166d087b0b9c4487da6f996dff">here</a>.</p>
</div>
</section>
<section id="bonus-manually-implementing-first-person-camera" class="article-section">
<h2><span>Bonus: Manually implementing first-person camera</span><a href="#bonus-manually-implementing-first-person-camera" class="anchor las la-link" title="bonus-manually-implementing-first-person-camera"></a></h2>
<p>Okay, so I’ve spied online that this post is actually being read and people are posting it around on Reddit (thankyou!). With that in mind, I thought I’d update the repository so that newer Haskellers can use the code without as many issues. One of the biggest things I found is that the camera was no longer moving on its own.</p>
<p>This was actually something that worried me when using Raylib at first, as it felt too ‘magical’ that their demo just baked in the first person camera movement. Fortunately, this isn’t hard to do, and so here’s the code:</p>
<div class="sourceCode" id="cb33"><pre class="sourceCode hs"><code class="sourceCode haskell"><span id="cb33-1"><a href="#cb33-1" aria-hidden="true" tabindex="-1"></a><span class="co">-- Had to update this system to return the window we create</span></span>
<span id="cb33-2"><a href="#cb33-2" aria-hidden="true" tabindex="-1"></a><span class="co">-- Also note that we disable the cursor straight away for free look</span></span>
<span id="cb33-3"><a href="#cb33-3" aria-hidden="true" tabindex="-1"></a><span class="ot">initialise ::</span> <span class="dt">System</span> <span class="dt">World</span> <span class="dt">RL.WindowResources</span></span>
<span id="cb33-4"><a href="#cb33-4" aria-hidden="true" tabindex="-1"></a>initialise <span class="ot">=</span> <span class="kw">do</span></span>
<span id="cb33-5"><a href="#cb33-5" aria-hidden="true" tabindex="-1"></a>  <span class="kw">let</span> camera <span class="ot">=</span> <span class="dt">RL.Camera3D</span> (<span class="dt">Vector3</span> <span class="dv">0</span> <span class="dv">1</span> <span class="dv">6</span>) (<span class="dt">Vector3</span> <span class="dv">0</span> <span class="dv">1</span> <span class="dv">0</span>) (<span class="dt">Vector3</span> <span class="dv">0</span> <span class="dv">1</span> <span class="dv">0</span>) <span class="dv">90</span></span>
<span id="cb33-6"><a href="#cb33-6" aria-hidden="true" tabindex="-1"></a>        <span class="dt">RL.CameraPerspective</span></span>
<span id="cb33-7"><a href="#cb33-7" aria-hidden="true" tabindex="-1"></a>  set global (<span class="dt">Camera</span> camera, <span class="dt">Red</span>)</span>
<span id="cb33-8"><a href="#cb33-8" aria-hidden="true" tabindex="-1"></a>  newGame</span>
<span id="cb33-9"><a href="#cb33-9" aria-hidden="true" tabindex="-1"></a>  liftIO <span class="op">$</span> <span class="kw">do</span></span>
<span id="cb33-10"><a href="#cb33-10" aria-hidden="true" tabindex="-1"></a>    window <span class="ot">&lt;-</span> RL.initWindow <span class="dv">1920</span> <span class="dv">1080</span> <span class="st">&quot;App&quot;</span></span>
<span id="cb33-11"><a href="#cb33-11" aria-hidden="true" tabindex="-1"></a>    RL.setTargetFPS <span class="dv">60</span></span>
<span id="cb33-12"><a href="#cb33-12" aria-hidden="true" tabindex="-1"></a>    RL.disableCursor</span>
<span id="cb33-13"><a href="#cb33-13" aria-hidden="true" tabindex="-1"></a>    <span class="fu">pure</span> window</span>
<span id="cb33-14"><a href="#cb33-14" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb33-15"><a href="#cb33-15" aria-hidden="true" tabindex="-1"></a><span class="co">-- Also changed terminate to close the specific window we created</span></span>
<span id="cb33-16"><a href="#cb33-16" aria-hidden="true" tabindex="-1"></a><span class="ot">terminate ::</span> <span class="dt">RL.WindowResources</span> <span class="ot">-&gt;</span> <span class="dt">System</span> <span class="dt">World</span> ()</span>
<span id="cb33-17"><a href="#cb33-17" aria-hidden="true" tabindex="-1"></a>terminate window <span class="ot">=</span> liftIO <span class="op">$</span> RL.closeWindow window</span>
<span id="cb33-18"><a href="#cb33-18" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb33-19"><a href="#cb33-19" aria-hidden="true" tabindex="-1"></a><span class="co">-- We now manually manipulate the camera&#39;s location and rotation</span></span>
<span id="cb33-20"><a href="#cb33-20" aria-hidden="true" tabindex="-1"></a><span class="ot">updateCamera ::</span> <span class="dt">System</span> <span class="dt">World</span> ()</span>
<span id="cb33-21"><a href="#cb33-21" aria-hidden="true" tabindex="-1"></a>updateCamera <span class="ot">=</span> <span class="kw">do</span></span>
<span id="cb33-22"><a href="#cb33-22" aria-hidden="true" tabindex="-1"></a>  <span class="dt">Camera</span> c <span class="ot">&lt;-</span> get global</span>
<span id="cb33-23"><a href="#cb33-23" aria-hidden="true" tabindex="-1"></a>  newCam <span class="ot">&lt;-</span> liftIO <span class="op">$</span> <span class="kw">do</span></span>
<span id="cb33-24"><a href="#cb33-24" aria-hidden="true" tabindex="-1"></a>    dt <span class="ot">&lt;-</span> RL.getFrameTime</span>
<span id="cb33-25"><a href="#cb33-25" aria-hidden="true" tabindex="-1"></a>    forward <span class="ot">&lt;-</span> checkKey <span class="dt">RL.KeyW</span> <span class="dt">RL.KeyUp</span></span>
<span id="cb33-26"><a href="#cb33-26" aria-hidden="true" tabindex="-1"></a>    left <span class="ot">&lt;-</span> checkKey <span class="dt">RL.KeyA</span> <span class="dt">RL.KeyLeft</span></span>
<span id="cb33-27"><a href="#cb33-27" aria-hidden="true" tabindex="-1"></a>    backward <span class="ot">&lt;-</span> checkKey <span class="dt">RL.KeyS</span> <span class="dt">RL.KeyDown</span></span>
<span id="cb33-28"><a href="#cb33-28" aria-hidden="true" tabindex="-1"></a>    right <span class="ot">&lt;-</span> checkKey <span class="dt">RL.KeyD</span> <span class="dt">RL.KeyRight</span></span>
<span id="cb33-29"><a href="#cb33-29" aria-hidden="true" tabindex="-1"></a>    <span class="dt">Vector2</span> i j <span class="ot">&lt;-</span> RL.getMouseDelta</span>
<span id="cb33-30"><a href="#cb33-30" aria-hidden="true" tabindex="-1"></a>    <span class="kw">let</span> speed <span class="ot">=</span> <span class="fl">5.0</span></span>
<span id="cb33-31"><a href="#cb33-31" aria-hidden="true" tabindex="-1"></a>        turnspeed <span class="ot">=</span> <span class="dv">1</span></span>
<span id="cb33-32"><a href="#cb33-32" aria-hidden="true" tabindex="-1"></a>        <span class="dt">Vector3</span> x _ z <span class="ot">=</span></span>
<span id="cb33-33"><a href="#cb33-33" aria-hidden="true" tabindex="-1"></a>          (RL.getCameraForward c <span class="op">|*</span> (forward <span class="op">-</span> backward)) <span class="op">|+|</span></span>
<span id="cb33-34"><a href="#cb33-34" aria-hidden="true" tabindex="-1"></a>          (RL.getCameraRight c <span class="op">|*</span> (right <span class="op">-</span> left))</span>
<span id="cb33-35"><a href="#cb33-35" aria-hidden="true" tabindex="-1"></a>        c&#39; <span class="ot">=</span> RL.cameraMove c <span class="op">$</span> safeNormalize (<span class="dt">Vector3</span> x <span class="dv">0</span> z) <span class="op">|*</span> (speed <span class="op">*</span> dt)</span>
<span id="cb33-36"><a href="#cb33-36" aria-hidden="true" tabindex="-1"></a>        c&#39;&#39; <span class="ot">=</span> RL.cameraYaw c&#39; (<span class="op">-</span>i <span class="op">*</span> turnspeed <span class="op">*</span> dt) <span class="dt">False</span></span>
<span id="cb33-37"><a href="#cb33-37" aria-hidden="true" tabindex="-1"></a>    <span class="fu">pure</span> <span class="op">$</span> RL.cameraPitch c&#39;&#39; (<span class="op">-</span>j <span class="op">*</span> turnspeed <span class="op">*</span> dt) <span class="dt">False</span> <span class="dt">False</span> <span class="dt">False</span></span>
<span id="cb33-38"><a href="#cb33-38" aria-hidden="true" tabindex="-1"></a>  set global <span class="op">$</span> <span class="dt">Camera</span> newCam</span>
<span id="cb33-39"><a href="#cb33-39" aria-hidden="true" tabindex="-1"></a>  <span class="kw">where</span> checkKey a b <span class="ot">=</span></span>
<span id="cb33-40"><a href="#cb33-40" aria-hidden="true" tabindex="-1"></a>          liftA2 (\x y <span class="ot">-&gt;</span> <span class="kw">if</span> x <span class="op">||</span> y <span class="kw">then</span> <span class="dv">1</span> <span class="kw">else</span> <span class="dv">0</span>) (RL.isKeyDown a) (RL.isKeyDown b)</span>
<span id="cb33-41"><a href="#cb33-41" aria-hidden="true" tabindex="-1"></a>        safeNormalize v</span>
<span id="cb33-42"><a href="#cb33-42" aria-hidden="true" tabindex="-1"></a>          <span class="op">|</span> magnitude v <span class="op">==</span> <span class="dv">0</span> <span class="ot">=</span> v</span>
<span id="cb33-43"><a href="#cb33-43" aria-hidden="true" tabindex="-1"></a>          <span class="op">|</span> <span class="fu">otherwise</span> <span class="ot">=</span> vectorNormalize v</span></code></pre></div>
<p>Some things to note here is that a lot of our vector math functions are <a href="https://hackage.haskell.org/package/h-raylib-4.6.0.6/docs/Raylib-Util-Math.html#g:3">built into the h-raylib bindings</a> now, so <code>|+|</code> lets you add two vectors together, <code>|*|</code> lets you multiply two vectors together, <code>|*</code> lets you multiply a vector with a normal scalar value and so on.</p>
<p>So with that in mind, we now retrieve the state of several keyboard inputs one by one and determine which direction we want to move in by combining the player’s net input as well as the camera’s forward and right directions. We then normalize that (I had to make a <code>safeNormalize</code> function for cases when magnituded is zero, this will probably get fixed soon) and multiply it by some speed value and delta time to make it frame independent. Looking around is similar; Raylib already gives us the mouse delta so we can put the right into the look direction logic.</p>
<p>Make sure to check out <a href="https://github.com/Ashe/Notakto/commit/dc35e711dbc48703ff827dedbd2969c54e826d48">the diff</a> for all the changes I made in this update. I hope this helps!</p>
</section>
</section>
<section id="wrapping-up" class="article-section">
<h1><span>Wrapping up</span><a href="#wrapping-up" class="anchor las la-link" title="wrapping-up"></a></h1>
<p><strong>Congratulations!</strong> I’m hoping that the content of this post, although long, has been useful as a gateway into the world of Haskell game development. I really enjoyed making this post and I’m hoping my readers enjoyed this new format even if it is a little wordy.</p>
<p>There are no more sections for this blog post, although honestly I wanted to go wild and do things like:</p>
<ul>
<li><p><strong>Projectiles:</strong> When you click, you shoot a cube and you have to land it in a cell for it to mark. Would be interesting to make it so that you can only shoot if no projectile currently exists, and making the actions that happen when you click the mouse delayed until the projectile lands. Good luck finding that shot when it goes out of bounds!</p></li>
<li><p><strong>Moving boards:</strong> We have a <code>PositionComponent</code> but the data never really changes once created. Wouldn’t it be fun to make the boards fly around?</p></li>
<li><p><strong>Rotated boards:</strong> Right now we assume all boards face the same way. Adding a rotation would be fun but a little bit of work since you may need to write your own vector math functions unless you use another library (I wanted the dependency count to be low for this post).</p></li>
<li><p><strong>Forced distance:</strong> I wanted to make it so that you could only take a turn if you were stood in an area, so that you had to aim. Would be cool making a little environment with player colouring!</p></li>
<li><p><strong>AI:</strong> Here’s an easy peasy one — make it so that when you make your move, you can get an AI to play as the other person! Start off by just randomising the entity and cell index, and once you you’ve got a very basic AI you can move up to implementing the <a href="https://en.wikipedia.org/wiki/Negamax">Negamax algorithm</a>!</p></li>
</ul>
<p>These things all sound fun, but I believe that the important thing is to teach the basics of Apecs and Raylib so that we get more projects popping up in the Haskell gamedev space. I’ve seen a lot of cool projects like <a href="https://hackage.haskell.org/package/keid-core">Keid</a>, but admittedly I just love Apecs too much, and now I can love Raylib also (even if I haven’t explored its limits too much).</p>
<p><strong><em>Big thankyous</em></strong> to:</p>
<ul>
<li><a href="https://jonascarpay.com/">Jonas Carpay</a>, author of <a href="https://hackage.haskell.org/package/apecs">Apecs</a>,</li>
<li><a href="https://github.com/Anut-py">Anand Swaroop (Anut-py)</a> for creating the <a href="https://hackage.haskell.org/package/h-raylib">h-raylib bindings</a>,</li>
<li>the authors of <a href="https://www.raylib.com/">Raylib</a>,</li>
<li>and finally, the <a href="https://nixos.org/community/index.html">Nix community</a> for helping me with all my problems whenever I go crying to them about something not working. Really, thanks guys!</li>
</ul>
<p>If anyone wants anything from this blog revised, has feedback, or just wants to talk, you can get in touch via <a href="mailto:contact@aas.sh">contact@aas.sh</a>. Looking forward to hearing from you!</p>
<p>And with that, I’m signing off. Thank you for reading!</p>
</section>]]></description>
    <pubDate>Sun, 20 Nov 2022 00:00:00 UT</pubDate>
    <guid>https://aas.sh/blog/notakto-a-haskell-game-with-apecs-and-raylib/index.html</guid>
    <dc:creator>Ashley Rose</dc:creator>
</item>
<item>
    <title>Laplace's rule of succession</title>
    <link>https://aas.sh/blog/laplaces-rule-of-succession/index.html</link>
    <description><![CDATA[<h1 id="the-sunrise-problem">The sunrise problem</h1>
<h2 id="a-scientific-certainty">A scientific certainty</h2>
<p>In 1840, <a href="https://en.wikipedia.org/wiki/Pierre-Simon_Laplace">Pierre-Simon Laplace</a><span class="citation" data-cites="laplace1840essai">[@laplace1840essai]</span> posed the following question:</p>
<blockquote>
<p>What is the probability that the sun will rise tomorrow?</p>
</blockquote>
<p>This is the <em><a href="https://en.wikipedia.org/wiki/Sunrise_problem">Sunrise Problem</a></em>. It’s a bit of a peculiar one, and at first glance one might think that either the question is trivial, stupid, or both, but let’s dive a little deeper into what it is the question is asking.</p>
<p>Through observation, we can say with confidence that there hasn’t ever been a day where the sun hasn’t risen. It is a scientific certainty that it’ll rise and this very fact is taken as the truth by most if not all of the population — just look up at the sky and one can indeed see the sun rising each morning. After so much time, there is not one doubt that the sun does indeed rise every day.</p>
<p>But… What if it <em>didn’t</em>?</p>
<h2 id="the-real-question">The real question</h2>
<p>The reason the sunrise problem is even worth considering can be discovered by simply asking <em>what if it didn’t?</em> — what is it we’re really asking? If the chance of the sun rising is 100%, then what is the purpose of contemplating the scenario where it didn’t?</p>
<p>What we’re actually questioning here is not whether the sun rises, but in fact whether the <em>probability</em> of the sun rising is actually what we expect — this is a question of the probability of another probability!</p>
<h2 id="laplaces-answer-to-the-sunrise-problem">Laplace’s answer to the sunrise problem</h2>
<div class="note" data-header="Simplification ahead!">
<p>I’m going to be the first to say I learned about this stuff online — while I did further mathematics in sixth form, that is not where I learned about this. Someone with a better education could write this part a lot better, with a full history of how it was deduced and the impact it has had. This post is mostly <em>my</em> experience in understanding and using the theorem.</p>
</div>
<p>So, what was Laplace’s answer, and why was it interesting? Let’s go back to the sunrise problem: if human life had existed for 99 days exactly and the sun failed to rise on day 100, then one could argue that the probability is 99/100, as in, it happened 99 days in 100. However, on day 99, the observed probability would have been 99/99, or 1, which isn’t too useful in the context of the problem. If only there was a way to think in a similar way that’s as simple, while also giving us an answer of worth.</p>
<p>Laplace’s rule states that, for any event that has occurred multiple times until now, the probability of it happening again is equal one plus to this number divided by the number of times plus two. Obviously, words aren’t the best way of showing this, so here’s some fancy math:</p>
<p><span class="math display">$$
P(X_n+1=1|X_1+...+X_n=s)=\frac{s + 1}{n + 2}
$$</span></p>
<p>Maybe this doesn’t help either.. The part to focus on is the last part on the right side of the equation — take the number of times where the sun has risen and add 1, and divide that number by the number of total days and add 2. What this is essentially doing is ‘simulating’ what the probability would be <em>if</em> there was one more day where the sun had risen, and another where it didn’t. In our example, this would be equivalent to:</p>
<p><span class="math display">$$
P(\text{Sun rises on 100th day})=\frac{99 + 1}{99 + 2}=\frac{100}{101}
$$</span></p>
<p>While simple, and indeed slightly weird, this does provide us a tangible value which we can use, which is a whole lot better than ‘always.. I think’.</p>
<p>I can understand why one would think that this piece of knowledge isn’t very useful, however it’s important to remember what Laplace’s rule is telling us: it’s giving us a probability of a probability in a fairly quick and easy way: all you need to do is add 1 to the numerator and 2 to the denominator!</p>
<p>Finally, remember that in maths there can be multiple ways of doing things; you can get the average of a bunch of values via mean, median <em>or</em> mode, as a quick example. So while this does give us <em>something</em>, you should think of it as <em>an</em> answer rather than <em>the</em> answer.</p>
<h1 id="my-experience-with-the-rule-of-succession">My experience with the rule of succession</h1>
<p>So I learned about this theorem from <a href="https://www.youtube.com/watch?v=8idr1WZ1A7Q&amp;">Grant’s video on Binomial Distributions</a><span class="citation" data-cites="sanderson2020binomial">[@sanderson2020binomial]</span>. While the main topic of this not Laplace’s theorem, it did use it as a quick introduction to the video those 30 seconds truly struck me as something useful. Here’s the video if you’re curious:</p>
<div class="caption w-full" data-caption="Grant Sanderson talks about Binomial Distributions, mentioning Laplace&#39;s rule of succession." data-source="3Blue1Brown, YouTube" data-sourceUrl="https://www.youtube.com/watch?v=8idr1WZ1A7Q&amp;feature=emb_title">
<iframe src="https://www.youtube.com/embed/8idr1WZ1A7Q" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen>
</iframe>
</div>
<p>Ever since I saw that video, I’ve had the rule of succession flash into my mind whenever I see a situation I might be able to apply it to. In the next section hopefully I can show you how!</p>
<h2 id="reviews">Reviews</h2>
<h3 id="the-question">The question</h3>
<p>Admittedly I stole this idea from <a href="https://www.youtube.com/watch?v=8idr1WZ1A7Q&amp;?t=98">Grant’s video</a>, but it deserves its own section nonetheless. Unfortunately, fake reviews have recently begun to run rampant and so the effectiveness of applying Laplace’s rule of succession is diminished in these scenarios.</p>
<p>So, let’s imagine that you’re wanting to purchase something and you can see two similarly rated products. The question we’re trying to answer is the following:</p>
<blockquote>
<p>Given that numerous people have had positive experiences, what is the probability that my own experience is also going to be positive?</p>
</blockquote>
<p>This looks nothing like the rising sun problem! Where in this problem is there an element of ‘probabilities of probabilities’? Let’s start making some assumptions:</p>
<ol type="1">
<li><p>When we say positive experience, we mean an experience that we could comfortably rate 5/5 stars in the same way that others have done previously.</p></li>
<li><p>Each review is a binary representation of someone’s experience; they either had a 5 star experience, or they didn’t.</p></li>
</ol>
<p>So with that, we can start viewing this problem in the same way as the sunrise problem, except the probability of someone giving a 5 star review is not 100%.</p>
<h3 id="the-math">The math</h3>
<p>Let’s say that 87% of 957 people gave a product 5 stars, meaning that 832/957 people had a 5 star experience. What is the probability that the next experience (yours) is also going to be positive? Let’s do the math:</p>
<p><span class="math display">$$
P(\text{5 star experience})=\frac{832 + 1}{957 + 2}=\frac{833}{959}=0.86861
$$</span></p>
<p>We now have a result! <code>0.86861</code>! You could do the same maths on another product and then compare these values to see which one is more likely to satisfy you. Now like I said before, this is <em>an</em> answer, not <em>the</em> answer. There are many other ways you could compare two products, but if you can’t be bothered going full math-mode, this is a nice trick.</p>
<h3 id="why-is-this-value-useful">Why is this value useful?</h3>
<p>Now the question you might have is, ‘how is this value any better than just taking the raw 87% value?’ The answer lies in the <em>amount</em> of reviews. We’ve always been skeptical of products with 100% 5 star reviews when only 2 people have reviewed it, but why? I believe it’s because deep down we simply don’t trust these two people to have experienced the product enough to represent our own experience, and so we are filled with distrust.</p>
<p>Laplace’s rule of succession handles this gracefully; by adding two extra reviews, one positive and one negative, we can somewhat ‘balance’ the review scores with the amount of reviews. Let’s see an example:</p>
<p><span class="math display">$$
P(\text{5 star experience with } A) = \frac{2 + 1}{2 + 2}=\frac{3}{4}=0.75
$$</span>
<span class="math display">$$
P(\text{5 star experience with } B) = \frac{350 + 1}{400 + 2}=\frac{351}{402}=0.87313
$$</span></p>
<p>In this completely arbitrary example, Laplace’s rule of succession tells us to trust product <span class="math inline"><em>B</em></span> more than product <span class="math inline"><em>A</em></span> despite <span class="math inline"><em>B</em></span> only having an 87.5% review score and <span class="math inline"><em>A</em></span> having a 100% review score; the low amount of reviews on product <span class="math inline"><em>A</em></span> meant that the adjustments made by the succession rule impact the score more significantly than they did in product <span class="math inline"><em>B</em></span>!</p>
<h2 id="challenge-nudger">Challenge nudger</h2>
<p>Another time I’ve used Laplace’s rule of succession was while I was at work! I was working on a piece of UI that ‘nudged’ the player towards content in the game. Players had vast amounts of challenges going on simultaneously, such as ‘kill 50 players’, ‘win 4 matches’ and ‘walk 1000km’. The problem: determining which challenge has the highest probability of being relevant to the player.</p>
<p>After the review chapter, I’m sure you can figure out why I chose to apply the rule here; how do we compare the player’s progress on these challenges when they have completely different requirements in terms of difficulty and time to complete?</p>
<blockquote>
<p>Quiz time! Which challenge would you consider to be closest to completion?</p>
<ol type="1">
<li><p><strong>Win 5 matches —</strong> Player has won 4.</p></li>
<li><p><strong>Kill 50 players —</strong> Player has killed 40 players.</p></li>
<li><p><strong>Destroy 100 barrels —</strong> Player has destroyed 80.</p></li>
<li><p><strong>Walk 1000km —</strong> Player has walked 800km.</p></li>
</ol>
</blockquote>
<p>Regardless of which one you <em>think</em> is more relevant to players, it may be difficult to pick between them especially when their progress percentages are all 80%! However, once again, Laplace’s rule gives us <em>an</em> answer to this question (not <em>the</em> answer). Applying Laplace’s rule here not only allows us to consistently rank challenges by a common metric, but it also allows us to stop caring about details — we <em>know</em> there is not one right answer to this problem, so let’s just lean on statistics and move on!</p>
<h1 id="wrapping-things-up">Wrapping things up</h1>
<p>I hope you enjoyed reading this post; this is the first time I’ve written about something other than programming specifically, but I personally have found if very handy for more things than I’ve listed. I hope that after giving it some thought, you too might find the answer’s that Laplace provides useful!</p>
<p>Make it a good one!</p>]]></description>
    <pubDate>Wed, 20 Jul 2022 00:00:00 UT</pubDate>
    <guid>https://aas.sh/blog/laplaces-rule-of-succession/index.html</guid>
    <dc:creator>Ashley Rose</dc:creator>
</item>
<item>
    <title>Laplace's rule of succession</title>
    <link>https://aas.sh/blog/laplaces-rule-of-succession/index.html</link>
    <description><![CDATA[<section id="the-sunrise-problem" class="article-section">
<h1>
<span>The sunrise problem</span><a href="#the-sunrise-problem" class="anchor las la-link" title="the-sunrise-problem"></a>
</h1>
<section id="a-scientific-certainty" class="article-section">
<h2>
<span>A scientific certainty</span><a href="#a-scientific-certainty" class="anchor las la-link" title="a-scientific-certainty"></a>
</h2>
<p>
In 1840, <a href="https://en.wikipedia.org/wiki/Pierre-Simon_Laplace">Pierre-Simon Laplace</a><span class="citation" data-cites="laplace1840essai"><span class="citation" data-cites="laplace1840essai">[1]</span></span> posed the following question:
</p>
<blockquote>
<p>
What is the probability that the sun will rise tomorrow?
</p>
</blockquote>
<p>
This is the <em><a href="https://en.wikipedia.org/wiki/Sunrise_problem">Sunrise Problem</a></em>. It’s a bit of a peculiar one, and at first glance one might think that either the question is trivial, stupid, or both, but let’s dive a little deeper into what it is the question is asking.
</p>
<p>
Through observation, we can say with confidence that there hasn’t ever been a day where the sun hasn’t risen. It is a scientific certainty that it’ll rise and this very fact is taken as the truth by most if not all of the population — just look up at the sky and one can indeed see the sun rising each morning. After so much time, there is not one doubt that the sun does indeed rise every day.
</p>
<p>
But… What if it <em>didn’t</em>?
</p>
</section>
<section id="the-real-question" class="article-section">
<h2>
<span>The real question</span><a href="#the-real-question" class="anchor las la-link" title="the-real-question"></a>
</h2>
<p>
The reason the sunrise problem is even worth considering can be discovered by simply asking <em>what if it didn’t?</em> — what is it we’re really asking? If the chance of the sun rising is 100%, then what is the purpose of contemplating the scenario where it didn’t?
</p>
<p>
What we’re actually questioning here is not whether the sun rises, but in fact whether the <em>probability</em> of the sun rising is actually what we expect — this is a question of the probability of another probability!
</p>
</section>
<section id="laplaces-answer-to-the-sunrise-problem" class="article-section">
<h2>
<span>Laplace’s answer to the sunrise problem</span><a href="#laplaces-answer-to-the-sunrise-problem" class="anchor las la-link" title="laplaces-answer-to-the-sunrise-problem"></a>
</h2>
<div class="note infobox fill-horizontal">
<div class="header">
<p><span class="las la-info-circle mr-3"></span>Note - Simplification ahead!</p>
</div>
<p>
I’m going to be the first to say I learned about this stuff online — while I did further mathematics in sixth form, that is not where I learned about this. Someone with a better education could write this part a lot better, with a full history of how it was deduced and the impact it has had. This post is mostly <em>my</em> experience in understanding and using the theorem.
</p>
</div>
<p>
So, what was Laplace’s answer, and why was it interesting? Let’s go back to the sunrise problem: if human life had existed for 99 days exactly and the sun failed to rise on day 100, then one could argue that the probability is 99/100, as in, it happened 99 days in 100. However, on day 99, the observed probability would have been 99/99, or 1, which isn’t too useful in the context of the problem. If only there was a way to think in a similar way that’s as simple, while also giving us an answer of worth.
</p>
<p>
Laplace’s rule states that, for any event that has occurred multiple times until now, the probability of it happening again is equal one plus to this number divided by the number of times plus two. Obviously, words aren’t the best way of showing this, so here’s some fancy math:
</p>
<p>
<span class="math display"><span class="math display">$$
P(X_n+1=1|X_1+...+X_n=s)=\frac{s + 1}{n + 2}
$$</span></span>
</p>
<p>
Maybe this doesn’t help either.. The part to focus on is the last part on the right side of the equation — take the number of times where the sun has risen and add 1, and divide that number by the number of total days and add 2. What this is essentially doing is ‘simulating’ what the probability would be <em>if</em> there was one more day where the sun had risen, and another where it didn’t. In our example, this would be equivalent to:
</p>
<p>
<span class="math display"><span class="math display">$$
P(\text{Sun rises on 100th day})=\frac{99 + 1}{99 + 2}=\frac{100}{101}
$$</span></span>
</p>
<p>
While simple, and indeed slightly weird, this does provide us a tangible value which we can use, which is a whole lot better than ‘always.. I think’.
</p>
<p>
I can understand why one would think that this piece of knowledge isn’t very useful, however it’s important to remember what Laplace’s rule is telling us: it’s giving us a probability of a probability in a fairly quick and easy way: all you need to do is add 1 to the numerator and 2 to the denominator!
</p>
<p>
Finally, remember that in maths there can be multiple ways of doing things; you can get the average of a bunch of values via mean, median <em>or</em> mode, as a quick example. So while this does give us <em>something</em>, you should think of it as <em>an</em> answer rather than <em>the</em> answer.
</p>
</section>
</section>
<section id="my-experience-with-the-rule-of-succession" class="article-section">
<h1>
<span>My experience with the rule of succession</span><a href="#my-experience-with-the-rule-of-succession" class="anchor las la-link" title="my-experience-with-the-rule-of-succession"></a>
</h1>
<p>
So I learned about this theorem from <a href="https://www.youtube.com/watch?v=8idr1WZ1A7Q&amp;">Grant’s video on Binomial Distributions</a><span class="citation" data-cites="sanderson2020binomial"><span class="citation" data-cites="sanderson2020binomial">[2]</span></span>. While the main topic of this not Laplace’s theorem, it did use it as a quick introduction to the video those 30 seconds truly struck me as something useful. Here’s the video if you’re curious:
</p>
<div class="w-full caption-frame apply-shadow">
<iframe src="https://www.youtube.com/embed/8idr1WZ1A7Q" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen>
</iframe>
<div class="caption">
<p>
Grant Sanderson talks about Binomial Distributions, mentioning Laplace’s rule of succession.
</p>
<div class="caption-source">
<p><a href="https://www.youtube.com/watch?v=8idr1WZ1A7Q&amp;feature=emb_title" title="3Blue1Brown, YouTube">3Blue1Brown, YouTube</a></p>
</div>
</div>
</div>
<p>
Ever since I saw that video, I’ve had the rule of succession flash into my mind whenever I see a situation I might be able to apply it to. In the next section hopefully I can show you how!
</p>
<section id="reviews" class="article-section">
<h2>
<span>Reviews</span><a href="#reviews" class="anchor las la-link" title="reviews"></a>
</h2>
<section id="the-question" class="article-section">
<h3>
<span>The question</span><a href="#the-question" class="anchor las la-link" title="the-question"></a>
</h3>
<p>
Admittedly I stole this idea from <a href="https://www.youtube.com/watch?v=8idr1WZ1A7Q&amp;?t=98">Grant’s video</a>, but it deserves its own section nonetheless. Unfortunately, fake reviews have recently begun to run rampant and so the effectiveness of applying Laplace’s rule of succession is diminished in these scenarios.
</p>
<p>
So, let’s imagine that you’re wanting to purchase something and you can see two similarly rated products. The question we’re trying to answer is the following:
</p>
<blockquote>
<p>
Given that numerous people have had positive experiences, what is the probability that my own experience is also going to be positive?
</p>
</blockquote>
<p>
This looks nothing like the rising sun problem! Where in this problem is there an element of ‘probabilities of probabilities’? Let’s start making some assumptions:
</p>
<ol type="1">
<li>
<p>
When we say positive experience, we mean an experience that we could comfortably rate 5/5 stars in the same way that others have done previously.
</p>
</li>
<li>
<p>
Each review is a binary representation of someone’s experience; they either had a 5 star experience, or they didn’t.
</p>
</li>
</ol>
<p>
So with that, we can start viewing this problem in the same way as the sunrise problem, except the probability of someone giving a 5 star review is not 100%.
</p>
</section>
<section id="the-math" class="article-section">
<h3>
<span>The math</span><a href="#the-math" class="anchor las la-link" title="the-math"></a>
</h3>
<p>
Let’s say that 87% of 957 people gave a product 5 stars, meaning that 832/957 people had a 5 star experience. What is the probability that the next experience (yours) is also going to be positive? Let’s do the math:
</p>
<p>
<span class="math display"><span class="math display">$$
P(\text{5 star experience})=\frac{832 + 1}{957 + 2}=\frac{833}{959}=0.86861
$$</span></span>
</p>
<p>
We now have a result! <code>0.86861</code>! You could do the same maths on another product and then compare these values to see which one is more likely to satisfy you. Now like I said before, this is <em>an</em> answer, not <em>the</em> answer. There are many other ways you could compare two products, but if you can’t be bothered going full math-mode, this is a nice trick.
</p>
</section>
<section id="why-is-this-value-useful" class="article-section">
<h3>
<span>Why is this value useful?</span><a href="#why-is-this-value-useful" class="anchor las la-link" title="why-is-this-value-useful"></a>
</h3>
<p>
Now the question you might have is, ‘how is this value any better than just taking the raw 87% value?’ The answer lies in the <em>amount</em> of reviews. We’ve always been skeptical of products with 100% 5 star reviews when only 2 people have reviewed it, but why? I believe it’s because deep down we simply don’t trust these two people to have experienced the product enough to represent our own experience, and so we are filled with distrust.
</p>
<p>
Laplace’s rule of succession handles this gracefully; by adding two extra reviews, one positive and one negative, we can somewhat ‘balance’ the review scores with the amount of reviews. Let’s see an example:
</p>
<p>
<span class="math display"><span class="math display">$$
P(\text{5 star experience with } A) = \frac{2 + 1}{2 + 2}=\frac{3}{4}=0.75
$$</span></span>
<span class="math display"><span class="math display">$$
P(\text{5 star experience with } B) = \frac{350 + 1}{400 + 2}=\frac{351}{402}=0.87313
$$</span></span>
</p>
<p>
In this completely arbitrary example, Laplace’s rule of succession tells us to trust product <span class="math inline"><em>B</em></span> more than product <span class="math inline"><em>A</em></span> despite <span class="math inline"><em>B</em></span> only having an 87.5% review score and <span class="math inline"><em>A</em></span> having a 100% review score; the low amount of reviews on product <span class="math inline"><em>A</em></span> meant that the adjustments made by the succession rule impact the score more significantly than they did in product <span class="math inline"><em>B</em></span>!
</p>
</section>
</section>
<section id="challenge-nudger" class="article-section">
<h2>
<span>Challenge nudger</span><a href="#challenge-nudger" class="anchor las la-link" title="challenge-nudger"></a>
</h2>
<p>
Another time I’ve used Laplace’s rule of succession was while I was at work! I was working on a piece of UI that ‘nudged’ the player towards content in the game. Players had vast amounts of challenges going on simultaneously, such as ‘kill 50 players’, ‘win 4 matches’ and ‘walk 1000km’. The problem: determining which challenge has the highest probability of being relevant to the player.
</p>
<p>
After the review chapter, I’m sure you can figure out why I chose to apply the rule here; how do we compare the player’s progress on these challenges when they have completely different requirements in terms of difficulty and time to complete?
</p>
<blockquote>
<p>
Quiz time! Which challenge would you consider to be closest to completion?
</p>
<ol type="1">
<li>
<p>
<strong>Win 5 matches —</strong> Player has won 4.
</p>
</li>
<li>
<p>
<strong>Kill 50 players —</strong> Player has killed 40 players.
</p>
</li>
<li>
<p>
<strong>Destroy 100 barrels —</strong> Player has destroyed 80.
</p>
</li>
<li>
<p>
<strong>Walk 1000km —</strong> Player has walked 800km.
</p>
</li>
</ol>
</blockquote>
<p>
Regardless of which one you <em>think</em> is more relevant to players, it may be difficult to pick between them especially when their progress percentages are all 80%! However, once again, Laplace’s rule gives us <em>an</em> answer to this question (not <em>the</em> answer). Applying Laplace’s rule here not only allows us to consistently rank challenges by a common metric, but it also allows us to stop caring about details — we <em>know</em> there is not one right answer to this problem, so let’s just lean on statistics and move on!
</p>
</section>
</section>
<section id="wrapping-things-up" class="article-section">
<h1>
<span>Wrapping things up</span><a href="#wrapping-things-up" class="anchor las la-link" title="wrapping-things-up"></a>
</h1>
<p>
I hope you enjoyed reading this post; this is the first time I’ve written about something other than programming specifically, but I personally have found if very handy for more things than I’ve listed. I hope that after giving it some thought, you too might find the answer’s that Laplace provides useful!
</p>
<p>
Make it a good one!
</p>
</section>
<section id="references" class="article-section">
<h1><span>References</span><a href="#references" class="anchor las la-link" title="references"></a></h1>
<div class="references csl-bib-body infobox fill-horizontal" role="doc-bibliography">
<div class="header">
<span class="las la-pencil-alt mr-3"></span>References
</div>
<div id="ref-laplace1840essai" class="csl-entry" role="doc-biblioentry">
<div class="csl-left-margin">[1] </div><div class="csl-right-inline">P. S. marquis de Laplace <em>et al.</em>, <em>Essai philosophique sur les probabilit<span>é</span>s</em>. Bachelier, 1840.</div>
</div>
<div id="ref-sanderson2020binomial" class="csl-entry" role="doc-biblioentry">
<div class="csl-left-margin">[2] </div><div class="csl-right-inline">G. Sanderson, <span>“Binomial distributions | probabilities of probabilities, part 1,”</span> 2020. <a href="https://youtu.be/8idr1WZ1A7Q?t=98">https://youtu.be/8idr1WZ1A7Q?t=98</a></div>
</div>
</div>
</section>]]></description>
    <pubDate>Wed, 20 Jul 2022 00:00:00 UT</pubDate>
    <guid>https://aas.sh/blog/laplaces-rule-of-succession/index.html</guid>
    <dc:creator>Ashley Rose</dc:creator>
</item>
<item>
    <title>Website redesign with Bulma CSS</title>
    <link>https://aas.sh/blog/website-redesign-with-bulma/index.html</link>
    <description><![CDATA[<div class="gitrepo" data-header="aas.sh">
<p>GitHub repository for this website can be found <a href="https://github.com/Ashe/ashe.github.io">here</a>.</p>
</div>
<h1 id="introduction">Introduction</h1>
<p>As stated in my <a href="/blog/new-year-new-website/">previous website post</a>, I have a weird habit of redesigning my website every so often. This is always fueled by nitpicks and ambitions, however this time feels different. The last change was the move to <a href="https://nixos.org">Nix</a> and <a href="https://jaspervdj.be/hakyll/">Hakyll</a>, and this time I have kept those foundations and focused solely on the appearance.</p>
<p>The result, and I hope you’ll agree, is a cleaner, smoother website with an appearance I have more control over. In my mission to inspire and share, I want to make things as frictionless as possible!</p>
<h1 id="changes">Changes</h1>
<h2 id="there-are-now-slides">There are now slides</h2>
<p>As you may have noticed, there is now a slideshow embedded into the blog post. How cool is that?!</p>
<p>Slides are located as a replacement for the gallery at the top of the page for any blogs with slides enabled. I used to have a section of my website dedicated to slides, but I could never decide if a given post should be in slide format or in blog format. Sometimes I want to go into detail on a specific part of a presentation, whereas other times I want to just do a slideshow. Now I don’t need to choose!</p>
<p>If you haven’t seen it yet, check the top of this page!</p>
<h2 id="we-now-use-bulma">We now use Bulma!</h2>
<p><a href="https://bulma.io">Bulma</a> is a CSS framework. I was previously using <a href="https://tailwindcss.com">Tailwind</a>, but unfortunately I leaned on it too much and became controlled by it since I found it very difficult to change the appearance of parts of my site to my liking.</p>
<p><a href="https://bulma.io">Bulma</a> is simpler and is purely CSS. My strategy was to use Bulma for the foundations of the website, and then hand-crafting elements I had a particular interest in. It worked out really well and I feel really comfortable in the fact that I’ve had a hand in every aspect of the website now.</p>
<p>Another advantage of changing framework is that it gave me an opportunity to simplify my <a href="https://nixos.org">Nix</a> code, speeding up iteration and simplifying dependencies. Bulma, along with all of my personal styling, is compiled into a single <code>main.css</code> file via <a href="https://sass-lang.com/">Sass</a>. I’m hoping that this strategy also alleviates pressure on your browser since it’s all in a single file, but I don’t know enough about web technologies to provide any evidence.</p>
<h2 id="refreshed-appearance-of-tags">Refreshed appearance of tags</h2>
<p>The old tag appearance was quite ugly to be honest. This was the <a href="https://hackage.haskell.org/package/hakyll-4.15.1.1/docs/Hakyll-Web-Tags.html#v:renderTagCloud">default implementation of Hakyll</a>. I decided to reimplement this function and use the actual number of uses per tag as part of the design. The result is a nice new tag list sorted by popularity!</p>
<div class="figure" data-image="https://res.cloudinary.com/aas-sh/image/upload/v1657296459/blog/2022/07/08-07-2022_17_07_25_tpdkvt.png" data-caption="New appearance of tag cloud." data-source="aas.sh" data-sourceUrl="https://aas.sh">

</div>
<h2 id="code-cleanup">Code cleanup</h2>
<p>One of the barriers I had to writing more content was how long Hakyll took to compile my website. As per usual, this was user error. After being spoilt by frameworks like <a href="https://gohugo.io/">Hugo</a> in the past, I chalked all of the slowness found in building the site up to <a href="https://www.haskell.org/">Haskell</a>’s compilation times and Hakyll’s programming.</p>
<p>Fortunately, I spotted a lot of places in the code base that could have been optimised and as part of the refresh I fixed them. In the past, I had to recompile every page whenever anything was saved, but this was actually my fault and Hakyll does in fact have the ability to only recompile what’s necessary so long as you take the time to understand each step of the building process. That, and making sure your indents are as you expect so that you don’t do expensive processes inside loops…</p>
<h1 id="wrapping-up">Wrapping up</h1>
<p>It’s been a good few weeks working on my website — if only I put as much love and effort into myself as I do my online presence; perhaps this could be said for lots of people.</p>
<p>I hope the redesign helps provide a more enjoyable experience so that I can receive more comments and questions via email as I really enjoyed <a href="/blog/qna-1/">responding to you all in the Q and A!</a>.</p>
<p>As always, I hope to participate more in the blog-writing space in the coming months, but don’t hold me to it. If you have any questions about what you see, feel free to get in touch at <a href="mailto:contact@aas.sh">contact@aas.sh</a>!</p>]]></description>
    <pubDate>Thu, 07 Jul 2022 00:00:00 UT</pubDate>
    <guid>https://aas.sh/blog/website-redesign-with-bulma/index.html</guid>
    <dc:creator>Ashley Rose</dc:creator>
</item>
<item>
    <title>Website redesign with Bulma CSS</title>
    <link>https://aas.sh/blog/website-redesign-with-bulma/index.html</link>
    <description><![CDATA[<div class="gitrepo infobox fill-horizontal">
<div class="header">
<span class="lab la-github mr-3"></span>Repository - aas.sh
</div>
<p>GitHub repository for this website can be found <a href="https://github.com/Ashe/ashe.github.io">here</a>.</p>
</div>
<section id="introduction" class="article-section">
<h1><span>Introduction</span><a href="#introduction" class="anchor las la-link" title="introduction"></a></h1>
<p>As stated in my <a href="/blog/new-year-new-website/">previous website post</a>, I have a weird habit of redesigning my website every so often. This is always fueled by nitpicks and ambitions, however this time feels different. The last change was the move to <a href="https://nixos.org">Nix</a> and <a href="https://jaspervdj.be/hakyll/">Hakyll</a>, and this time I have kept those foundations and focused solely on the appearance.</p>
<p>The result, and I hope you’ll agree, is a cleaner, smoother website with an appearance I have more control over. In my mission to inspire and share, I want to make things as frictionless as possible!</p>
</section>
<section id="changes" class="article-section">
<h1><span>Changes</span><a href="#changes" class="anchor las la-link" title="changes"></a></h1>
<section id="there-are-now-slides" class="article-section">
<h2><span>There are now slides</span><a href="#there-are-now-slides" class="anchor las la-link" title="there-are-now-slides"></a></h2>
<p>As you may have noticed, there is now a slideshow embedded into the blog post. How cool is that?!</p>
<p>Slides are located as a replacement for the gallery at the top of the page for any blogs with slides enabled. I used to have a section of my website dedicated to slides, but I could never decide if a given post should be in slide format or in blog format. Sometimes I want to go into detail on a specific part of a presentation, whereas other times I want to just do a slideshow. Now I don’t need to choose!</p>
<p>If you haven’t seen it yet, check the top of this page!</p>
</section>
<section id="we-now-use-bulma" class="article-section">
<h2><span>We now use Bulma!</span><a href="#we-now-use-bulma" class="anchor las la-link" title="we-now-use-bulma"></a></h2>
<p><a href="https://bulma.io">Bulma</a> is a CSS framework. I was previously using <a href="https://tailwindcss.com">Tailwind</a>, but unfortunately I leaned on it too much and became controlled by it since I found it very difficult to change the appearance of parts of my site to my liking.</p>
<p><a href="https://bulma.io">Bulma</a> is simpler and is purely CSS. My strategy was to use Bulma for the foundations of the website, and then hand-crafting elements I had a particular interest in. It worked out really well and I feel really comfortable in the fact that I’ve had a hand in every aspect of the website now.</p>
<p>Another advantage of changing framework is that it gave me an opportunity to simplify my <a href="https://nixos.org">Nix</a> code, speeding up iteration and simplifying dependencies. Bulma, along with all of my personal styling, is compiled into a single <code>main.css</code> file via <a href="https://sass-lang.com/">Sass</a>. I’m hoping that this strategy also alleviates pressure on your browser since it’s all in a single file, but I don’t know enough about web technologies to provide any evidence.</p>
</section>
<section id="refreshed-appearance-of-tags" class="article-section">
<h2><span>Refreshed appearance of tags</span><a href="#refreshed-appearance-of-tags" class="anchor las la-link" title="refreshed-appearance-of-tags"></a></h2>
<p>The old tag appearance was quite ugly to be honest. This was the <a href="https://hackage.haskell.org/package/hakyll-4.15.1.1/docs/Hakyll-Web-Tags.html#v:renderTagCloud">default implementation of Hakyll</a>. I decided to reimplement this function and use the actual number of uses per tag as part of the design. The result is a nice new tag list sorted by popularity!</p>
<div class="caption-frame apply-shadow">
<img src="https://res.cloudinary.com/aas-sh/image/upload/v1657296459/blog/2022/07/08-07-2022_17_07_25_tpdkvt.png" title="New appearance of tag cloud." class="w-full object-cover" alt="New appearance of tag cloud." />
<div class="caption">
<p>New appearance of tag cloud.</p>
<div class="caption-source">
<a href="https://aas.sh" title="aas.sh">aas.sh</a>
</div>
</div>
</div>
</section>
<section id="code-cleanup" class="article-section">
<h2><span>Code cleanup</span><a href="#code-cleanup" class="anchor las la-link" title="code-cleanup"></a></h2>
<p>One of the barriers I had to writing more content was how long Hakyll took to compile my website. As per usual, this was user error. After being spoilt by frameworks like <a href="https://gohugo.io/">Hugo</a> in the past, I chalked all of the slowness found in building the site up to <a href="https://www.haskell.org/">Haskell</a>’s compilation times and Hakyll’s programming.</p>
<p>Fortunately, I spotted a lot of places in the code base that could have been optimised and as part of the refresh I fixed them. In the past, I had to recompile every page whenever anything was saved, but this was actually my fault and Hakyll does in fact have the ability to only recompile what’s necessary so long as you take the time to understand each step of the building process. That, and making sure your indents are as you expect so that you don’t do expensive processes inside loops…</p>
</section>
</section>
<section id="wrapping-up" class="article-section">
<h1><span>Wrapping up</span><a href="#wrapping-up" class="anchor las la-link" title="wrapping-up"></a></h1>
<p>It’s been a good few weeks working on my website — if only I put as much love and effort into myself as I do my online presence; perhaps this could be said for lots of people.</p>
<p>I hope the redesign helps provide a more enjoyable experience so that I can receive more comments and questions via email as I really enjoyed <a href="/blog/qna-1/">responding to you all in the Q and A!</a>.</p>
<p>As always, I hope to participate more in the blog-writing space in the coming months, but don’t hold me to it. If you have any questions about what you see, feel free to get in touch at <a href="mailto:contact@aas.sh">contact@aas.sh</a>!</p>
</section>]]></description>
    <pubDate>Thu, 07 Jul 2022 00:00:00 UT</pubDate>
    <guid>https://aas.sh/blog/website-redesign-with-bulma/index.html</guid>
    <dc:creator>Ashley Rose</dc:creator>
</item>
<item>
    <title>First ever QNA!</title>
    <link>https://aas.sh/blog/qna-1/index.html</link>
    <description><![CDATA[<div class="help" data-header="Want to ask a question?">
<p>There’s no such thing as a stupid question, and I’m no where near important enough to be able to ignore anyone! If you have anything you want to ask, feel free to email me at <a href="mailto:contact@aas.sh">contact@aas.sh</a>.</p>
</div>
<h1 id="introduction">Introduction</h1>
<p>Wow! People actually read my website — who knew? I have been speaking to some delightful people over the past few months, and I realised that their questions and my answers would make for a great post on my website, especially when I haven’t been posting much!</p>
<p>I’ve asked the people who contacted me whether they’d be comfortable with me sharing their sides of the conversation. I’ll only be writing their initials just to keep it anonymous.</p>
<h1 id="questions">Questions</h1>
<h2 id="daily-schedule">Daily schedule</h2>
<blockquote>
<p>Hello,</p>
<p>Idealization is very common for humans, and internet incentives this behavior. After reading most of your blog, you appear to me as an insatiable knowledge sponge capable of working for days straight without rest. (this is not an attempt at flattery)</p>
<p>If I’m not asking too much, would you be able to share your general daily schedule? How much time you dedicate to programming and to entertainment? Maybe to a person such as yourself entertainment IS programming? :)</p>
<p>I apologize for any grammar mistake.</p>
<p>Good day!</p>
<p><strong>— LX, 23/03/2022</strong></p>
</blockquote>
<p>Perhaps I am a bit of a sponge, but I think it’s mostly just a drive to do more. While at university, I had this feeling like I wasn’t prepared to go into the industry, that there was something they weren’t telling us. After doing stuff in my spare time, people started noticing that I just became more competent at programming seemingly overnight, which motivated me more.</p>
<p>The goal at first was simply to get a job in the industry, since I didn’t really have a backup plan for what to do if I failed. I’ve always been confident in myself and never really failed at exams or tests, so I truly believed I can achieve whatever I put my mind to. I am currently working at Jagex, a company my younger self described as ‘if I worked there, I’d know I’d have won at life’. Never really expected to achieve it so soon if I’m honest!</p>
<p>I can’t really give you my schedule, because I simply don’t have one. When I was doing the bulk of my projects that you have seen, I basically became nocturnal. I’d go to sleep, think of a cool idea for a game (or a mechanic for a game I’m making), then become unable to sleep until I acted on it. I’d boot up my computer and start programming until I achieved it and fell asleep. It was very unhealthy, but I felt alive.</p>
<p>If I wasn’t making games, I was playing them, or watching someone on twitch play them. I’m very much obsessed, and maybe that’s unattractive or a bit repulsive to some, but it’s these very qualities that allowed me to overtake my peers at uni as well as perform my best at work. Even as a junior, I was heavily relied on as an instrumental part of the team — not for my programming but for my ideas and insight into products, demographics and companies in the games industry.</p>
<p>Since getting my job, I don’t do as many personal projects anymore, since I learn just as many things from simply attending work. Right now I’m learning soft skills and leadership skills; how to create and participate in a good team of engineers to make something as a group. This is something I couldn’t have learned on my own and is vital for my career, and so I’m comfortable with simply finishing work and then relaxing. I do get the drive to make games sometimes, but I don’t act on them like I used to.</p>
<p>To answer your question about how much time did I dedicate to entertainment, I basically never stop doing something game related. I’m what you’d call sedentary, I basically am always on my computer. I put my education and career first before my physical health, which in turn has started to hit me mentally too. I wouldn’t reccomend having such an unhealthy balance, but I will say that making video games rather than going clubbing as a student will definitely be a better use of your time!</p>
<p>At the end of the day, you have to ask yourself what YOU want to do. I’ve had plenty of people want to learn programming for the sake of getting a job in STEM and getting a job etc. That’s all well and good, but you have to actually be interested, if you’re not then the people who are interested will have the edge on you. This might not be the case as you get more experienced, but since we’re talking about learning to program, having an interest makes all the difference in the world. So many of my student peers didn’t actually care about why one algorithm is different to another, what the applications of the algorithms are, or even how the implementation of that algorithm changes with different languages.</p>
<p>Ask yourself why you’re wanting to program, and more specifically what it is you want to program. Get excited, start simple, but work towards learning enough to start another project which matters a lot to you. Before you know it, you’ll have learned from 2-3 projects and be in the same position I was where you start to get a feel for your own progress and start to enjoy it.</p>
<p>I hope this has been useful, and don’t hesitate to ask for more!</p>
<h2 id="programming-and-loneliness">Programming and loneliness</h2>
<blockquote>
<p>Your readers might be interested in the following question:
Programming often leads to isolation, how to deal with loneliness and lack of social interaction?</p>
<p><strong>— LX, 24/03/2022</strong></p>
</blockquote>
<p>I wouldn’t say programming leads to isolation, but it is true that loneliness is an issue I’m facing just personally.</p>
<p>As with most things — everything in moderation. Just because you’re learning programming doesn’t mean that you can’t go see your friends!</p>
<p>In terms of jobs, yeah maybe programming is quite a lonely job since you need to do a lot of thinking and sometimes that requires a bit of peace and quiet. Additionally you don’t really share a computer (although you can do ‘pair programming’ when you work together on the same thing for a bit). Nothing much you can do about that, but at the same time this is considered a positive by a lot of people.</p>
<p>If you work in an office, I guess things become a little bit more social since you’re next to other people, really depending on the job and the project / product.</p>
<p>Hope this helps!</p>
<h2 id="passion-and-programming">Passion and programming</h2>
<blockquote>
<p>Hello, I couldn’t resist the temptation to write to your email and tell you that in each of your posts I feel more inspired to learn from the wonderful world of programming.</p>
<p>I have more than 8 years in the world of technology (azure, dns AD, Vmware) but I have always wanted to learn to program in a language that will generate excitement and thanks to you Haskell seems to be the choice</p>
<p>I would just like to have your opinion on what could be the best way forward for someone like me to have the passion and knowledge that you have (at least 10 percent).</p>
<p>Sorry again for contacting you like this, but thank you for contributing to a world so full of information, with real data of value.</p>
<p><strong>— HLC, 15/05/2022</strong></p>
</blockquote>
<p>Hello, and thank you for your kind words!</p>
<p>It’s a tough question since a lot of my posts were written when I was at university, where my energy and enthusiasm came from a rebellious phase of trying to convince the university that they weren’t doing enough (they didn’t teach students about source control or build systems etc).</p>
<p>Since starting my career in the games industry, my enthusiasm has certainly degraded and I’m trying to rekindle the same spark that you’re searching for. I think there comes a point in most people’s lives where you have to soul search for what it is you really want. When you spend a lot of your time programming professionally, do you really have the energy to then start working on your own projects? This is the question I’m asking myself.</p>
<p>A lot of what drove me was that everything felt useful. Haskell was the door to functional programming, and forcing myself to do the things I enjoyed (games) in this new context was fascinating. My end goal wasn’t to make a game, it was to learn. Now though, everything is about trying to be more employable, trying to get that new position, trying to keep relevant. Hobby projects that don’t really produce anything won’t be as interesting as say, 5 years in the industry. When viewing my own projects through this lens, I feel like I should be doing more and that line of thinking is exhausting.</p>
<p>I’m currently considering a career change so that what I program professionally doesn’t clash with what I do recreationally. I love programming games and messing with functional languages, so having to then go to work on a video game means that my creative capacity is expended on work rather than myself. By hopefully moving to a job in software, I should be able to work on hobby projects without feeling the way I do now.</p>
<p>Right now, my interest is captivated in a project I’m doing with a colleague, and it’s a ‘slow burn’ project because we’re both worried about taking too much at once. It’s in ‘Haxe’, a language which is kind of in the middle of traditional imperative languages and functional. It’s fun for games, and was used to make games like Dead Cells and Northgard. It allows me to make something (and hopefully release it), while also doing some systems functionally. It’s been over a year since a project has made me excited enough to work on it after work and so I’m grateful to find the strength to start this. Starting is always the hardest bit.</p>
<p>Sorry if that wasn’t the answer you’re looking for, but that’s the position I’m in. You can also see my drop of energy being reflected in the frequency of posts on my site. I have tons of posts planned, but mental health / energy is really limiting me.</p>
<p>Thanks!</p>
<h1 id="wrapping-up">Wrapping up</h1>
<p>That seems like a lot of writing, but actually I did 0 work for this post since I just skimmed through what I was talking to people about over email! I really appreciate people’s questions and thoughts and my inbox is always open if more people want to get in touch!</p>
<p>In terms of improving this type of post… I might need to either ask people to ask specific questions, or perhaps come up with a better name than Q&amp;A! I don’t care that the questions are a little longer and my responses are lengthy, but perhaps it doesn’t make for a very good blog post. Maybe making a distinction between conversations with readers and Q&amp;A posts might be the answer, but that all hinges on the kinds of reader interaction I get in the future!</p>
<p>Let me know if you have any feedback, and if you have any questions or thoughts, feel free to email me: <a href="mailto:contact@aas.sh">contact@aas.sh</a>.</p>
<p>Thanks for reading!</p>]]></description>
    <pubDate>Sun, 01 May 2022 00:00:00 UT</pubDate>
    <guid>https://aas.sh/blog/qna-1/index.html</guid>
    <dc:creator>Ashley Rose</dc:creator>
</item>
<item>
    <title>First ever QNA!</title>
    <link>https://aas.sh/blog/qna-1/index.html</link>
    <description><![CDATA[<div class="help infobox fill-horizontal">
<div class="header">
<span class="las la-question-circle mr-3"></span>Want to ask a question?
</div>
<p>There’s no such thing as a stupid question, and I’m no where near important enough to be able to ignore anyone! If you have anything you want to ask, feel free to email me at <a href="mailto:contact@aas.sh">contact@aas.sh</a>.</p>
</div>
<section id="introduction" class="article-section">
<h1><span>Introduction</span><a href="#introduction" class="anchor las la-link" title="introduction"></a></h1>
<p>Wow! People actually read my website — who knew? I have been speaking to some delightful people over the past few months, and I realised that their questions and my answers would make for a great post on my website, especially when I haven’t been posting much!</p>
<p>I’ve asked the people who contacted me whether they’d be comfortable with me sharing their sides of the conversation. I’ll only be writing their initials just to keep it anonymous.</p>
</section>
<section id="questions" class="article-section">
<h1><span>Questions</span><a href="#questions" class="anchor las la-link" title="questions"></a></h1>
<section id="daily-schedule" class="article-section">
<h2><span>Daily schedule</span><a href="#daily-schedule" class="anchor las la-link" title="daily-schedule"></a></h2>
<blockquote>
<p>Hello,</p>
<p>Idealization is very common for humans, and internet incentives this behavior. After reading most of your blog, you appear to me as an insatiable knowledge sponge capable of working for days straight without rest. (this is not an attempt at flattery)</p>
<p>If I’m not asking too much, would you be able to share your general daily schedule? How much time you dedicate to programming and to entertainment? Maybe to a person such as yourself entertainment IS programming? :)</p>
<p>I apologize for any grammar mistake.</p>
<p>Good day!</p>
<p><strong>— LX, 23/03/2022</strong></p>
</blockquote>
<p>Perhaps I am a bit of a sponge, but I think it’s mostly just a drive to do more. While at university, I had this feeling like I wasn’t prepared to go into the industry, that there was something they weren’t telling us. After doing stuff in my spare time, people started noticing that I just became more competent at programming seemingly overnight, which motivated me more.</p>
<p>The goal at first was simply to get a job in the industry, since I didn’t really have a backup plan for what to do if I failed. I’ve always been confident in myself and never really failed at exams or tests, so I truly believed I can achieve whatever I put my mind to. I am currently working at Jagex, a company my younger self described as ‘if I worked there, I’d know I’d have won at life’. Never really expected to achieve it so soon if I’m honest!</p>
<p>I can’t really give you my schedule, because I simply don’t have one. When I was doing the bulk of my projects that you have seen, I basically became nocturnal. I’d go to sleep, think of a cool idea for a game (or a mechanic for a game I’m making), then become unable to sleep until I acted on it. I’d boot up my computer and start programming until I achieved it and fell asleep. It was very unhealthy, but I felt alive.</p>
<p>If I wasn’t making games, I was playing them, or watching someone on twitch play them. I’m very much obsessed, and maybe that’s unattractive or a bit repulsive to some, but it’s these very qualities that allowed me to overtake my peers at uni as well as perform my best at work. Even as a junior, I was heavily relied on as an instrumental part of the team — not for my programming but for my ideas and insight into products, demographics and companies in the games industry.</p>
<p>Since getting my job, I don’t do as many personal projects anymore, since I learn just as many things from simply attending work. Right now I’m learning soft skills and leadership skills; how to create and participate in a good team of engineers to make something as a group. This is something I couldn’t have learned on my own and is vital for my career, and so I’m comfortable with simply finishing work and then relaxing. I do get the drive to make games sometimes, but I don’t act on them like I used to.</p>
<p>To answer your question about how much time did I dedicate to entertainment, I basically never stop doing something game related. I’m what you’d call sedentary, I basically am always on my computer. I put my education and career first before my physical health, which in turn has started to hit me mentally too. I wouldn’t reccomend having such an unhealthy balance, but I will say that making video games rather than going clubbing as a student will definitely be a better use of your time!</p>
<p>At the end of the day, you have to ask yourself what YOU want to do. I’ve had plenty of people want to learn programming for the sake of getting a job in STEM and getting a job etc. That’s all well and good, but you have to actually be interested, if you’re not then the people who are interested will have the edge on you. This might not be the case as you get more experienced, but since we’re talking about learning to program, having an interest makes all the difference in the world. So many of my student peers didn’t actually care about why one algorithm is different to another, what the applications of the algorithms are, or even how the implementation of that algorithm changes with different languages.</p>
<p>Ask yourself why you’re wanting to program, and more specifically what it is you want to program. Get excited, start simple, but work towards learning enough to start another project which matters a lot to you. Before you know it, you’ll have learned from 2-3 projects and be in the same position I was where you start to get a feel for your own progress and start to enjoy it.</p>
<p>I hope this has been useful, and don’t hesitate to ask for more!</p>
</section>
<section id="programming-and-loneliness" class="article-section">
<h2><span>Programming and loneliness</span><a href="#programming-and-loneliness" class="anchor las la-link" title="programming-and-loneliness"></a></h2>
<blockquote>
<p>Your readers might be interested in the following question:
Programming often leads to isolation, how to deal with loneliness and lack of social interaction?</p>
<p><strong>— LX, 24/03/2022</strong></p>
</blockquote>
<p>I wouldn’t say programming leads to isolation, but it is true that loneliness is an issue I’m facing just personally.</p>
<p>As with most things — everything in moderation. Just because you’re learning programming doesn’t mean that you can’t go see your friends!</p>
<p>In terms of jobs, yeah maybe programming is quite a lonely job since you need to do a lot of thinking and sometimes that requires a bit of peace and quiet. Additionally you don’t really share a computer (although you can do ‘pair programming’ when you work together on the same thing for a bit). Nothing much you can do about that, but at the same time this is considered a positive by a lot of people.</p>
<p>If you work in an office, I guess things become a little bit more social since you’re next to other people, really depending on the job and the project / product.</p>
<p>Hope this helps!</p>
</section>
<section id="passion-and-programming" class="article-section">
<h2><span>Passion and programming</span><a href="#passion-and-programming" class="anchor las la-link" title="passion-and-programming"></a></h2>
<blockquote>
<p>Hello, I couldn’t resist the temptation to write to your email and tell you that in each of your posts I feel more inspired to learn from the wonderful world of programming.</p>
<p>I have more than 8 years in the world of technology (azure, dns AD, Vmware) but I have always wanted to learn to program in a language that will generate excitement and thanks to you Haskell seems to be the choice</p>
<p>I would just like to have your opinion on what could be the best way forward for someone like me to have the passion and knowledge that you have (at least 10 percent).</p>
<p>Sorry again for contacting you like this, but thank you for contributing to a world so full of information, with real data of value.</p>
<p><strong>— HLC, 15/05/2022</strong></p>
</blockquote>
<p>Hello, and thank you for your kind words!</p>
<p>It’s a tough question since a lot of my posts were written when I was at university, where my energy and enthusiasm came from a rebellious phase of trying to convince the university that they weren’t doing enough (they didn’t teach students about source control or build systems etc).</p>
<p>Since starting my career in the games industry, my enthusiasm has certainly degraded and I’m trying to rekindle the same spark that you’re searching for. I think there comes a point in most people’s lives where you have to soul search for what it is you really want. When you spend a lot of your time programming professionally, do you really have the energy to then start working on your own projects? This is the question I’m asking myself.</p>
<p>A lot of what drove me was that everything felt useful. Haskell was the door to functional programming, and forcing myself to do the things I enjoyed (games) in this new context was fascinating. My end goal wasn’t to make a game, it was to learn. Now though, everything is about trying to be more employable, trying to get that new position, trying to keep relevant. Hobby projects that don’t really produce anything won’t be as interesting as say, 5 years in the industry. When viewing my own projects through this lens, I feel like I should be doing more and that line of thinking is exhausting.</p>
<p>I’m currently considering a career change so that what I program professionally doesn’t clash with what I do recreationally. I love programming games and messing with functional languages, so having to then go to work on a video game means that my creative capacity is expended on work rather than myself. By hopefully moving to a job in software, I should be able to work on hobby projects without feeling the way I do now.</p>
<p>Right now, my interest is captivated in a project I’m doing with a colleague, and it’s a ‘slow burn’ project because we’re both worried about taking too much at once. It’s in ‘Haxe’, a language which is kind of in the middle of traditional imperative languages and functional. It’s fun for games, and was used to make games like Dead Cells and Northgard. It allows me to make something (and hopefully release it), while also doing some systems functionally. It’s been over a year since a project has made me excited enough to work on it after work and so I’m grateful to find the strength to start this. Starting is always the hardest bit.</p>
<p>Sorry if that wasn’t the answer you’re looking for, but that’s the position I’m in. You can also see my drop of energy being reflected in the frequency of posts on my site. I have tons of posts planned, but mental health / energy is really limiting me.</p>
<p>Thanks!</p>
</section>
</section>
<section id="wrapping-up" class="article-section">
<h1><span>Wrapping up</span><a href="#wrapping-up" class="anchor las la-link" title="wrapping-up"></a></h1>
<p>That seems like a lot of writing, but actually I did 0 work for this post since I just skimmed through what I was talking to people about over email! I really appreciate people’s questions and thoughts and my inbox is always open if more people want to get in touch!</p>
<p>In terms of improving this type of post… I might need to either ask people to ask specific questions, or perhaps come up with a better name than Q&amp;A! I don’t care that the questions are a little longer and my responses are lengthy, but perhaps it doesn’t make for a very good blog post. Maybe making a distinction between conversations with readers and Q&amp;A posts might be the answer, but that all hinges on the kinds of reader interaction I get in the future!</p>
<p>Let me know if you have any feedback, and if you have any questions or thoughts, feel free to email me: <a href="mailto:contact@aas.sh">contact@aas.sh</a>.</p>
<p>Thanks for reading!</p>
</section>]]></description>
    <pubDate>Sun, 01 May 2022 00:00:00 UT</pubDate>
    <guid>https://aas.sh/blog/qna-1/index.html</guid>
    <dc:creator>Ashley Rose</dc:creator>
</item>

    </channel>
</rss>
